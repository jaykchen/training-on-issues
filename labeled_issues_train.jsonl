{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Enabling LLM fine tuning in the WASI-NN ggml plugin` created by `hydai`, stating `WasmEdge aims to enable LLM application portability across CPUs and GPUs through the use of the WASI-NN API. The project seeks to extend the WASI-NN spec to support fine-tuning features and implement them in the WasmEdge GGML plugin by calling functions in llama.cpp. Key outcomes include using llama2-7b as the base LLM, extending the WASI-NN spec if necessary, and implementing the fine-tuning functions. Documentation, examples, tutorials, and demonstrations are also required. Key skills needed include C++, WebAssembly, and LLM fine-tuning. Notably, a GPU device is not necessary for this task.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Enabling LLM fine tuning in the WASI-NN PyTorch plugin` created by `hydai`, stating `WasmEdge aims to enhance support for fine-tuning features, thereby improving developer experience. The project plans to extend the existing WASI-NN spec to include fine-tuning functionalities for PyTorch LLM. This involves creating additional APIs, implementing them within the WasmEdge PyTorch plugin, and porting data pre- and post-processing logic from Python to Rust, compiling them to Wasm, and utilizing the WASI-NN fine-tuning API functions. The expected outcomes include utilizing llama2-7b as the base LLM for fine-tuning, updating the WASI-NN spec if necessary, implementing fine-tuning functions within the WASI-NN PyTorch plugin, creating a Rust crate for the necessary pre- and post-processing functions, and providing comprehensive documentation, examples, tutorials, and demonstrations. The project requires skills in C++, WebAssembly, and PyTorch. Relevant resources include the PyTorch C++ API, WasmEdge PyTorch plugin examples, the yolo-rs project, and guides on PyTorch-based LLM fine-tuning libraries.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Enabling WasmEdge AOT mode execution in the proxy-wasm integration` created by `hydai`, stating `WasmEdge needs to add support for ahead-of-time (AOT) mode in the proxy-wasm proposal. The aim is to improve performance by enabling AOT mode in addition to the existing interpreter mode. In this mentorship, we need help to complete the AOT mode and document examples of running with proxy-wasm. Action Items: - Modify the bazel file to include the latest LLVM dependency. - Modify the code to support running WASM in AOT mode. - Add documentation of proxy-wasm in the WasmEdge docs repo. - Prepare a tutorial for building and executing the examples. Skills Required: C/C++, WebAssembly, bazel`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `Fix the linking error with simdjson` created by `hankluo6`, stating `The issue with #2791 was caused by simdjson being exported with a namespace, causing linking failure when using `find_package`. Adding the namespace prefix to `target_link_libraries` resolves this issue.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implementing Coredump for Post-Mortem Debugging in WebAssembly` created by `hydai`, stating `The project aims to enhance WebAssembly debugging by implementing a coredump feature for post-mortem analysis. This involves collecting stack frames, local variable values, and a memory snapshot in a coredump file, along with DWARF information, to debug runtime errors. The project requires creating tools to generate and analyze Wasm coredumps, addressing WebAssembly's memory model and execution semantics. Key outcomes include a new API and tool option for specifying coredump files, implementing coredump in WasmEdge components, ensuring compatibility with existing toolchains, documenting the coredump format, and providing tutorials and examples for post-mortem debugging. The recommended skills for this project are WebAssembly, C++, and debugger expertise. The full original issue can be found here: https://github.com/WasmEdge/WasmEdge/issues/2264`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `changing permissions hierarchy as per ossf docs` created by `jaydee029`, stating `I revisited the [ossf scorecard documentation](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and found that for an ideal workflow, the top-level permissions should only be `contents:read` or `read-all`. All other permissions should be specified at the job level to pass the ossf checks.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Unknown warning option when building on Apple Clang` created by `q82419`, stating `After merging #3195 with Apple Clang, the following warning occurs: ``` warning: unknown warning option '-Wno-deprecated-literal-operator'; did you mean '-Wno-deprecated-copy-dtor'? [-Wunknown-warning-option] 1 warning generated. ``` To reproduce, build with CMake and Ninja. Using WasmEdge Version 'master' on macOS 13.2 (arm64). No other logs or compiler flags provided. This pertains to the C SDK and suggests an issue with the warning options in the code.`?"}
{"completion":"The labels for this issue are `enhancement c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Remove the extension support in the installer` created by `hydai`, stating `The extension architecture update from 0.10.0 enabled ML and Image processing solutions via `wasmedge-tensorflow-extension` and `wasmedge-image-extension`, but these were limited to C++. To expand to other programming languages, WasmEdge has refactored and introduced a plugin architecture in 0.10.1, prompting the transition of existing extensions to this new framework in 0.13.0. To align with this change, the 'extension' option will be removed from the installer, and a warning will be added to inform users of this alteration.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump codecov/codecov-action from 3 to 4` created by `dependabot[bot]`, stating `The issue states that the [codecov/codecov-action](https://github.com/codecov/codecov-action) is being upgraded from version 3 to 4. It mentions the breaking changes and key improvements in version 4, such as the transition to the CLI for uploads and deprecation of certain architectures. Additionally, it highlights the changes in dependencies and build requirements that can impact the existing usage of the action. The author shares the release notes and changelog of version 4.0.0-beta.1 and 4.0.0-beta.2, emphasizing the switch from the universal uploader to the Codecov CLI and the associated feature differences. The author also points out specific fixes and dependency updates in the changelog that may influence the action's behavior. The author requests assistance in handling the breaking changes, adapting to the new features, addressing any potential compatibility issues due to the version update, and addressing any fixes or improvements mentioned in the changelog. The Dependabot functionality for automating resolution of conflicts in this PR is also mentioned, along with the commands available to trigger Dependabot actions. The summary distills the author's message into a concise overview while maintaining the technical specifics and requests.`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Test c-CI c-CMake c-Example c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `llvm JIT support` created by `ibmibmibm`, stating `Consolidating technical changes for LLVM-related and JIT functionalities: - Move LLVM code to a separate directory and rename cmake config. - Separate `CodeGen` from `Compiler` class and introduce `LLVM::Data` class for `LLVM::Context` and `LLVM::Module` transfer. - Add LLVM orcjit as a dependency and use OrcThreadSafeContext and OrcThreadSafeModule in JIT. - Introduce `Executable` interface class to manage shared library, AOT section, and JIT library in `Symbol`. - Rearrange classes, split `SharedLibrary`, remove `LDMgr`, and modify `Loader`. - Include new `LLVM::JITLibrary` and command line option for enabling JIT.`?"}
{"completion":"The labels for this issue are `enhancement c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: enable new base image - manylinux_2_28` created by `hydai`, stating `CentOS 7 will reach EOL on June 30, 2024, and manylinux_2014 will be deprecated soon, with manylinux_2_28 as the successor. To enable this, we need to prepare new docker images based on manylinux_2_28 and add CI workflows using those images. The details about manylinux_2_28 can be found at the provided link.`?"}
{"completion":"The labels for this issue are `bug c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `bug: uninstaller not working when the `.bash_profile` is not a regular file.` created by `hydai`, stating `Please check this issue at https://github.com/second-state/LlamaEdge/issues/100. When running the installer, it first runs the uninstaller to remove the previous installation, leading to a bug. The error \"sed: /Users/user/.bash_profile: in-place editing only works for regular files\" is likely caused by the uninstall script at https://github.com/WasmEdge/WasmEdge/blob/master/utils/uninstall.sh#L254-L255. The expected state is for everything to function without issue. To reproduce the problem, run the uninstaller on a machine where `.bash_profile` is not a regular file. OS: macOS 14.2.1, Architecture: x86_64, Compiler flags/options: none.`?"}
{"completion":"The labels for this issue are `enhancement LFX Mentorship c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Mentorship (Mar-May, 2024): Integrate burn.rs as a new WASI-NN backend` created by `hydai`, stating `WasmEdge seeks to integrate `burn.rs` as a new WASI-NN backend to enhance portability, flexibility, and compute efficiency. To apply for this mentorship, completion of a pre-test is required, and recommended skills include Rust and Wasm. The expected outcome includes a new plugin providing a burn.rs WASI-NN backend, along with a test suite, documentation, and examples. Mentorship will be provided by Hung-Ying Tai and dm4. Relevant links:  - Pre-test: https://github.com/WasmEdge/WasmEdge/discussions/3182 - Burn.rs: https://github.com/tracel-ai/burn - WASI-NN: https://github.com/second-state/wasmedge-wasi-nn - Integration of PyTorch: https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasi_nn - Implementation of a Rust plugin: https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasmedge_rustls`?"}
{"completion":"The labels for this issue are `enhancement LFX Mentorship c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Mentorship (Mar-May, 2024): Integrate whisper.cpp as a new WASI-NN backend` created by `hydai`, stating `WasmEdge aims to integrate whisper.cpp as a new WASI-NN backend to enable voice-to-text processing. To achieve this, a new plugin with whisper.cpp support needs to be developed, along with a validation test suite, documentation, and usage examples. Required skills include C++ and Wasm. The mentors for this project are Hung-Ying Tai and dm4. Pre-test completion is a prerequisite for applying for this mentorship. Relevant links include whisper.cpp, WASI-NN, and the llama.cpp backend.`?"}
{"completion":"The labels for this issue are `enhancement LFX Mentorship c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Mentorship (Mar-May, 2024): Integrate Intel Extension for Transformers as a new WASI-NN backend` created by `hydai`, stating `LLM is a hot topic with a focus on faster execution. WasmEdge currently integrates llama.cpp as a backend, which is significant for users without GPU. We aim to add Intel Extension for Transformers as a new WASI-NN backend to enhance CPU inference performance.  To proceed, a pre-test must be completed. Expected outcome includes a new plugin providing Intel Extension for Transformers WASI-NN backend, a validation test suite, documentation, and usage examples. Key details: - Pre-test link: [Pre-test Link](https://github.com/WasmEdge/WasmEdge/discussions/3182) - Recommended Skills: C++, Wasm - Mentors: Hung-Ying Tai (@hydai, hydai@secondstate.io), dm4 (@dm4, dm4@secondstate.io) Relevant links: 1. Intel Extension for Transformers: https://github.com/intel/intel-extension-for-transformers 2. WASI-NN: https://github.com/second-state/wasmedge-wasi-nn 3. WASI-NN llama.cpp backend: https://github.com/WasmEdge/WasmEdge/tree/master/plugins/wasi_nn (check ggml.h and ggml.cpp)`?"}
{"completion":"The labels for this issue are `enhancement LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Mentorship (Mar-May, 2024): Integrate MLX as a new WASI-NN backend` created by `hydai`, stating `LLM is a hot topic with increasing frameworks for faster execution. WasmEdge integrated llama.cpp and aims to add more backends like MLX, an Apple silicon array framework. We expect a new plugin providing an MLX WASI-NN backend, a test suite, documents, and examples. Skills needed are C++ and Wasm. Mentors are @hydai and @dm4. MLX, WASI-NN, and llama.cpp backend details are provided in respective links. Pre-test completion is mandatory for mentorship consideration.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/cache from 3 to 4` created by `dependabot[bot]`, stating `Issue: Upgrade [actions/cache](https://github.com/actions/cache) from version 3 to 4, highlighting the changes, contributors, and new features in version 4.0.0. Include new contributors, full changelog, release notes, and the impact of the upgrade.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Unexpected exception triggered by the instruction `memory.init`` created by `erxiaozhou`, stating `The test case has a `memory.init` instruction which should be valid, but it triggers an unexpected \"memory OOB\" exception. The exception error message points out the specific issue, mentioning the boundary violation and the instruction responsible. This is causing confusion due to the comparison of memory addresses. The expected state is to have no exception.  Reproducing the steps involves building with specific CMake flags and then executing a command. Logs detail the error further.  Additional details include the WasmEdge version used, the operating system, hardware architecture, and specific compiler flags. No logs for the specific issue are provided.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Unexpect exception (memory OOB)` created by `erxiaozhou`, stating `An unexpected \"memory OOB\" exception occurs on WasmEdge, causing the specific error code 0x408. To reproduce, build with the specified CMake flags, execute the provided test case, and observe the memory access error. The expected output is 782761984. Screenshots and system details are included for context. The issue specifically pertains to the CLI component, version 930abbedb7738db582e4996671827bbe0550d8e8, on Ubuntu 20.04 x86_64.`?"}
{"completion":"The labels for this issue are `feature c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: component-model proposal's instantiation` created by `dannypsnl`, stating `Complete instantiation for loaded component binary. Refer to the detailed process on https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md and add proper instantiation steps.  A component includes modules, components, instance expressions, types, aliases, canonical functions, start function, imports, and exports. To instantiate a component, resolve dependencies first, expand namespaces to linear, and instantiate through order.`?"}
{"completion":"The labels for this issue are `good first issue feature c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: component-model proposal's validation` created by `dannypsnl`, stating `Complete validation is required for a loaded component binary. Check the following links for detailed information and add the appropriate validation process: 1. https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md 2. https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WIP][Wasi] add Wasi-Socket` created by `LFsWang`, stating `- [ ] udp - [ ] tcp - [ ] ip-name-lookup - [ ] access control Concerns: - Need to decide between using UDP or TCP for data transmission. - Investigating issues related to IP name lookup. - Implementing access control measures for security. Specifics: - Looking for guidance on the optimal choice between UDP and TCP for our data transmission needs. - Need help resolving IP name lookup challenges within our system. - Seeking advice on best practices for implementing access control measures to enhance our security protocols.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Add FreeBSD Support` created by `rusty-eagle`, stating `WasmEdge support for FreeBSD would be valuable due to its contained runtime and socket support, making it appealing for edge servers. Porting from macOS, which is similar, should be manageable. Any existing patches for this?`?"}
{"completion":"The labels for this issue are `binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `Java binding out sync ` created by `dannypsnl`, stating `Check the latest alpha changelog for any changes in related C structures and signatures.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: `rustls` plugin fail due to ABI breaking change` created by `q82419`, stating `Due to the ABI change for implementing Function Reference Proposal, the rust SDK using `rustls` plugin is failing. It is necessary to update the Rust SDK and rebuild the plug-in. Currently, there is no response or expected state provided. To reproduce the issue, run tests with the wasmedge build from master. We are using WasmEdge version \"master\" on Ubuntu 20.04, x86_64 architecture. No logs, compiler flags, or options have been shared.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Can't run llama2-7b with WasmEdge on RTX 4080` created by `alabulei1`, stating `I'm facing issues running llama2-7b on RTX 4080, encountering CUDA error 222 with an unsupported toolchain. Upon executing specific commands, I receive error messages related to GPU memory usage. The system runs on Ubuntu 22.04.2 LTS with WasmEdge 0.13.5. I aim to resolve these errors and achieve successful interaction with llama2. Reproduction Steps: 1. Execute \"bash <(curl -sSfL 'https://code.flows.network/webhook/iwYN1SdN3AmPgR5ao5Gt/run-llm.sh')\" 2. Choose 1) install WasmEdge, 1) Llama2-7b-chat, 1) run with CLI, and then 1) Yes 3. Ask the question \"Where is Paris?\" Components: CLI Operating System: Ubuntu 22.04.2 LTS Hardware Architecture: x86_64 Additional Details: - CUDA Compiler Version: 12.1 - NVIDIA-SMI Version: 530.30.02 - GPU: NVIDIA GeForce RTX 4080`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LLM inference libraries support plan` created by `hydai`, stating `We'd like to expand WasmEdge's LLM inference libraries, seeking community input and contributions. Currently, PyTorch, TFLite, OpenVINO, and llama.cpp are supported. We've prioritized additional support as follows:  - **Tier 1**: burn-rs - **Tier 2**: Intel extension for transformers, whisper.cpp, RWKV - **Tier 3**: vllm, CTranslate2, candle, mlx Community comments and suggestions are welcome, and we encourage contributions of new LLM inference libraries. Let's work together to advance the ecosystem. If you're interested, please share with us. Happy new year!`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `Plugin built from C11 is shown in the plugin list.` created by `hydai`, stating `Hi, I followed the steps in the contribute plugin development document. I created a file, copied the code, built it, and got a dylib file. I moved it to the plugin location, but when I listed the plugins, only rustls appeared. Am I missing any steps?`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Failed to run `openhermes-2.5-mistral-7b` with the `wasi-nn` plugin of `0.13.5`` created by `apepkuss`, stating `The latest `wasi-nn` plugin failed to run `openhermes-2.5-mistral-7b` with different outcomes on macOS-14.2 (m1 pro) and Ubuntu-22.04 (Intel(R) Xeon(R) Platinum 8259CL CPU). Reproduction steps: - Install WasmEdge 0.13.5 + ggml plugin of the latest version - Download `openhermes-2.5-mistral-7b` and `llama-chat.wasm` - Run the model using specific commands Screenshots are available for both macOS and Ubuntu platforms. WasmEdge Version: 0.13.5 OS: Ubuntu 22.04, macOS 14.2 Hardware: x86_64, aarch64`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Failed to load plugins in PyO3 project on CentOS-7` created by `apepkuss`, stating `I'm using PyO3 and maturin to load wasi-nn_ggml plugin via wasmedge-rust-sdk. When building with `maturin develop`, the generated Python wheel file works well and can print out the count and names of loaded plugins. However, when using `maturin build`, no plugin is loaded. The issue seems to be related to the C-API when using WasmEdge_PluginLoadFromPath. The key software and hardware info is as follows: - Docker image: wasmedge/wasmedge:manylinux2014_x86_64 - WasmEdge 0.13.5 - wasmedge-rust-sdk 0.13.2 - PyO3: 0.20.0 - maturin: 1.4.0 - Rust: 1.74.1 - Python: 3.10 Reproduction steps: - Git clone test code - Docker pull `wasmedge/wasmedge:manylinux2014_x86_64` - Download and unzip the library file - Install WasmEdge Runtime - Set up Python environment - Build with `maturin develop` - Build with `maturin build` (Failed) ![DESCRIPTION](LINK.png) Components: C SDK WasmEdge Version: 0.13.5 Operating system: CentOS-7.9 Hardware: x86_64`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/upload-artifact from 3 to 4` created by `dependabot[bot]`, stating `The update from version 3 to 4 of [actions/upload-artifact](https://github.com/actions/upload-artifact) includes major changes to the backend architecture, delivering enhanced performance and behavioral improvements. Additionally, the release notes for version 4.0.0 and the associated commits provide detailed information on these changes. The updates involve significant contributions from various developers and are aimed at improving artifact management. The author seeks to trigger a rebase of the pull request and has provided specific commands for Dependabot actions to be executed on the PR. Automatic rebases have been disabled due to the PR's duration.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/download-artifact from 3 to 4` created by `dependabot[bot]`, stating `The issue involves upgrading [actions/download-artifact](https://github.com/actions/download-artifact) from version 3 to 4. The release notes for version 4 highlight major changes in the backend architecture, with performance and behavioral improvements. Additionally, new contributors have made their first contributions. The commits associated with this upgrade are also listed. The author has specified Dependabot commands that can be used to trigger certain actions, and automatic rebases have been disabled on the pull request after 30 days.`?"}
{"completion":"The labels for this issue are `binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `Fix java code examples in README` created by `MichaelMorrisEst`, stating `\"Fixes #3091\" When uploading large files, our current validation process times out and fails. This is likely due to the server-side validation taking too long. To address this, we could implement client-side validation to pre-check file size before attempting to upload. Additionally, optimizing the server-side validation process or increasing the timeout limit could help mitigate this issue. Any insights or suggestions on improving the validation process would be much appreciated.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Outdated README in java bindings` created by `MichaelMorrisEst`, stating `Code examples in bindings/java/README.md are outdated due to recent changes in class names and method signatures as noted in issue #2149. To resolve this, I will update the code examples to match the current code and submit a PR with the changes. To reproduce, simply compile the code examples. I am using WasmEdge version f576ba7a2ef4678d4b371cd12242a866b13dae87 on Ubuntu 22.04 x86_64, with no specific compiler flags or options to share.`?"}
{"completion":"The labels for this issue are `bug binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Host function call  through `VmDock::run_func` triggers segfault.` created by `afmika`, stating `In my wasm binary, calling a host function causes a segmentation fault when the referenced value goes out of scope. This issue started with WasmEdge 0.13.5, as variable ownership was changed from direct transfer to borrowed in the current API.  Expecting the following reproduction steps: 1. Create an extern function `host_add` to be defined in (host) 2. Create a function `add_bindgen_host` with `wasmedge_bindgen` macro that calls the host function `host_add` 3. Define `host_add` 4. Define `init_vm` function that returns a `Vm`, `host_add` import happens inside that function 5. In `main`, create a `VmDock`, and run `add_bindgen_host`; the program should segfault with exit code 11. Using Rust SDK on Pop!_OS 22.04 with WasmEdge 0.13.5 on x86_x64 architecture. [test-project.zip](https://github.com/WasmEdge/WasmEdge/files/13625033/test-project.zip)`?"}
{"completion":"The labels for this issue are `bug platform-windows arch-x86_64 c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Read a directory bug ?` created by `Userzxcvbvnm`, stating `There's a file `Data/mydir/test.txt` in the path `Data/mydir`. I want a test program to print the files in that path. WasmEdge prints \"Successfully get the file fd.\" and \"opendir.\", but it fails to print the content of `Data/mydir`. The expected output should be \".\", \"..\", and \"test.txt\", which was printed by wasmer, wasmtime, and wazero. To reproduce the issue, use the command `wasmedge --dir=./Data test.wasm`. I'm using WasmEdge version 0.13.4 on Windows 10 with hardware architecture amd64. I compiled the c file into wasm binaries using clang. ![DESCRIPTION](LINK.png)`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `Get the source file of link file error ?` created by `Userzxcvbvnm`, stating ``Data/link/hello_softlink.txt` is a soft link file that points to `Data/hello.txt`. However, when using MaybeWasmEdge, an error occurs when trying to print the pointed file of the soft link file. The current state indicates a successful file access with the target path referring to the soft link itself, which seems incorrect. The expected state should display the target as `./hello.txt`, and this result is printed by WAMR, wasmtime, and wazsero. To reproduce the issue, use the command `wasmedge --dir=./Data test.wasm`. The system details include Windows 10 as the operating system and x86_64 as the hardware architecture. The author used clang to compile the C file into the wasm file.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows platform-linux c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Softlink error ?` created by `Userzxcvbvnm`, stating `WasmEdge encountered issues with writing content to a softlink file in Windows and Linux. In Windows, it failed to open the softlink file, while in Linux, it created a new file and wrote content to it instead of the expected file. The expected behavior is for WasmEdge to write content successfully to the source file. Reproduction steps involve using test.c and test.wasm files and executing the wasm file with a specific command. Versions used: WasmEdge 0.13.4 Operating systems: Windows 10, Ubuntu 20.04 Hardware architecture: Windows (amd64), Ubuntu 20.04 (x86_64) Compiler: clang The author seeks assistance in resolving the file writing issue and highlights the unexpected behavior in both Windows and Linux environments.`?"}
{"completion":"The labels for this issue are `bug c-AOT fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different output when running a same binary` created by `XinyuShe`, stating `### Issue Summary I tested running randomly generated wasm binaries using the Interpreter and AOT modes of different runtimes. The output from WasmEdge differed from the others. ### Current State #### INTERPRETER ```bash time wasmedge_0.13.5 --reactor filea9117_10.wasm main ^Z [4]+  Stopped  wasmedge_0.13.5 --reactor filea9117_10.wasm main real 1m20.301s user 0m0.003s sys 0m0.003s ``` #### AOT ```bash wasmedge_0.13.5 compile filea9117_10.wasm filea9117_10.so; wasmedge_0.13.5 --reactor filea9117_10.so main Compilation results... Error: integer divide by zero, Code: 0x84, When executing function \"main\" ``` ### Expected State I expect a report of an \"out of bounds memory access\" error when using AOT mode. ## AOT ```bash wasmtime_16 compile filea9117_10.wasm -o filea9117_10.wasmc; wasmtime_16 --allow-precompiled --invoke main filea9117_10.wasmc Caused by:     wasm trap: out of bounds memory access wamrc --bounds-checks=1 -o filea9117_10.wasm.aot filea9117_10.wasm; iwasm --heap-size=0 -f main filea9117_10.wasm.aot Exception: out of bounds memory access ``` ### Reproduction Steps ```bash wasmedge_0.13.5 --reactor filea9117_10.wasm main wasmedge_0.13.5 compile filea9117_10.wasm filea9117_10.so; wasmedge_0.13.5 --reactor filea9117_10.so main ``` ### Components CLI ### WasmEdge Version 0.13.5 ### Operating System Docker version 24.0.5, build ced0996 Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) ### Compiler Flags and Options None provided`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Test c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] Implement GC proposal.` created by `q82419`, stating `Remaining test for interpreter:  - 179 \"gc extern\" line 50, 51, 52`?"}
{"completion":"The labels for this issue are `bug platform-linux c-AOT fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different output when running a same binary` created by `XinyuShe`, stating `I tested the AOT mode of different runtimes using randomly generated wasm binaries. The output from WASMEDGE was different from others. The WASMEDGE output did not match the expected output. Details of expected outputs and errors for `wasmtime`, `wasmer`, and `wamr` are provided for comparison. The issue occurred on Docker version 24.0.5, Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64). The proposed solution is to address the discrepancies in the WASMEDGE output and align it with the expected output. The issue's reproduction steps and specific compiler flags and options are listed for reference. The author seeks insights and resolutions related to this unexpected behavior.`?"}
{"completion":"The labels for this issue are `bug good first issue c-AOT fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different output when running a same binary` created by `XinyuShe`, stating `I ran different runtimes' AOT modes with random wasm binaries, and WASMEDGE gave different output compared to others. Here are the details: Current State: - ran \"wasmedge_0.13.5 compile filea29176_1.wasm filea29176_1.so\", then \"wasmedge_0.13.5 --reactor filea29176_1.so main\" - Output showed an out-of-bounds memory access error during function \"main\" Expected State (from other runtimes): - wasmtime: showed values and a warning about using '--invoke' - wasmer: compiled successfully and displayed values - wamr: generated a file and displayed values Reproduction steps: - ran \"wasmedge_0.13.5 compile  filea29176_1.wasm filea29176_1.so ; wasmedge_0.13.5 --reactor filea29176_1.so main\"  Environment details: - WasmEdge Version: 0.13.5 - OS: Docker version 24.0.5, Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) Compiler flags and options: - No specific flags mentioned Unfortunately, no screenshots or logs were provided.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-linux c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `bug: `fd_pwrite` after setting `fdflags::append` writes from the wrong offset` created by `yagehu`, stating `This issue relates to a bug in WasmEdge, resulting in incorrect file size after executing specific file write operations. The expected behavior, as per WASI specification, is to produce a 102-byte file, but WasmEdge is producing a 169-byte file while Wasmtime behaves correctly. The provided code demonstrates the issue by creating a file and performing write operations. The author has mentioned the build and execution steps with specific commands and their expected outcomes. The author has not received any response, and the expected state, logs, and compiler flags have not been provided. Request for assistance in identifying and resolving the discrepancy between WasmEdge and WASI specification.`?"}
{"completion":"The labels for this issue are `bug c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different error report when running a same binary` created by `XinyuShe`, stating `I randomly generated a wasm binary and tested it with different runtimes, resulting in Wasmedge producing different error messages compared to other runtimes in AOT and JIT modes. Specifically, Wasmedge reports \"out of bounds memory access\" instead of \"integer divide by zero.\" I used Wasmedge-0.13.5-ubuntu20.04_x86_64.tar.gz on Ubuntu 22.04.3 LTS with Docker version 24.0.5. The issue can be reproduced by compiling and running the provided test cases.`?"}
{"completion":"The labels for this issue are `Improvement c-Interpreter`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different execution time when running a same binary` created by `XinyuShe`, stating `I need help optimizing the execution time for a specific WebAssembly binary using Wasmedge. Currently, running the binary with Wasmedge results in a long execution time compared to other runtimes. The specific error reported is \"integer divide by zero.\" I aim to have Wasmedge execute this binary in under 10 seconds. The reproduction steps are: ```bash wasmedge --reactor filea875.wasm main iwasm --heap-size=0 -f main --llvm-jit filea875.wasm wasmtime --invoke main filea875.wasm ``` I'm using Wasmedge version 0.13.5 on Ubuntu 22.04.3 LTS.`?"}
{"completion":"The labels for this issue are `c-CLI c-Test c-WASI c-CMake c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Add compiler warning option `-Wshadow` and `-Wshadow-field`` created by `ibmibmibm`, stating `Prevent `Fd` in INode from leaking to Poller interface and remove unused `Conf`. Add a warning for declaration shadowing another declaration.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Print hard link file number error.` created by `Userzxcvbvnm`, stating `The test case file \"readlink.wasm\" is compiled from \"readlink.c.\" It tests the number of hard links to a file. It involves a hard link file and a soft link file, both pointing to \"hello.txt,\" with the expected hard link number being 1. The current state shows that the number of hard links to the file is 2, whereas the expected state should have the number as 1. Reproduction steps involve executing the wasm file using the command \"wasmedge --dir=./Data readlink.wasm.\" The author encountered this issue using WasmEdge version 0.13.4 on Windows 10 amd64, compiled the C file into Wasm using clang.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Fail to set file time ?` created by `Userzxcvbvnm`, stating `The settime.wasm test case, compiled from settime.c, fails to set the file time in wasmedge. The expected state should include successful file access and modification time updates to specific values. The reproduction steps involve running \"wasmedge --dir=./Data settime.wasm\". The issue is observed on WasmEdge version 0.13.4 on Windows 10 amd64. The wasm file is compiled from the C file using clang.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `A difference was found in the printing time of a file?` created by `Userzxcvbvnm`, stating `The uploaded test case \"time.wasm\" demonstrated a discrepancy between Wasmedge and other WebAssembly runtimes (e.g., wasmtime, wasmer) as well as native code. The expected and actual results differ in file size, permissions, and time-related attributes. The specifics can be found in \"time-c.txt\" and \"time-wasm.txt.\" The question at hand is whether there are any differences in the file time design of WasmEdge. Specific details include: - Expected result (natively, wasmtime, wasmer):   - File Size: 0 bytes   - File Permissions: 0   - File Owner ID: 0   - File Group ID: 0   - Last Access Time: 1700705140   - Last Modification Time: 1700483370   - Last Status Change Time: 1700483370 - Actual result (WasmEdge):   - File Size: 0 bytes   - File Permissions: 777   - File Owner ID: 0   - File Group ID: 0   - Last Access Time: 10290639077   - Last Modification Time: 10290417962   - Last Status Change Time: 10290417962 Environment: - WasmEdge 0.13.4 - Windows 10 - amd64`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Maybe a failing creating directory bug?` created by `Userzxcvbvnm`, stating `Fail to create a directory. Successfully get the file fd, but encounter an error creating the new directory. To reproduce, use the command 'wasmedge --dir=./Data createdir.wasm' and upload the test case as createdir.wasm compiled from createdir.c. WasmEdge version 0.13.4 on Windows10 amd64. Compiler flags and options provided in respective text files. Expected outcome is to successfully get the file fd and create 'newdir' under 'Data/mydir'.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-linux c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `fd_sync on base dir fails` created by `yagehu`, stating ``fd_sync` on preopened base directory returns 76 (notcapable) on Fedora 39, but returns 0 (ok) on other runtimes like WAMR and Node. I'm trying to figure out if it's possible to customize the capability associated with the base directory, but it seems that the capability system is being scrapped completely. Reproduction steps: 1. Compile the WAT file to WASM using `wat2wasm fd_sync.wat > fd_sync.wasm`. 2. Run the binary with `wasmedge` CLI, mounting a directory: `wasmedge --dir=. fd_sync.wasm`. 3. Check the exit code using `echo $?`, which is 76. Components: CLI WasmEdge Version: 0.13.5 Operating System: Fedora 39 Hardware Architecture: amd64`?"}
{"completion":"The labels for this issue are `enhancement c-WASI-NN c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: enable ggml plugin support on Amazon Linux 2` created by `hydai`, stating `Some users encountered compatibility issues with wasmedge+ggml examples on AWS Deep Learning AMI based on Amazon Linux 2. To prevent similar issues in the future, we need a new release and building assets specifically for Amazon Linux 2. Key tasks include building WasmEdge and ggml plugin with CUDA enabled option on Amazon Linux 2, as well as supporting the remaining plugins. The Amazon Linux docker images can be accessed at the provided link for reference.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[MISC] feat: add self assessment` created by `richzw`, stating `I'm unsure about the 'Secure development practices' and 'Appendix' in the self-assessment. Please provide more information.`?"}
{"completion":"The labels for this issue are `question Cannot-Reproduce`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Infit Loop will not terminated in javascript` created by `qomosoloto`, stating `In JavaScript, an infinite loop fails to terminate despite using the `os.sleep(4000)` function, which does work to apply a time limit. The expected behavior is for the infinite loop to be terminated based on the given time limit specified using the `--time-limit` option with `wasmedge_quickjs.wasm`. The issue pertains to the constant existence of the Wasmedge process after the time limit, impacting the CLI.  Technical Details: - JavaScript code with an infinite loop and time-bound execution scenario - Using `wasmedge_quickjs.wasm` with a specified time limit - Wasmedge version 0.13.4 on Manjaro amd64 - Impact on CLI due to the process not terminating after the time limit has been reached`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64 c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `bug: compiled wasm might fall into infinite loop` created by `XinyuShe`, stating `[filea58.zip](https://github.com/WasmEdge/WasmEdge/files/13275366/filea58.zip) Current State: Image shows WasmEdge not reporting errors, possibly stuck in an infinite loop. When compiling 'filea58.wasm' to 'filea58.so', no errors are reported, but running 'wasmedge --reactor filea58.so main' stalls without memory access error. Expected State: Report \"out of memory access\" Reproduction steps: ```bash wasmedge filea21.wasm wasmedge compile filea21.wasm filea21_aot.wasm wasmedge filea21_aot.wasm main wasmtime compile -o filea21.cwasm filea21.wasm wasmtime --allow-precompiled --invoke main filea21.cwasm wasmer compile -o filea21.wasmer filea21.wasm wasmer run -i main filea21.wasmer wamrc --bounds-checks=1 -o filea21.wasm.aot filea21.wasm iwasm --heap-size=0 -f main filea21.wasm.aot ``` No response for screenshots or logs. Components: CLI Versions: WasmEdge 0.13.4, wasmtime 14.0.1, wasmer 3.3.0, wamrc 1.2.3, iwasm 1.2.3 OS: Docker 24.0.5, Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) Compiler flags and options: Not specified.`?"}
{"completion":"The labels for this issue are `bug arch-x86_64 c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `bug: compiled wasm behaves different compares with interpreter` created by `XinyuShe`, stating `The wasmerror (out of bounds memory access) does not throw an error, but executes normally and produces a result. Shrinking the randomly generated file affects the semantics and makes the issue disappear.  Current State: - Interpreter reports an error: \"out of bounds memory access\" - AOT produces specific results Expected State: Report \"out of bounds memory access\" Reproduction steps: ```bash wasmedge filea21.wasm main wasmedge compile filea21.wasm filea21_aot.wasm wasmedge filea21_aot.wasm main ``` Components: CLI WasmEdge Version: 0.13.4 Operating system: Docker version 24.0.5, Ubuntu 22.04.3 LTS, x86_64 No response for screenshots or specific logs. No response for Compiler flags and options.`?"}
{"completion":"The labels for this issue are `Improvement priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `Why do the non-SIMD files use scientific notation, while those containing SIMD do not?` created by `XinyuShe`, stating `Why does the non-SIMD file use scientific notation while the SIMD file does not? The use of scientific notation reduces precision, which may not be a good strategy and differs from the output of other wasm runtimes. The expected output for the non-SIMD file should display larger numbers. Using wasmedge version 0.13.4 in a Docker container on Ubuntu 22.04.3 LTS with a specific hardware architecture. The issue can be reproduced by outputting a larger number in the non-SIMD file.`?"}
{"completion":"The labels for this issue are `bug c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `bug: some of the 0.13.5 release assets are missed on macOS 11 platform` created by `hydai`, stating `The OpenCV library installation for related plugins on macOS 11 fails, taking a long time to rebuild and ultimately encountering an error. The 0.13.5 release workflow failed to produce the expected release assets. The specific error messages and logs are detailed in the referred workflow. The issue originates from using an unsupported macOS version, resulting in the expected behavior of Homebrew being buggy and slow. The proposed solution involves users figuring out the problem themselves and submitting a fix as a pull request, which will be reviewed but may not be accepted. The author requests not to report this issue to Homebrew's GitHub repositories or seek help through their official channels.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Implement the GC proposal` created by `q82419`, stating `WASM GC proposal for WasmEdge: - Progress on loader, validation, instantiation, execution, and JSON parsing. - Update for WasmEdge C API and refinement of designs ongoing. - Pending tasks: passing spec tests, implementation of reference count mechanism. - Implementation status: correctness of subtyping and matching, externalization and internalization. - Repository for the proposal: [WebAssembly GC](https://github.com/WebAssembly/gc)`?"}
{"completion":"The labels for this issue are `enhancement c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Prepare to deprecate manylinux2014 and use a new base OS for the general Linux release process` created by `hydai`, stating `CentOS 7 will reach EOL on June 30, 2024, so we need to switch to a new base OS for the general Linux release process. Here are the action items: - Create a new docker image to succeed manylinux2014 - Keep releasing with manylinux2014 and the new image until EOL - Update the installer once the new image is online - Ensure all build and release workflows are up to date - Deprecate manylinux2014 and related assets/workflows on June 30, 2024 Feel free to ask any questions.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `The implementation of instruction 'f64x2.mul', 'f64x2.add', 'f32x4.mul', 'f32x4.add' may have bugs` created by `XinyuShe`, stating `I generated a wasm code with an exported function called \"main\" and found that its behavior is different when using different runtimes. I also suspect bugs in the implementation of instructions 'f64x2.mul', 'f64x2.add', 'f32x4.mul', 'f32x4.add'. I've included the wasm files for each bug instruction and simplified files for the two categories of bugs. The current state includes the output of WasmEdge, Wasmtime, and Wasmer for each instruction, along with the expected state and screenshots of the analysis. - Bugs in multiplication and addition instructions are likely to be the same within each category. The execution results for the simplified files are provided. - Detailed stack information and analysis for each bug instruction is included. - Reproduction steps for executing with different wasm runtimes are documented. WasmEdge Version: 0.13.4 Operating System: Ubuntu 22.04.3 LTS Compiler flags and options: Not specified`?"}
{"completion":"The labels for this issue are `bug good first issue c-AOT fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `bug: fuzz: Different output when running the same wasm file` created by `XinyuShe`, stating `I used WASMEDGE to run a wasm binary with an exported \"main\" function. The output from WASMEDGE differs from that of other runtimes like WAMR, wasmtime, and wasmer. This might be a bug. The wasm binary is random, and there's no related source code. You can execute the provided wasm file to reproduce the issue. WasmEdge version used: 0.13.4 Operating system: Ubuntu 22.04.3 LTS, Docker version 24.0.5 Hardware architecture: x86_64 CLI is the component involved. Compiler flags and options are not provided. `?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `WIP: Added top-level read-only permission to github tokens for all workflows` created by `savi-1311`, stating `**Issue:**  #2979 **Steps taken:**  Added `permissions: read-only` to every workflow of the repository. This change won't affect existing workflow jobs as job-specific permissions are specified in the job description. It'll only ensure that new jobs created within the workflow will have read-only permission if no permissions are specified at the job-level. **Results:** Before changes, the `Token-Permissions` score was 0/10, with a warning for each workflow file. After changes, the score improved to 10/10.  See the results screenshot [here](https://github.com/WasmEdge/WasmEdge/assets/56017960/d8c8ff44-a244-4d14-b649-291ae83c5afd).`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add token permissions` created by `alabulei1`, stating `Check out docs: https://clomonitor.io/docs/topics/checks/#token-permissions-from-openssf-scorecard`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add Signed release` created by `alabulei1`, stating `Check out the documentation at https://clomonitor.io/docs/topics/checks/#signed-releases-from-openssf-scorecard.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add Self-assessment` created by `alabulei1`, stating `Check out the self-assessment topic in the docs at: https://clomonitor.io/docs/topics/checks/#self-assessment`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Get an OpenSSF Scorecard badge` created by `alabulei1`, stating `Check out the documentation at https://clomonitor.io/docs/topics/checks/#openssf-scorecard-badge.`?"}
{"completion":"The labels for this issue are `good first issue help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Get an Artifact Hub badge` created by `alabulei1`, stating `Check out the documentation at https://clomonitor.io/docs/topics/checks/#artifact-hub-badge.`?"}
{"completion":"The labels for this issue are `help wanted question`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge issues for Security Slam` created by `alabulei1`, stating `WasmEdge is taking part in the 2023 Security Slam hosted by CNCF. The CLOMONITOR report lists the issues #2970, #2971, #2974, #2975, #2976, which need help. You can find more details about the 2023 Security Slam on [this page](https://community.cncf.io/events/details/cncf-cloud-native-security-slam-presents-2023-security-slam-contributor-sign-up/). Also, WasmEdge's CLOMonitor page is located at: https://clomonitor.io/projects/cncf/wasm-edge. If you're interested in joining the Security Slam as a contributor, you can register at: https://community.cncf.io/events/details/cncf-cloud-native-security-slam-presents-2023-security-slam-contributor-sign-up/.`?"}
{"completion":"The labels for this issue are `bug good first issue Hacktoberfest priority:low c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `WASI-FS: Error read link file?` created by `orangeC23`, stating `After compiling and running 'read.wasm', I expected the result to display specific file information. However, the current output shows permission errors and bad file descriptor. The issue occurs when executing the WASI programs for 'wasmtime', 'wamr', 'wasmedge', and 'wazero'. To reproduce the issue: 1. Utilize the provided 'cfile' to create 'read.wasm'. 2. Execute 'read.wasm' using 'wasmedge --dir=./Data read.wasm'. This issue involves the interaction between WASI programs and file system access. The expected result should display the target of 'hello_softlink.txt' and file size information during program execution. Versions and environments used: - WasmEdge 0.13.4 - Ubuntu 20.04 - Hardware Architecture: x86_64`?"}
{"completion":"The labels for this issue are `bug good first issue Hacktoberfest priority:low c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `WASI-FS: Maybe create directory bug ?` created by `orangeC23`, stating `Creating a directory with wasm, but the directory state might be incorrect. Executing the code prints the directory creation message, but 'ls -al' shows a different result from the C source code setting \"0200\". Expected result after compiling and executing the C file: 'ls -al' should display the same permissions as the C source code setting \"0200\". Reproduction Steps: 1. Compile the provided C file into wasm using wasi-sdk-16.0. 2. Execute the created wasm using wasmedge --dir=./Data createdir.wasm.    - Result: The permission of Data/mydir is 0700, which is different from the expected \"0200\". Components: CLI WasmEdge Version: 0.13.4 Operating system: Ubuntu 20.04 Architecture: x86_64`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Test c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `wasm proposal memory64` created by `dannypsnl`, stating `This issue aims to address problem #2779. The main challenge is with the authentication process for API requests, specifically with handling token expiration. The proposal involves implementing a token refresh mechanism to automatically renew expired tokens, improving the overall user experience. Requested action includes updating the authentication logic and considering token expiration scenarios.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-OCR New Plugin for using Tesseract OCR within WasmEdge` created by `sarrah-basta`, stating `Introducing Wasi-OCR, a WasmEdge Plugin for Optical Character Recognition (OCR) powered by the Tesseract API. This solution allows easy integration with Tesseract, enabling text extraction from images for Document AI applications within WasmEdge. Wasi-OCR utilizes a Host Function in the WasmEdge C++ SDK, along with a Rust library crate for inputting images and extracting useful text information from the OCR engine. Tesseract, developed by Google, is an open-source OCR engine widely used for extracting text from images. It's a key component for Document AI, automating document processing tasks through machine learning and natural language processing. The file structure of Wasi-OCR includes the plugin functions, necessary modules, and the Tesseract API, which is created and destroyed during the `image_to_data` function call. To install Wasi-OCR, the Tesseract API requires the installation of two dependencies: `tesseract-ocr` and `libleptonica-dev`, which are linked via CMakeLists. When building WasmEdge with the plugin, use the `-DWASMEDGE_PLUGIN_WASI_OCR=On` flag along with the standard build process. Further build details can be found at the official WasmEdge documentation.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: The parameter setting in the C API for `WasmEdge_ModuleInstanceInitWasmEdgeProcess` is not effective.` created by `L-jasmine`, stating `Setting `WasmEdge_ModuleInstanceInitWasmEdgeProcess(NULL, 0, true);` does not enable the use of shell commands in the wasm. Currently, the exit code is -1, but the expected state is to run `wasmedge --allow-command-all cmd_test.wasm` and obtain an exit code of 0 along with the expected file outputs. The reproduction steps involve installing WasmEdge, building `wasm`, and then building `embed_c`, which results in an error when executing the `a.out` file. The system details include using WasmEdge version 0.13.4 on Ubuntu 20.04 (wsl2) with amd64 architecture and specific compiler flags and options. The error message received when running `./a.out` is \"exit code: -1\" and the error message encountered when running `wasmedge --allow-command-all cmd_test.wasm` includes \"instantiation failed: module name conflict, Code: 0x60.\"`?"}
{"completion":"The labels for this issue are `bug good first issue Hacktoberfest priority:low c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `WASI-FS: Error allocating file ?` created by `orangeC23`, stating `Using WasmEdge and another runtime to execute the same file results in different states. Current state: - File 'Data/hello.txt' is created and allocated with 0 bytes of space. - Snapshot shows a file size of 30 bytes, permissions of 0, owner UID of 0, group GID of 0, and a current offset of 0. Expected state: - Error allocating file space: Success - Snapshot shows \"Error getting file attributes: Bad file descriptor\" Reproduction steps: 1. The provided C file, 'test1.c', includes file handling functions. 2. Compile the C file into 'test1.wasm' using the wasi-sdk. 3. Execute 'test1.wasm' using WasmEdge with specified directory, leading to the current state. 4. Executing the C file directly prints the expected state. Additional technical details including WasmEdge version, operating system, and hardware architecture are provided, but there is no specific solution or request mentioned.`?"}
{"completion":"The labels for this issue are `feature c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement component-model proposal in WasmEdge` created by `dannypsnl`, stating `[Component model](https://github.com/WebAssembly/component-model/tree/main) introduces a new binary format called **component** which is crucial for the upcoming WASI preview2. This issue tracks the implementation status of the component model in WasmEdge. The progress is as follows: - parser implementation is complete (#3036) - validator implementation is pending (#3150) - executor implementation is pending (#3151) This issue is closely related to #2939. Additional details: - Versions:     - cargo 1.77.0-nightly (3e428a38a 2024-01-09)     - rustc 1.77.0-nightly (a2d9d73e6 2024-01-10)     - cargo component 0.6.0 (205c6ee97 2023-12-22) - [Test suites](https://github.com/second-state/component-model-tests) - Refers to WasmEdge issue #1892 - Replacing #1433 - Legacy loader #1735. Current syntax differs significantly from the legacy.`?"}
{"completion":"The labels for this issue are `bug priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `Data Race in libwasmedge.so - marked by TSAN` created by `khagankhan`, stating `The issue involves a data race detected in `libwasmedge.so`. It has been marked via using AFL++ and a combination of our code generator with `TSAN` enabled. The expected state is that there should not be a data race issue. Reproduction steps: 1. Build with options 'AFL_USE_TSAN=1 ...' 2. Execute with flags '`wasmedge <race.wasm> _main`' 3. Execute with inputs '<race.wasm>' 4. Get error The author has provided the `race.wat` and `race.wasm` files to reproduce the issue. They have mentioned that they have tried to contribute to the `WasmEdge` community and have added the `race.wat` code that made the `TSAN` mark the data race. Components: CLI WasmEdge Version or Commit used: version 0.13.4-86-gdd276ee7 Operating system: Ubuntu 22.04.3 LTS Hardware Architecture: Linux node1.khan22-169985.randtest.emulab.net 5.15.0-56-generic #62-Ubuntu SMP Tue Nov 22 19:54:14 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux The issue was found using a combination of AFL++ and Wasmlike, an Xsmith-based random program generator. The author has provided the Xsmith Project link for reference.`?"}
{"completion":"The labels for this issue are `enhancement c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `WASI preview2 proposals tracking issue` created by `hydai`, stating `This issue is to implement and verify native support for WASI preview2 in WasmEdge. The following WASI proposals need to be included: - WASI-IO, including WASI-POLL - WASI-SOCKETS - WASI-CLOCK - WASI-HTTP - WASI-RANDOM - WASI-FILESYSTEM - WASI-NN (already done) To address current plugin limitations, all proposals, except for WASI-NN, will be merged into WasmEdge Core. Progress and details for each proposal are being tracked, and a GitHub Project Board will replace the provided information. Key Action Items: - Implement and verify native support for all listed WASI preview2 proposals - Merge proposals, except for WASI-NN, into WasmEdge Core to overcome current plugin limitations References: - WASI proposals: [WASI Proposals](https://github.com/WebAssembly/WASI/blob/main/Proposals.md) - GitHub Project Board: [WasmEdge Project Board](https://github.com/orgs/WasmEdge/projects/6)`?"}
{"completion":"The labels for this issue are `enhancement priority:medium c-Internal c-CAPI c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: allow redirect of stdin, stdout, and stderr in C SDK` created by `hydai`, stating `For certain use cases, we need to allow developers to redirect STDIN, STDOUT, and STDERR to different file descriptors (FDs) than the default ones (0, 1, 2). To achieve this, we propose extending the WASI-related API, particularly the `init` function, with three additional parameters representing the FDs for STDIN, STDOUT, and STDERR. We can refer to nodejs for some implementation ideas: https://github.com/nodejs/node/pull/33544/files`?"}
{"completion":"The labels for this issue are `bug priority:medium c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `bug: report export error if the memory is not exported when running a WASI program.` created by `luxinyi0105`, stating `While testing wasm files with various runtime tools like wasmedge, wasmer, wasmtime, wasmi, and wasm-micro-runtime, discrepancies in the execution results were observed. The testcase involved mutating a wasm file generated from a C program compiled with Emscripten. The mutation process involved specific changes to the wat file resulting in a mutated wasm file. Executing the mutated file with wasmedge yielded a checksum result as expected. However, when using other runtime tools like wasmer, wasmtime, wasmi, and wasm-micro-runtime, runtime errors related to export problems were encountered, as displayed in the provided image. It seems that wasmedge's execution of wasm files might have issues with export functions. Reproduction steps are available in the \"Current State\" and \"Expected State\" sections. The system environment details include Ubuntu 22.04 on x86_64 architecture with C++ Compiler version 11.4.0 and CMake version 3.22.1 with default flags. The author's request is to confirm if there are issues with wasmedge when executing wasm files containing export function problems.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Missing doc for compile wat to wasm in the Android APK example with embedded wasmedge on 0.13.x` created by `picolov`, stating `In version 0.13.4, following the documentation, I was able to build the APK, but encountered an immediate closure when trying to run it. The error log indicated a java.io.FileNotFoundException for fibonacci.wasm, which was removed in version >= 0.13.0. After adding fibonacci.wasm, the APK was able to run. It would be helpful to add a step in the documentation to compile the fibonacci.wat to wasm first. I am curious to know why the pre-compiled artifact was removed. Could using a pre-compiled one rather than a manual per-user compile cause issues?`?"}
{"completion":"The labels for this issue are `bug good first issue Hacktoberfest platform-windows arch-x86_64 c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `bug: File read_to_string, read_to_end does not work on Windows` created by `robrennie`, stating `The Rust \"Access OS services\" sample encounters an issue on Windows, where the \"read_to_string\" function returns the error \"Function not implemented (os error 52)\". The author runs the sample instructions on Windows Server 2022 with WasmEdge Version 0.13.4 and a x64-based processor. They seek guidance or a potential fix for this problem.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-NN GGML backend release plan` created by `hydai`, stating `The WasmEdge WASI-NN plugin needs support for various platforms. For Linux, we aim to support Ubuntu 20.04 with x86_64 and aarch64 architectures, CentOS 7 (manylinux2014) with x86_64 and aarch64 architectures, and macOS with Intel and Apple silicon models. Windows platform is not planned for support, and users are suggested to use WSL if needed. Contributors for Windows platform are welcome to comment. For macOS, Metal is disabled on Intel models due to issues with llama.cpp, as referenced in the provided link. In terms of Linux, we will enable AVX and AVX2 by default for performance acceleration. OpenBLAS on CentOS 7 will be disabled due to encountered building issues. Users are encouraged to build the WASI-NN GGML plugin themselves if their hardware lacks AVX and AVX2 support. If anyone can confirm OpenBLAS functionality on CentOS 7, please inform us. We invite contributors to comment if they can help with Windows support and to address issues with OpenBLAS on CentOS 7.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI c-CMake`.","prompt":"Can you assign labels to the GitHub issue titled `Feature FFmpeg plugin` created by `Hrushi20`, stating `This PR aims to integrate FFmpeg functionality into WasmEdge using a C++ plugin, enhancing the capabilities of Wasm applications. The [WasmEdge Rust SDK](https://github.com/Hrushi20/rust-ffmpeg) is used for this purpose. The proposal outlines the technical implementation and benefits of incorporating FFmpeg into WasmEdge and suggests using the C++ plugin for providing the functionality. This integration offers an actionable solution for enhancing Wasm applications with audio and video processing capabilities, thereby expanding the potential use cases for WasmEdge.`?"}
{"completion":"The labels for this issue are `bug c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `bug: AOT mode get different result from interpreter mode while executing the same testcase` created by `luxinyi0105`, stating `While testing a wasm file with AOT and interpreter modes, different results are observed in Wasmer's execution. The wasm file, obtained from a C program compiled using Emscripten, was mutated to change certain instructions. When using AOT mode with Wasmedge for the mutated file, the output is empty, whereas other runtime tools output long garbled code and an \"out of bounds table access\" error. Executing the same testcase using Wasmedge's interpreter mode yields the same result as Wasmer and Wasmtime. This suggests a potential issue specific to Wasmedge's AOT mode. Notably, using a different file name for the AOT compiled file can result in consistent results with the interpreter mode.  Reproduction steps and system details: - WasmEdge Version: 0.13.4 - OS: Ubuntu 22.04 - Architecture: x86_64 - Compiler: C++ 11.4.0, CMake 3.22.1 The author speculates that the inconsistency in results based on file names might be related to previous issues #2733 and #2881. Further investigation is needed to identify and address the root cause.`?"}
{"completion":"The labels for this issue are `bug Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Incorrect behavior when pointer length out of bounds` created by `luxinyi0105`, stating `While testing a mutated wasm file with pointer issues using WasmEdge, I observed unexpected behavior. The test case involved mutating a wasm file generated from a C program using Emscripten Compiler. After mutation, the wasm file's execution resulted in no output, contrary to the expected behavior. When using other runtime tools like wasmtime, a runtime error due to a pointer out of bounds was reported, along with specific execution results. In this instance, the pointer length was 952683808, which was deemed out of bounds, leading to the emission of \"wasm traps\" by wasmtime. I suspect that WasmEdge returns `ERRNO_FAULT` instead of `wasm traps`, resulting in the observed behavior of no output. I propose that printing runtime errors directly on the Linux shell could facilitate quicker problem localization in wasm files. The environment used for testing included WasmEdge 0.13.4 on Ubuntu 22.04 with x86_64 architecture. I utilized default CMake flags during compilation.`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `bug: the test case should trigger `misaligned pointer` error, but it returns OOB now` created by `luxinyi0105`, stating `While testing a mutated wasm file with different runtime tools, including wasmedge, wasmer, wasmtime, wasmi, and wasm-micro-runtime, discrepancies in the results were observed. Notably, when compiling and executing the mutated file with wasmedge, an out-of-bounds memory access error occurred, while using other tools resulted in various runtime errors or hanging. Additionally, the choice of filename during the AOT compilation process seemed to affect the outcome, raising uncertainties about the correctness of the out-of-bounds error encountered with wasmedge. The author also highlighted previous cases where wasmedge exhibited differing behaviors, emphasizing the need to confirm the specifics of the current issue. The author provided reproduction steps along with details of the components and environment used. The issue occurred with WasmEdge version 0.13.4 on Ubuntu 22.04, x64_64 architecture, and C++ Compiler version 11.4.0 with default CMake flags. The author seeks confirmation and insights into the encountered out-of-bounds error, expressing gratitude for any assistance.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Decoupled plugin register flow` created by `CaptainVincent`, stating `Fix the use case where the main program statically links to `wasmedge.a` but still needs to load plugins from `.so`. Test the solution at https://github.com/CaptainVincent/runwasi/actions/runs/6305204425/job/17118150750. Refer to the class diagram [here](https://hackmd.io/_uploads/ByzGt8rJT.jpg) and the memory layout [here](https://hackmd.io/_uploads/BJVMYIrkT.jpg).`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] WASI Random Plugin` created by `LFsWang`, stating `Implement WASI Random Plugin and mark the following progress: - \"random\" - \"insecure\" - \"insecure-seed\" Ensure support for: - Linux - MacOS - Windows`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The outputs of Wasmedge are different from other runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported function \"main\" and compared WasmEdge outputs with other runtimes.  WasmEdge outputs: - -----------------wasmedge-----------------   667210185936411072606488982786049365 (repeated multiple times) Other runtimes like wasmtime and wasmer outputs: - -----------------wasmtime-----------------   Warning for using '--invoke' with a function that returns values   667210185897120983469013534608098645 (repeated multiple times) - -----------------wasmer-----------------   667210185897120983469013534608098645 (repeated multiple times)`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The outputs of Wasmedge are different from other runtimes.` created by `abc767234318`, stating `Description I created a WebAssembly (wasm) binary with an exported function named \"main\" and compared its outputs in WasmEdge, wasmtime, and wasmer runtimes.  Output Comparison - WasmEdge outputs: ``` 4294907647 (repeated 7 times) ``` - Other runtimes' outputs: ``` wasmtime: warning: using `--invoke` with a function that returns values is experimental and may break in the future 4290778624 (repeated 7 times) wasmer: 4290778624 (repeated 7 times) ``` Requested Action I need to understand the discrepancy in outputs between WasmEdge and other runtimes, wasmtime and wasmer. Any insights or potential solutions would be appreciated.  [file65.zip](https://github.com/WasmEdge/WasmEdge/files/12643060/file65.zip)`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The outputs of Wasmedge are different from other runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported function \"main\" and compared the outputs of WasmEdge with other runtimes. You can find the wasm binary here: [file3.zip](https://github.com/WasmEdge/WasmEdge/files/12642985/file3.zip) The outputs of WasmEdge are: ``` -----------------wasmedge----------------- 340282366841710300930663525760219742206 (repeated 8 times) ``` While the outputs of other runtimes like wasmtime and wasmer are: ``` -----------------wasmtime----------------- warning: using `--invoke` with a function that returns values is experimental and may break in the future 340240828546070184842344111661320765439 (repeated 8 times) -----------------wasmer----------------- 340240828546070184842344111661320765439 (repeated 8 times) ``` `?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: Wasmedge had an error executing this wasm binary, but not in other runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported function called \"main\" and compared the outputs of WasmEdge with other runtimes like wasmtime and wasmer.  The WasmEdge outputs showed an error related to out of bounds memory access when executing the \"main\" function.  On the other hand, the outputs of wasmtime and wasmer displayed the value \"345815071808\" repeatedly. Attached the file for reference: [file65.zip](https://github.com/WasmEdge/WasmEdge/files/12642912/file65.zip)`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The outputs of Wasmedge are different from other runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported \"main\" function and compared its outputs in WasmEdge, wasmtime, and wasmer runtimes. The WasmEdge outputs were consistent: 1208925819614629174706175 1208925819614629174706175 1208925819614629174706175 245839276 1208925819614629174706175 1208925819614629174706175 However, the outputs from wasmtime and wasmer differed slightly from WasmEdge: wasmtime: warning: using `--invoke` with a function that returns values is experimental and may break in the future 1208925801600234955997184 1208925801600234955997184 1208925801600234955997184 245839276 1208925801600234955997184 1208925801600234955997184 wasmer: 1208925801600234955997184 1208925801600234955997184 1208925801600234955997184 245839276 1208925801600234955997184 1208925801600234955997184 This difference needs attention as it's important for consistent outputs across different runtimes.`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The outputs of Wasmedge are different from other runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported function called \"main\" and compared the outputs of WasmEdge with other runtimes. The outputs of WasmEdge are all 0, while the outputs of other runtimes like wasmtime and wasmer are 4557430888798830399.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Mentorship (Sept-Nov, 2023): CNCF - WasmEdge: Support AOT mode in proxy-wasm` created by `Shivkant-Chauhan`, stating `WasmEdge aims to enable AOT mode support for proxy-wasm. To achieve this, the following goals have been outlined: - Update Bazel file to incorporate LLVM dependency. - Modify the code to run WASM in AOT mode. - Add documentation of proxy-wasm in the WasmEdge repo. The plan, scheduled after 14th Sept, involves: - Weeks 1-2: Get familiar with proxy-wasm-cpp-host and other webassembly runtimes. - Weeks 3-5: Experiment with Bazel config files and document implementation approaches for approval. - Weeks 6-9: Implement AOT support for proxy-wasm-cpp-host, including necessary Bazel file changes for LLVM dependencies. - Week 10: Document proxy-wasm in WasmEdge repo.`?"}
{"completion":"The labels for this issue are `priority:high c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `CI: Use `fedora:rawhide` and `debian:testing` for the building process` created by `hydai`, stating `See issue #2802 for context. WasmEdge encounters issues when applying new compiler versions or upstream dependencies, requiring a corresponding CI workflow for validation on these environments. Create a workflow for testing on Fedora Rawhide and Debian Testing.`?"}
{"completion":"The labels for this issue are `bug c-Plugin dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `llama.cpp fails to build with g++ 13` created by `paravoid`, stating `Building WasmEdge 0.13.4 on Debian unstable with gcc/g++ 13 results in a build failure. The issue can be resolved by backporting the `push_back` -> `emplace_back` changes from upstream llama-cpp. However, it's unclear how to update llama.cpp to newer versions or backport upstream fixes without causing further issues. The following environment details are provided: Hardware Architecture: x86\\_64, C++ Compiler version: gcc version 13.2.0 (Debian 13.2.0-3), CMake version: cmake version 3.27.4, CMake flags: -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_PLUGINS=OFF. Additionally, there are two separate concerns: 1. The necessity of building ggml/llama with plugins turned off. 2. The need to adjust CI to try builds with a newer compiler version due to previous build failures. These issues need attention to ensure a successful build.`?"}
{"completion":"The labels for this issue are `bug c-WASI-Crypto`.","prompt":"Can you assign labels to the GitHub issue titled `wasi-crypto `secretkey_export` on rsa with `ENCODING_PKCS8` get pkcs1 encoded` created by `Puellaquae`, stating `This issue is related to a problem where `secretkey_export` on RSA with `ENCODING_PKCS8` results in PKCS1 encoding instead. I expect the output to be correctly encoded as PKCS8. The environment details and steps to reproduce can be found below. Environment: - Hardware Architecture: (e.g. x86\\_64 or aarch64) - Operating system: (e.g. Ubuntu 20.04 or CentOS 7.6) - Optional if built from source:   - C++ Compiler version:   - CMake version:   - CMake flags: (e.g. `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON`) Steps to Reproduce: Using the wasi binding from the provided GitHub link leads to the issue. An example Rust code snippet is provided to demonstrate the problem.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge FFmpeg Queries` created by `Hrushi20`, stating `I'm designing an FFMpeg plugin in C++ to handle more than 50 structs and integrating it with Rust. I'm considering using a `vector<void*> ffmpegLinearMemory` to store all the FFMpeg structs in the plugin. I've implemented a basic memory management system in C++ with three functions: alloc, dealloc, and fetchData. Any other suggestions?`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement wasm proposal: Memory64` created by `dannypsnl`, stating `Motivation: To support the Memory64 proposal, which is a phase 3 proposal. Key Details: - Changes in encoding to have more entries, including u64 entries - Extension of memory type for new limits encoding and 64-bit vectors - Memory instructions using the index type instead of i32 - Behavior change in `memory.grow` depending on the index type - Requirement for bounds checking to be the same as for 32-bit memories - Emphasis on validating instructions Appendix: - Reference to Memory64 proposal: [Memory64 Proposal](https://github.com/WebAssembly/memory64/blob/main/proposals/memory64/Overview.md)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: FFMpeg Plugin for WasmEdge along with Rust SDK` created by `Hrushi20`, stating `FFmpeg is essential in machine learning for media processing. To improve its performance with WasmEdge, I plan to integrate FFmpeg functionalities into WasmEdge plugins. The goals are to support FFmpeg libraries in WasmEdge, provide a Rust SDK for Wasm programs to access FFmpeg functions, and refactor the mediapipe-rs project to use the FFmpeg plugin. The Rust SDK, WasmEdgeFFmpeg, will resemble ffmpeg-rs. Key milestones include integrating various FFmpeg libraries into the plugin, with each integration set for specific weeks. The final steps involve writing documentation and tutorials, as well as polishing the project. Relevant Links: - [FFmpeg Plugin for WasmEdge](https://github.com/WasmEdge/WasmEdge/issues/2689) - Repository:    - https://github.com/Hrushi20/WasmEdge/tree/feature-ffmpeg-plugin   - https://github.com/Hrushi20/rust-ffmpeg`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: A Rust crate for the YOLO family of object detection models` created by `Charles-Schleich`, stating `YOLO models for object detection in Python have drawbacks for production use due to dependencies like OpenCV, TensorFlow, and PyTorch, and the need for Nvidia Container Toolkit for Dockerization, making it unfeasible for embedded devices and micro-controllers. WasmEdge with WASI-NN plugins can offer a Rust + Wasm alternative for AI applications, but it lacks some Python equivalent functions for pre and post processing required for YOLO models. The goal is to add these functions to opencvmini and media-pipe crates, and create a high-level YOLO SDK in Rust for WasmEdge to perform inference on image and video data. The design of the YOLO SDK will be similar to the media-pipe crate. Milestones include evaluating necessary functions, adding Rust equivalent functions, and supporting video file processing. Additionally, examples, documentation, and performance improvements are planned, with eventual repo transfer and library publication. An example repository for object detection in YOLO using Python OpenCV is provided for reference.`?"}
{"completion":"The labels for this issue are `bug c-AOT fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: The result is different from other wasm runtimes while executing the given wasm file` created by `luxinyi0105`, stating `While running a specific testcase using WasmEdge and other runtime tools, differing results were observed. When executing the testcase with WasmEdge, a checksum result is obtained, whereas using runtime tools like wasmer, wasmtime, and wasmi causes runtime exceptions due to \"out of bounds memory access.\" This inconsistency suggests potential incorrect exception handling in WasmEdge, leading to varying execution outcomes compared to other runtimes. The environment comprises an x86_64 architecture running Ubuntu 22.04 and wasmedge 0.13.3. The testcase involved mutation of a wasm file obtained from the compilation of a C program using Emscripten Compiler. The mutation altered the `local.set 1271` in line 5694 to `i32.load`, resulting in the creation of `mutated_file.wasm`. The issue seeks to address the observed runtime discrepancies and potential incorrect exception handling in WasmEdge, affecting test results when compared to other runtime tools.`?"}
{"completion":"The labels for this issue are `priority:low c-Interpreter`.","prompt":"Can you assign labels to the GitHub issue titled `Interpreter mode may have a performance issue which is slower than other runtimes` created by `abc767234318`, stating `I've created a WebAssembly binary without WASI functions and tested it with multiple runtimes. When using Wasmedge, it runs much slower than other runtimes like wasmtime and wasmer. The error I encountered with Wasmedge indicated an out of bounds memory access during execution of the \"main\" function. Commands used: - `time wasmedge --reactor file4.wasm main` - `time wasmtime run file4.wasm --invoke main` - `time wasmer run file4.wasm -i main` - `time iwasm --heap-size=0 -f main file4.wasm` - `time wasmi_cli file4.wasm --invoke main` I'm running this on an x86_64 Ubuntu 20.04 system. Any assistance in identifying the performance issue with Wasmedge or optimizing the WebAssembly binary for better compatibility would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `question platform-linux`.","prompt":"Can you assign labels to the GitHub issue titled `Abortion report on the instruction `memory.grow`` created by `erxiaozhou`, stating `Description: When running the code, I encountered an exception related to the WasmEdge project, indicating an assertion failure in the allocator. The expected behavior should have no exceptions. Environment: - Hardware Architecture: amd64 - Operating system: Ubuntu 20.04 - Compile with commit ID e4196d34b1b6b2e70e4a5bd9fe84e6936e11fc85 - Compilation command: ```shell export CC=/usr/bin/clang-14 export CXX=/usr/bin/clang++-14 rm -rf build; mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_AOT_RUNTIME=OFF ..; make -j40; cd .. ``` Steps to Reproduce: - Test case: [memory.grow_WasmEdge_aboriton.zip](https://github.com/WasmEdge/WasmEdge/files/12366351/memory.grow_WasmEdge_aboriton.zip) - Command: ```shell wasmedge/wasmedge --reactor <test case> to_test ````?"}
{"completion":"The labels for this issue are `c-WASI-NN c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Create a universal WASI-NN plugin in the release workflow` created by `hydai`, stating `The current release workflow offers separate WASI-NN backends as standalone plugins for different frameworks like PyTorch, TensorflowLite, and OpenVINO. However, there's a need for a universal plugin that combines all available backends to accommodate diverse use cases.`?"}
{"completion":"The labels for this issue are `bug help wanted question priority:low fuzz-different-behavior`.","prompt":"Can you assign labels to the GitHub issue titled `fuzz: Do not terminate while executing the given testcase` created by `luxinyi0105`, stating `While running the provided Wasm test case, WasmEdge hangs and does not terminate. I also tested the test case with Wasmer, Wasmtime, and Wasmi. Wasmer terminates abnormally due to a \"misaligned pointer,\" while Wasmtime and Wasmi run normally but do not produce any output. I'm uncertain about the expected result due to my limited understanding of WebAssembly. This situation is similar to issues #2710 and #2724. I have tried both the default interpreter mode and the ahead-of-time mode. Even after running the AOT mode for about two hours, it still did not terminate. I suspect a potential issue with my approach to using AOT mode. Confirmation and assistance with this matter are appreciated. Thank you! [Provided Image:  ![image](https://github.com/WasmEdge/WasmEdge/assets/92167273/1bc32d77-1087-4898-9b93-39990eed57c1)]`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI breaking changes`.","prompt":"Can you assign labels to the GitHub issue titled `The results of execution for a wasm binary are different from other wasm runtimes.` created by `abc767234318`, stating `I created a wasm binary with an exported function called \"main\" and compared the outputs of WasmEdge with other runtimes using the command `wasmedge --reactor file4.wasm main`. WasmEdge outputs unsigned integers, while other runtimes like wasmtime and wasmer return signed integers. I'm questioning whether WasmEdge should return a 32-bit signed integer instead of an unsigned one.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Support for host functions to directly access the host data of their own module instance.` created by `L-jasmine`, stating `WasmEdge_ModuleInstanceGetHostData isn't correctly referencing the module instance in host functions. It retrieves host data within a module instance, but the instance in the host function parameters is not the intended one. This causes inconsistency and hinders accurate data retrieval. We need to address this discrepancy to ensure the correct association between the host function parameters and the module instance. This issue pertains to the proper linkage of the host function parameters and the related module instance.`?"}
{"completion":"The labels for this issue are `c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `[Do not merge][Preview] This is a preview version of WasmEdge coroutine.` created by `hydai`, stating `\"The API might change if there are any updates to the design decisions.\"`?"}
{"completion":"The labels for this issue are `bug c-Test platform-iOS`.","prompt":"Can you assign labels to the GitHub issue titled `Target 'wasmedgeHostModuleWasi' build failed with Xcode generator` created by `hangedfish`, stating `The target build 'wasmedgeHostModuleWasi' failed with the Xcode generator. I expected a successful build on macOS 13, aarch64. Repro steps: ```bash % cmake -S. -B_builds -GXcode -DWASMEDGE_BUILD_AOT_RUNTIME=OFF -DWASMEDGE_BUILD_STATIC_LIB=ON % cmake --build _builds --config Release --target wasmedge_shared ``` Resulted in errors: ``` /Users/gao/WorkSpace/WasmEdge/lib/host/wasi/macos.h:263:26: error: implicit conversion loses integer       precision: 'std::chrono::duration<long long, std::ratio<1, 1000000>>::rep' (aka 'long long') to       '__darwin_suseconds_t' (aka 'int') [-Werror,-Wshorten-64-to-32] /Users/gao/WorkSpace/WasmEdge/lib/host/wasi/macos.h:271:66: error: implicit conversion loses integer       precision: 'std::chrono::duration<long long, std::ratio<1, 1000000>>::rep' (aka 'long long') to       '__darwin_suseconds_t' (aka 'int') [-Werror,-Wshorten-64-to-32] ``` Resolution: Add `-Wno-shorten-64-to-32` flag to the target `wasmedgeHostModuleWasi` in `lib/host/wasi/CMakeLists.txt` when using the Xcode generator.`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `bug: when encounter `misaligned pointers`, WasmEdge should trap` created by `luxinyi0105`, stating `WasmEdge is not compliant with the witx spec when running a specific test case. The test case involves mutating a wasm file that was generated from a C program using Emscripten compiler. The specific mutation operation changes a subtraction of the stack pointer into a division, leading to corruption of the wasm module's in-memory shadow-stack pointer and causing the stack to be misaligned. Despite the witx spec stating that misaligned pointers should trigger a trap, WasmEdge is not returning a trap and instead outputs a checksum result without any abnormal behavior. Key Technical Details: - Test case involves mutating a wasm file obtained from a C program using Emscripten compiler - Specific mutation operation changes a subtraction into a division - This corruption causes misalignment of the stack, which violates the witx spec - Expected behavior: WasmEdge should return a trap, as per the witx spec Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 22.04 - Tools Version: wasmedge 0.13.2 Proposed Solution: - WasmEdge needs to return a trap when encountering misaligned pointers, as specified in the witx spec.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LFX Create a Rust crate for YOLO model` created by `juntao`, stating `WasmEdge is ideal for AI applications with WASI-NN plugins. However, the focus is not just on the model but also on pre-processing data into TFLite/PyTorch formats and post-processing the results. They aim to create a Rust SDK supporting YOLO models, requiring OpenCV, Rust, Tensorflow/Pytorch, and WebAssembly skills. They seek support for both image and video inputs with examples and documentation. The author has specified pre-tests to be completed before applying, and provides relevant links for further understanding. Please complete pre-tests #2692 and #2702, then apply at the provided link. The deadline for valid submissions is Aug 27, 5:00 PM PDT.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LFX create a ffmpeg plugin` created by `juntao`, stating `The project aims to optimize the mediapipe-rs SDK by introducing a WasmEdge plugin for ffmpeg, enabling Wasm applications to directly use native ffmpeg functions. The expected deliverables include the WasmEdge ffmpeg plugin and a Rust SDK for Wasm programs to access its functions. The plan also involves refactoring the mediapipe-rs project to use the ffmpeg plugin. There is an emphasis on covering at least 80% of all ffmpeg functions, along with comprehensive unit tests and documentation.  Applicants are requested to complete two pre-tests and then apply for the project on LFX mentorship. The deadline for valid submissions is Aug 27, 5:00 PM PDT. All details and resources for the project can be found on the LFX mentorship page.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LFX Support AOT mode in proxy-wasm` created by `q82419`, stating `WasmEdge needs support for proxy-wasm in AOT mode. The goal is to have mentees help complete the AOT mode in the proxy-wasm proposal, and create documentation for running with proxy-wasm. Expected outcome: - Modify the bazel file to add the LLVM dependency. - Update the code to support running WASM in AOT mode. - Add documentation of proxy-wasm in the WasmEdge docs repository. Recommended skills: C/C++, WebAssembly, and experience with the bazel build system. Apply for the mentorship here: [Mentorship Application](https://mentorship.lfx.linuxfoundation.org/project/3ee046ab-29d9-4e5c-bb7a-4564bd4e2765) Pre-test discussion is available here: [Pre-test Discussion](https://github.com/WasmEdge/WasmEdge/discussions/2697)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LFX add matrix operations for opencvmini` created by `dannypsnl`, stating `WasmEdge aims to enhance its capabilities by integrating the OpenCVMini plugin to provide extended OpenCV functionalities in the WebAssembly runtime environment. The expected outcomes include defining new interfaces for the plugin, designing unit tests, enabling CI testing and packaging, and creating documentation on building and using the plugin. The recommended skills for this project include C/C++, OpenCV, Rust, and WebAssembly, with a low possibility of needing Haskell. Pre-test submission is required for participation, and the application link is provided for interested individuals. Key technical specifics are directly linked to OpenCV documentation for image filtering, drawing, feature detection, and related `cv::Mat` member functions.`?"}
{"completion":"The labels for this issue are `question c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `How to enable multiple backends in the WASI-NN plugin` created by `17862687921`, stating `In the release [0.13.1](https://github.com/wasmedge/wasmedge/releases/tag/0.13.1), the 'wasi-nn-pytorch', 'wasi-nn-tensorflowlite', and 'wasi-nn-openvino' files are all 'libwasmedgepluginwasinn.so'. I suggest Wasmedge to only support one of these functions at a time, rather than having all three simultaneously. If supporting both is possible, we need guidance on how to handle it. Thank you.`?"}
{"completion":"The labels for this issue are `good first issue help wanted platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] update community package on winget` created by `hydai`, stating `Several external contributors previously added WasmEdge to Winget packages up to version 0.10.0. We need to update the package again. Here's what needs to be done: 1. Figure out how to submit/update packages on the winget repo. 2. Submit a PR to provide the latest release on the winget repo. Check the [WasmEdge on winget](https://github.com/microsoft/winget-pkgs/tree/master/manifests/w/WasmEdge/WasmEdge) for reference.`?"}
{"completion":"The labels for this issue are `good first issue help wanted c-WASI-Crypto`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-Crypto] Implement remaining functions` created by `hydai`, stating `WasmEdge has some of the WASI-Crypto functions partially implemented. However, certain functions still show the 'NOT_IMPLEMENTED' status. This PR aims to track those functions. To identify the unimplemented functions, use the command: `grep \"WasiCryptoUnexpect(__WASI_CRYPTO_ERRNO_NOT_IMPLEMENTED);\"`. You can find more details and guidelines in the provided links.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `How to use GPU with wasi-nn-pytorch?` created by `17862687921`, stating `The wasi-nn-pytorch library has been updated to support GPU, and I'm looking for a testing example related to GPU for validation and learning purposes. Any assistance with providing a GPU-related testing example would be appreciated.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled ``Packit` enablement for Fedora and EPEL rpm builds` created by `lsm5`, stating `This issue aims to address the broken compatibility of WasmEdge on Fedora rawhide by implementing features to support Fedora integration. The proposed solution involves using Packit to automate RPM builds on active Fedora and EPEL/CentOS Stream versions, as well as streamline Fedora packaging tasks for every upstream release. This would entail adding a Packit configuration file and a Fedora spec file upstream, which would be automatically synchronized with the downstream spec file on each release through a manual review and merge process. The Packit service handles builds and updates automatically, similar to the syncing process of the rpm spec file showcased in the sample pull request. The specific request is for review and input on this proposal from relevant team members.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI]: Unify the write and the read function.` created by `MediosZ`, stating `This PR aims to combine the read and write functions to resolve the issue of endless epoll triggers. The current implementation causes epoll to be triggered incessantly.`?"}
{"completion":"The labels for this issue are `question c-Container`.","prompt":"Can you assign labels to the GitHub issue titled `Exec format error when I use kubeedge to create pod ` created by `wangqianyv123`, stating `I'm encountering an error when trying to run a WASM module using kubectl and ctr commands. The kubectl command results in an \"Exec format error,\" while the ctr command gives a random number and bytes instead of the expected output. The system environments and crun version are also provided. Specifically, I'm looking for assistance in resolving the \"Exec format error\" and obtaining the correct output from the ctr command.`?"}
{"completion":"The labels for this issue are `bug help wanted platform-macos arch-arm64 binding-go`.","prompt":"Can you assign labels to the GitHub issue titled `Installation on M1 with MacOS 14` created by `ctzurcanu`, stating `I'm encountering an issue when running 'go test' with the error: \"Library not loaded: @rpath/libwasmedge.0.dylib.\" The reason given is \"no LC_RPATH's found.\" I expect the test to run successfully.  Environment: - Hardware Architecture: aarch64 - Operating system: macOS 14 Steps to Reproduce: - Installed: latest Xcode-beta 15.0 beta 2, go lang version 1.20.5.darwin-amd64 - Ran 'curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -v 0.11.2' - Also ran 'source .../.zprofile'`?"}
{"completion":"The labels for this issue are `help wanted priority:low platform-android c-AOT platform-iOS`.","prompt":"Can you assign labels to the GitHub issue titled `AOT feature support iOS/android make Wasm as universal binary` created by `soplwang`, stating `We're facing the challenge of managing multiple platform and architecture configurations for Deno, Node.js, and React Native native modules, which is overwhelming. We believe that using Wasm (with AOT) could be a universal distribution solution, but WasmEdge currently doesn't support it on iOS and Android. The problem is that iOS and Android disable writable and executable memory for security reasons, which conflicts with WasmEdge's AOT loader implementation. Our proposal is for WasmEdge to perform AOT compilation of Wasm bytecodes to native static libs and default static link to WasmEdge's WASI runtime. This would address the issues we're facing with platform and architecture configurations.`?"}
{"completion":"The labels for this issue are `c-CAPI c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `C API: Memory manipulation` created by `aghinsa`, stating `Adds support for using exported malloc and free functions.`?"}
{"completion":"The labels for this issue are `c-Test c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Add TCP_NODELAY socket option` created by `Pryz`, stating `While working with network libraries in Python, we observed that TCP_NODELAY is enabled by default on sockets since Python 3.6. To address this, the proposed PR introduces the IPPROTO_TCP option level and the TCP_NODELAY socket option. I included the TCP_NODELAY option in the `__wasi_sock_opt_so_t` enum for usage in `sockSetOpt` and `sockGetOpt`. However, there's a consideration regarding separating these functions. Regarding the usage of value for `__WASI_SOCK_OPT_LEVEL_IPPROTO_TCP`, I used 1, but on the Linux side, the level value is 6. Should we align these values? Feedback on the proposed change and implementation is welcomed. Please share any interest or feedback regarding this modification.`?"}
{"completion":"The labels for this issue are `enhancement help wanted binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `[Feature] [binding-java] Publish java to maven repository` created by `liangyuanpeng`, stating `To make it easier for users to use WasmEdge, I believe it should be included as part of the Java roadmap. I propose this for consideration.`?"}
{"completion":"The labels for this issue are `documentation c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Remove Unnecessary Docs and Reorganised Others` created by `adithyaakrishna`, stating `**Description:** This PR cleans up unnecessary docs from the books site and reorganizes other docs. The aim is to streamline the documentation and improve its organization.`?"}
{"completion":"The labels for this issue are `help wanted platform-linux c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `Use manylinux_2_28 instead of Ubuntu in the release workflow` created by `hydai`, stating `Due to the `cxx11abi` issue in the WASI-NN PyTorch plugin, we are currently facing the need to release assets for multiple Linux distributions, leading to user confusion while downloading from the release pages. To address this, we are considering adopting the next generation of manylinux, specifically `manylinux_2_28`, as a possible solution to replace the Ubuntu 20.04 release workflow. Additionally, we need to ensure the functionality of other plugins. Here's the link to `manylinux_2_28`: [manylinux_2_28](https://github.com/pypa/manylinux#manylinux_2_28-almalinux-8-based).`?"}
{"completion":"The labels for this issue are `priority:high c-Container`.","prompt":"Can you assign labels to the GitHub issue titled `Breaking: Remove wasm annotation in container images` created by `hydai`, stating `After the recent pull request, Podman does not propagate annotations when running container images. We need to update all container examples and documents. To address this, we should remove the \"module.wasm.image/variant=compat\" annotation and use \"--platform wasi/wasm\" instead. Reference: - PRs:   - Podman: https://github.com/containers/podman/pull/18542   - Crun: https://github.com/containers/crun/pull/1234   - Crun: https://github.com/containers/crun/pull/1235`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Zlib Plugin Support` created by `NeelDigonto`, stating `# Motivation The WasmEdge project aims to integrate support for the zlib library through its plug-in system, enabling seamless compilation and execution of existing C/C++/Rust apps in WasmEdge. This integration offers performance improvements, simplifies developers' workflows, and eliminates the need for registering host functions for zlib in their apps. By leveraging native zlib libraries, we aim to enhance the performance of zlib apps in Wasm, ease the compilation process for developers, and eliminate the requirement to compile zlib separately. WasmEdge will act as the container for the zlib apps, ensuring seamless execution within Docker Desktop, Kubernetes, containerd, OpenShift, and similar container tools. # References - [Host Func. Impl. POC](https://github.com/notfathomless/wasmedge-zlib/tree/main/src) - [Original Issue](https://github.com/WasmEdge/WasmEdge/issues/2244#issuecomment-1494240366) - [PR v1](https://github.com/WasmEdge/WasmEdge/pull/2395) # Milestones - [X] `M1` `[Jun 1 - Jun 7]` POC (C++) + Planning + Buffer Time - [X] `M2` `[Jun 8 - Jun 14]` Basic Zlib Support (C++/Rust) + Container - [X] `M3` `[Jun 14 - Jun 30]` Wasm Embed Python + E2E Test - [X] `M4` `[Jul 1 - Jul 31]` Full Zlib Api Compatibility - [X] `M5` `[Aug 1 - Aug 7]` Hardening - [ ] `M6` `[Aug 8 - Aug 14]` Usability - [ ] `M7` `[Aug 15 - Aug 21]` Exposure - [ ] `~~` `[Aug 22 - Aug 28]` Spare Week - [Pull Request](https://github.com/WasmEdge/WasmEdge/pull/2562)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Support Tensorflow and PyTorch in WasmEdge’s Python runtime` created by `assambar`, stating `Running Python applications in a WasmEdge container enables deployment of lightweight Python apps in the cloud. While traditional Linux containers can take up to 100MB in disk and memory space, WasmEdge Python runtime is only 10MB. However, the default pure Python interpreter lacks access to native ML and AI libraries, hindering the execution of ML applications. WasmEdge supports AI frameworks through its WASI-NN extensions, allowing API calls for model inference in Tensorflow and PyTorch. The project goals are to integrate WasmEdge NN extensions into the Python interpreter, creating CPython wrappers for host function APIs, high-level Python wrappers, CI & demo apps, and detailed documentation. Milestones include implementing a Rust crate, demonstrating inference examples, creating Python bindings, adding e2e tests, CI, documentation, and exploring MediaPipe bindings. The repository for tracking work in progress is at: https://github.com/eshaanagarwal/wasi-nn-python-bindings The key milestones are: - Incorporate WasmEdge’s NN extensions into the Python interpreter - Create Python wrappers for C-based host function APIs - Demonstrate PyTorch and TensorFlow Lite inference - Add e2e tests, CI, and documentation - Explore MediaPipe bindings - Write a blog post and record a video showcasing the solution The project aims to enhance the WasmEdge Python runtime for lightweight AI inference while providing extensive documentation and supporting tools.`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-WASI-Threads`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] Implement WASI-threads` created by `LFsWang`, stating `Implement `SharedMemory` in MemoryInstance to resolve race condition and memory base pointer issues during page growth.`?"}
{"completion":"The labels for this issue are `help wanted integration`.","prompt":"Can you assign labels to the GitHub issue titled `Update libsql integration to 0.12` created by `juntao`, stating `Update libsql UDF runtime and examples in WasmEdge to version 0.12.1. Also, revamp the TFLite UDF example to use WASI NN + TFLite plugin and the web service UDF example to utilize HTTPS + TLS plugin.`?"}
{"completion":"The labels for this issue are `enhancement c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Introduce JIT and One-Pass Compiler for Enhanced User Experience` created by `hydai`, stating `WasmEdge currently has two modes: an interpreter with reliable validation and experimental feature support but slow performance, and a faster ahead-of-time (AOT) compilation with boosted execution but difficulty in certain environments and time-consuming compilation. To improve user experience, we propose implementing Just-in-Time (JIT) compilation to minimize costs and developing a One-Pass compiler to reduce dependency on LLVM and compilation time, with some performance trade-offs. More detailed information will be provided in the future.`?"}
{"completion":"The labels for this issue are `enhancement good first issue feature c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `[feat.]: Methods to delete the registered modules` created by `aetiurf`, stating `In the WasmEdge C-SDK, there's no way to remove registered modules from the VM. Even though the VM owns these modules, it's wasteful not to be able to delete them after use. I propose adding a method like this: ```cpp WASMEDGE_CAPI_EXPORT extern void WasmEdge_VMDeleteRegisteredModule(const WasmEdge_VMContext *Cxt,                                const WasmEdge_String ModuleName); ``` This method would allow for the deletion of registered modules after use.`?"}
{"completion":"The labels for this issue are `bug arch-x86_64 binding-go`.","prompt":"Can you assign labels to the GitHub issue titled `Memory Errors when using AOT. Golang Host, Rust Guest` created by `pcfreak30`, stating `My project at https://git.lumeweb.com/LumeWeb/portal/src/commit/7aea462ab752e999030837d13733508369524cf3/bao/bao.go. Compiling with AOT wasm causes an `out of bounds memory access` error when `allocate` is called. Interpreted wasm runs fine but takes 3-5 seconds for a 3 MB file. Expected: Proper running at native computing speed. The same file in direct rust is instant. Environment: - Hardware: x86_64/amd64 - OS: Linux Mint 21 Vanessa Steps to Reproduce: Create a test program using the bao module and pass it an io.Reader. Rust project is in the same folder to build the wasm in release mode.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Support Tensorflow and PyTorch in WasmEdge’s Python runtime` created by `juntao`, stating `Running Python applications in a WasmEdge container allows for deploying lightweight Python apps on the cloud, with the WasmEdge container for Python being only 10MB in size. However, the default Python interpreter in WasmEdge lacks access to native machine learning and AI libraries, restricting the running of machine learning applications. WasmEdge provides support for AI frameworks through its WASI-NN extensions, enabling API calls to run model inference in Tensorflow and PyTorch. The goal is to support these AI framework APIs in the WasmEdge Python runtime. Project Objectives: - Investigate and list C-based host function APIs for Tensorflow and PyTorch inference in WasmEdge NN. - Create CPython wrappers for those host functions. - Develop high-level Python wrapper functions for Python developers. - Establish CI and demo apps to validate the Python wrapper API. - Prepare detailed documentation and tutorials. LFX Requirements: - Proficiency in C programming, including creating dynamic libraries. - Proficiency in Python and machine learning programming. - Basic understanding of WebAssembly and WasmEdge. Application Process: Interested candidates can apply via the LFX mentorship website by May 23, 5:00 PM PDT, using the provided link. They are also required to finish a pretest, which will be communicated separately.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: A stream log processing framework for WasmEdge` created by `juntao`, stating `In this issue, we aim to create a Rust-based log processing framework suitable for lightweight and high-performance microservices. The framework will be compiled into WebAssembly and run in WasmEdge containers alongside Linux containers and apps. Key objectives include: - Developing a Rust framework with 3 traits: Collector, Destination, and Router, similar to the existing MEGA framework. - Implementing at least two Collectors (for MySQL database binlog and a generic log file in a Linux container), two Transformer algorithms supported by FileBeat, and three Destinations (for Kafka queue, Redis database, and ElasticSearch). - Providing configurable Routers for simple routing rules, CI, demo test cases, documentation, and tutorials. - Required skills include proficiency in Rust, familiarity with MySQL, Kafka, ElasticSearch, FileBeat, Kubernetes, and WebAssembly/WasmEdge. Interested candidates are encouraged to apply through the LFX mentorship website and complete the pretest available on GitHub. More details can be found in the linked resources provided by the author.`?"}
{"completion":"The labels for this issue are `good first issue help wanted feature`.","prompt":"Can you assign labels to the GitHub issue titled `WASM buffer allocation on heap section of the memory instances` created by `q82419`, stating `To enable WASM functions to access buffers, developers currently have to allocate buffers in host languages before compiling into WASM files. This poses a challenge when WASM functions require buffer pointers. The runtime API needs to provide buffer allocation support for such functions, or developers have to implement the allocation function themselves. Two approaches are proposed for WASM heap memory allocation API: 1. Using the exported `malloc` or `__new` functions of the WASM module, planned for the `0.13.0` release. 2. Maintaining the heap section on memory instances with the `__heap_base` global, with the release date yet to be determined. Relevant links: - Detect `malloc` and `__new` when loading: [WAMR #3626](https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/interpreter/wasm_loader.c#L3626) - Maintain the `__heap_base`: [WAMR #202](https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/interpreter/wasm_runtime.c#L202) - Allocate memory when executing: [WAMR #2498](https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/interpreter/wasm_runtime.c#L2498) Issue reference: #2420`?"}
{"completion":"The labels for this issue are `OSPP`.","prompt":"Can you assign labels to the GitHub issue titled `[OSPP] feat: Create an WasmEdge-based LLM automation framework` created by `juntao`, stating `WebAssembly runtimes, like WasmEdge, are ideal for lightweight serverless functions. We aim to create a Rust and JavaScript framework to support automation and extension tasks around Large Language Models (LLMs), such as ChatGPT. The framework will enable developers to create LLM extensions and run them in cloud-native WasmEdge runtimes.  Our objectives are to create a software framework with built-in support for accessing cloud and locally trained LLM services, fine-tuning, segmenting documents, managing vector databases and prompt libraries, and interfacing with external systems through WasmEdge connectors SDK.  Upon completion, we expect to deliver a Rust framework for WasmEdge applications to interact with LLMs, a JavaScript framework for QuickJS applications, and related documentation and sample applications.  Please complete the pretest after you apply. Thank you!`?"}
{"completion":"The labels for this issue are `help wanted Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Performance issue when invoking function pointer in structure` created by `hungryzzz`, stating `Hi, I'm comparing the performance of a specific case in different Wasm runtimes after compiling with Emscripten. In `wasmedge`, the execution time is 9x slower than in other runtimes. When directly invoking the function, the execution time is significantly faster. This may indicate a performance issue with invoking function pointers in a structure. I'm unsure if this is related to a previous issue on the WasmEdge repository. Environment: - Hardware: x86_64, Ubuntu 20.04, Intel Core i5-9500T CPU @ 2.20GHz, 32GB Memory - Emscripten: Version 3.1.24, clang version 16.0.0, Target: wasm32-unknown-emscripten - Wasm Runtimes: wasmer 3.2.0, wasmtime 8.0.0, wasmedge (commit 381b7b28049b968297e6a585b92d1cba955def66), wamr 1.1.2 Steps to Reproduce: 1. Compile the case using Emscripten: `emcc -sENVIRONMENT=shell -O2 -s WASM=1 -s TOTAL_MEMORY=512MB methcall.c -o methcall.wasm` 2. Execute the wasm file in different runtimes and collect the execution time. I need assistance in understanding the performance difference and identifying any related issues in the WasmEdge repository.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Performance issue when handing virtual function ` created by `hungryzzz`, stating `I compared the performance of a C++ program compiled to WebAssembly across different runtimes and found significant differences in execution times. Specifically, in the presence of a `virtual` keyword, the execution time in `wasmedge` is much slower compared to other runtimes. Execution times for the C++ program with `virtual`: - wasmedge (AOT): 28276.09 us - wamr (AOT): 3155.77 us - wasmer: 3637.64 us - wasmtime: 3548.20 us Execution times for the C++ program without `virtual`: - wasmedge (AOT): 90.62 us - wamr (AOT): 823.16 us - wasmer: 633.42 us - wasmtime: 231.19 us I suspect a performance issue specifically related to handling virtual functions in `wasmedge`. The environment where this was observed is x86\\_64 running Ubuntu 20.04, and the hardware details are: - CPU: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz - Memory: 32GB - Emscripten version: 3.1.24 I used the following WebAssembly runtimes: - wasmer: wasmer 3.2.0 - wasmtime: wasmtime-cli 8.0.0 - wasmedge: build from commit 381b7b28049b968297e6a585b92d1cba955def66 - wamr: iwasm 1.1.2 To reproduce, compile the C++ case using Emscripten (`emcc -sENVIRONMENT=shell -O2 -s WASM=1 -s TOTAL_MEMORY=512MB methcall.cpp -o methcall.wasm`) and execute the wasm file in different runtimes, with default options.`?"}
{"completion":"The labels for this issue are `good first issue platform-windows OSPP compiler-MSVC`.","prompt":"Can you assign labels to the GitHub issue titled `[OSPP] feat: Enabling WasmEdge Compilation with MSVC Toolchain` created by `hydai`, stating `WasmEdge needs to be compatible with the MSVC toolchain alongside GCC and Clang for wider accessibility on Windows. The project aims to adapt the source code to ensure seamless compilation with MSVC while maintaining core functionality and consistent behavior with the Clang toolchain. To achieve this, the main objectives are: modifying the source code for MSVC compatibility, ensuring error-free compilation with MSVC, and validating test suite behavior against the Clang toolchain. The expected deliverables include a modified WasmEdge source code for MSVC, comprehensive documentation of changes made, a report demonstrating error-free compilation, and verification of consistent test suite behavior. To apply for this project, completion of challenge #2452 before the application deadline is required. Relevant issues: #2419 and #2423.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Is this supposed to crash?` created by `Photosounder`, stating `I'm experiencing an issue when running `WasmEdge_VMExecute()` for the first time with an AOT-compiled WASM file. The process works with the original WASM file but not the AOT-compiled one. I have a simple function to compile a .wasm file to an AOT WASM file using WASI-SDK. Then, I set up the environment with `WasmEdge_ConfigureCreate()` and load the AOT-compiled file. The problem arises when I call `call_wasm_malloc(ctx, 10000)`, resulting in a crash. The issue occurs when using MSVC and the latest Clang-built commit. If anyone has encountered this before or has any insights, I'd appreciate the help. ```c int32_t call_wasm_malloc(wasm_ctx_t *ctx, int32_t size) { \tWasmEdge_Result Res; \tWasmEdge_String func_name = WasmEdge_StringCreateByCString(\"malloc\"); \tWasmEdge_Value ret[1], param[1] = { WasmEdge_ValueGenI32(size) }; \tRes = WasmEdge_VMExecute(ctx->vm_ctx, func_name, param, 1, ret, 1); \t... } ````?"}
{"completion":"The labels for this issue are `bug platform-windows compiler-MSVC`.","prompt":"Can you assign labels to the GitHub issue titled `Inconsistent struct padding causing bugs` created by `Photosounder`, stating `I discovered the root cause of bugs #2421 and #2422: the `sizeof(WasmEdge_Value)` differs between the MSVC-compiled host (24 bytes) and the Clang-compiled library (32 bytes). By adding `uint64_t pad;` to `WasmEdge_Value`, the issue seems resolved, but I'm looking for better solutions. It's also possible that other structures are affected. Technical Specifics: - Host: MSVC-compiled, `sizeof(WasmEdge_Value)` is 24 - Library: Clang-compiled, `sizeof(WasmEdge_Value)` is 32 - Hardware Architecture: x86\\_64 - Operating System: Windows 10 Proposed Action: - Investigate alternative solutions to address the `sizeof(WasmEdge_Value)` disparity - Evaluate potential impact on other structures This condensed summary offers a clear and focused presentation of the author's technical challenges, proposals, and specific environment details.`?"}
{"completion":"The labels for this issue are `bug platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `Windows build instructions expect VS Enterprise` created by `Photosounder`, stating `To build Wasmedge on Visual Studio Community instead of Enterprise, I encountered an error regarding 'diaguids.lib' and had to apply the regex 's/Enterprise/Community/g' to 'build/build.ninja'. Additionally, the 'curl' command failed with the error \"A parameter cannot be found that matches parameter name 'sLO'.\" I also received warnings about unknown warning options '-Wno-unsafe-buffer-usage' and '-Werror=cast-function-type-strict'. I need assistance in resolving these issues related to building Wasmedge.`?"}
{"completion":"The labels for this issue are `help wanted integration`.","prompt":"Can you assign labels to the GitHub issue titled `module name conflict when WasmEdge on k8s` created by `EthanLiu1991`, stating `I created a wasm OCI image that works with 'ctr run' but fails when deployed on k8s. The error is \"instantiation failed: module name conflict, Code: 0x60\". I'm trying to run wasm workloads on Kubernetes using WasmEdge 0.11.2, Ubuntu 22.04, Kubernetes 1.22.5, and Containerd 1.5.8. I need to resolve the module name conflict issue and ensure the wasm container runs correctly on k8s. Reference links: - To build OCI image: https://nigelpoulton.com/getting-started-with-docker-and-wasm - Running wasm workloads on Kubernetes: https://nigelpoulton.com/webassembly-on-kubernetes-everything-you-need-to-know`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Generate a shared memory in env` created by `LFsWang`, stating `The wasm file with wasi-threads requires importing shared memory from `env`. Currently, Wasmedge needs to manually add this in the c api. Due to this, we cannot run a wasi-threads example directly. According to the wasi threads document, the WASI host must first allocate shared memories to satisfy the module's imports.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `Add example for doing exception handling` created by `harry900831`, stating `We need to add an example showcasing the exception handling proposal on WasmEdge. It appears that emscripten is capable of generating standalone wasm from C++ with exception using the command '`emcc -O1 -fwasm-exceptions a.cpp -o a.wasm`'.  The following C++ code demonstrates this: ```cpp #include <stdio.h> int main() {   try {     puts(\"throw...\");     throw 1;     puts(\"(never reached)\");   } catch(...) {     puts(\"catch!\");   }   return 0; } ````?"}
{"completion":"The labels for this issue are `bug priority:medium c-Internal binding-go c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `fatal error: non-Go code set up signal handler without SA_ONSTACK flag` created by `loredanacirstea`, stating `Adding support for AOT compiled modules in Go with wasmedge causes tests to fail with a \"signal 16 received but handler not on signal stack\" error. This error obscures genuine test failures, leading to instability where passing tests may fail intermittently with the same error. The expected outcome is for the signal handler error not to interfere with identifying the actual failure. The issue can be traced to a missing SA_ONSTACK flag in the signal handler setup, as per the Go documentation. A potential solution is to add the flag `Action.sa_flags = SA_SIGINFO | SA_ONSTACK;` in the fault handling file of the WasmEdge repository. Environment: - Hardware Architecture: arm64 - Operating system: macOS 13.3.1 - WasmEdge 0.11.2 Reproduction Steps: - Provide necessary information to reproduce the bug. Optional build-specific information: - C++ Compiler version: - CMake version: - CMake flags: - Boost version:`?"}
{"completion":"The labels for this issue are `enhancement binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Support function execution timeout within a sandbox` created by `paulmchen`, stating `We need the WASM runtime to support initializing a sandbox with a \"timeout\" parameter. If a function exceeds the specified timeout during execution in the sandbox, an error should be returned and the sandbox properly shutdown. This will ensure we can handle timeouts effectively when invoking our cloud functions.`?"}
{"completion":"The labels for this issue are `integration c-Container c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `AOT bug when using ctr ` created by `GhazalSdn`, stating `I am having trouble running an AOT wasm module that was created using Wasmedge. When attempting to run the OCI image generated from the AOT wasm using CTR (with runwasi), I encounter an error for out of bounds memory access with code 0x88 while executing the \"main\" module and \"_start\" function. This issue occurs only on the machine where the AOT wasm was created; the same image runs successfully on other machines. I created the AOT wasm module on a machine running Ubuntu x86 architecture using runwasi in CTR. When I ran the image on MacOS Intel and Ubuntu ARM using different setups, it worked without any issues. I expect the OCI image to run successfully on the same machine where the AOT wasm module was created. Your support in resolving this issue would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Apply wasmedge plugins into container environment` created by `CaptainVincent`, stating `Enhance plugin installation and management for improved user experience: - Provide a streamlined process for installing plugins and runtime shim. - Afford a comprehensive solution for running WebAssembly (WASM) inside a container. - Enable automatic recognition of supported plugins in the `/opt/containerd/lib` path. Key Components: - Refer to the [toolchain image](https://hub.docker.com/repository/docker/vincent2nd/runwasi-installable/general) on Docker Hub for the required binaries and libraries. - Access the source code on [GitHub](https://github.com/CaptainVincent/runwasi/tree/enhance-plugin-usability). Implementation Details: - Utilize the instructions outlined in the [containerd documentation](https://github.com/containerd/containerd/blob/main/docs/managed-opt.md). - For cases where root permission is available, execute the following commands to install and control shim, wasmedge, and plugins under the host's `/opt/containerd` path: ```sh sudo ctr content fetch docker.io/vincent2nd/runwasi-installable:latest sudo ctr install docker.io/vincent2nd/runwasi-installable:latest -l -r ``` - In cases without root permission, build the WASM application based on the toolchain image, allowing the automatic mounting of the `/lib` directory to `/opt/containerd/lib`. Next Steps: - Upgrade Wasmedge to version 0.12 and the relative rust-sdk to enable auto-recognition of supported plugins. - Enhance flexibility through the `WASMEDGE_PLUGIN_PATH` and `WASMEDGE_PLUGIN_HOST_PATH` environment variables, ensuring that they are not used simultaneously. Appendix: - Review the provided architecture overview and explore the flexibility offered by environment variables for plugin path customization.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: streaming data processing with WasmEdge` created by `xxchan`, stating `This is the workspace of the LFX mentorship #2231. The motivation is to integrate WasmEdge as an alternative runtime for Fluvio, an open-source data streaming platform with in-line computation capabilities. Key Milestones: - Replacing wasmtime with WasmEdge in `filter` - Investigating fluvio's usage of wasm engine in detail and designing a solution to support different wasm engines simultaneously - Implementing full WasmEdge engine support and passing all Fluvio integration tests - Creating WasmEdge specific examples and documentation, and submitting PR to upstream The main technical challenge is to design a solution to support different wasm engines simultaneously in a maintainable way. Specific technical details include investigating Fluvio's usage of wasm engine and creating WasmEdge specific examples. Multiple PRs have been created in the process. Code workspace: [Fluvio Pull Request](https://github.com/xxchan/fluvio/pull/1)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: WasmEdge C++ SDK` created by `q82419`, stating `This issue involves the workspace for LFX mentorship #2241. I'm encountering challenges with setting up the necessary environment and tools for the project. Specifically, I need to integrate a new library for handling data processing and review the existing code for any potential improvements. Additionally, there's a proposal to implement a more efficient data caching mechanism to optimize performance. I will also need assistance in resolving compatibility issues with the latest version of a dependency. Any insights or guidance regarding these technical aspects would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Problems of implementing the Tensorflow backend` created by `gusye1234`, stating `I aim to integrate Tensorflow with our WASI-NN backend. However, we faced several issues: 1. Using the C api of TF to perform a forward computation requires providing the string name of the input/output node, while we use numeric index in WASI-NN for `set_input`/`get_output`. 2. Post TF2.6, models are exported to SavedModel, containing default and user-defined signatures, requiring the passing of an exported path for loading in TF. 3. Loading SavedModel in TF necessitates passing a string path, which must be pre-opened in the WASI environment. To address these, we suggest: 1. Converting the Tensorflow model to TensorflowLite model. 2. Implementing a buffer-loading version of TF backend to handle the simple case, alongside a path-loading version for the corresponding scenario. 3. Utilizing modified WASI-NN APIs to support user indexing their inputs/outputs by string name. Further technical details and proposed solutions can be found in our GitHub repository and corresponding issues.`?"}
{"completion":"The labels for this issue are `platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to build on Windows` created by `dracoooooo`, stating `Build failed with an error related to missing file 'C:/Program Files/Microsoft Visual Studio/2022/Enterprise/DIA SDK/lib/amd64/diaguids.lib' when running `cmake --build build`. Expected to build successfully. Environment: x86-64 architecture, Windows 10, clang version 13.0.1. Followed the build guide for Windows. Need help resolving this issue.`?"}
{"completion":"The labels for this issue are `c-ExceptionHandling`.","prompt":"Can you assign labels to the GitHub issue titled `Support exception handling proposal` created by `sdeleuze`, stating `Related to #1122, supporting exception handling proposal is necessary for running Kotlin/Wasm in WasmEdge. A first step is to allow parsing of WebAssembly bytecode built with EH proposal enabled, enabling support for positive scenarios that do not throw exceptions. This would facilitate experimentation with Kotlin/Wasm and Dart.`?"}
{"completion":"The labels for this issue are `bug priority:low platform-macos arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `Optimizing wasmedge_quickjs with wasmedgec (AOT) fails` created by `manuschillerdev`, stating `I ran `wasmedgec` commands to optimize and compile QuickJS. The versions used were `0.11.2` for `wasmedgec`, `0.11.2` for `wasmedge`, and `1.67.1` for `cargo`. I expected to get an Ahead-Of-Time (AOT) optimized version of QuickJS, but encountered a warning about version incompatibility. My environment: Macbook Pro (Intel 2019), running OSX. To reproduce: checkout repository at commit `19421b9948e460fbc4a8ba3adab4311734d73526`, then run `cargo build --target wasm32-wasi --release` and build either a shared library or a wasm file using `wasmedgec`.`?"}
{"completion":"The labels for this issue are `feature priority:high c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Support the Typed Continuations Proposal` created by `juntao`, stating `We support async host functions using fiber-based stack switching in WasmEdge Rust SDK, yet the Typed Continuations proposal would enable async functions within Wasm programs. An objective of this effort is to ensure that all examples work. Check out the [Typed Continuations proposal](https://github.com/WebAssembly/stack-switching/#typed-continuations-proposal-for-webassembly) and their [examples](https://github.com/WebAssembly/stack-switching/tree/main/proposals/continuations/examples). `?"}
{"completion":"The labels for this issue are `feature priority:medium c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Support the wasi-threads proposal` created by `juntao`, stating `The [wasi-threads](https://github.com/WebAssembly/wasi-threads) API enables spawning new Wasm instances in new threads, complementing the [wasm threads](https://github.com/WebAssembly/threads) proposal for atomic access to shared memory space. Together, these advancements will allow existing multi-thread C/C++ or Rust libraries to be compiled into WASI.\r \r Notably, WasmEdge already supports [wasm threads](https://github.com/WasmEdge/WasmEdge/pull/1499) with examples utilizing a host C SDK, such as the mandelbrot-set-in-threads in [WasmEdge examples](https://github.com/WasmEdge/WasmEdge/tree/master/examples/capi/mandelbrot-set-in-threads).  In anticipation of standard compilers supporting these advancements, the suggestion is to provide a C and Rust API library for developers to explicitly code the `wasi_thread_spawn` call. This will facilitate continued development while awaiting broader compiler support.`?"}
{"completion":"The labels for this issue are `enhancement help wanted priority:medium c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Support for Wasm Coredump` created by `xtuc`, stating `When a Wasm instance traps, understanding what happened can be challenging. I propose implementing Wasm coredumps following the early spec at https://github.com/WebAssembly/tool-conventions/blob/main/Coredump.md to aid in post-mortem debugging. Feedback on the spec is welcome. Check out a developer's demo at https://github.com/xtuc/wasmgdb/wiki/Demo. Wasm coredumps are particularly useful in serverless environments with limited logging and stripped production binaries.`?"}
{"completion":"The labels for this issue are `platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `Static build error on windows` created by `xiaozhuai`, stating `There's a build error related to merging objects into a static library. It's caused by specific lines in the CMakeLists.txt file. The proposal is to use the `OBJECT` keyword and link it to the library, illustrated by adding the `test_obj` in the CMake code. Additionally, it's noted that hard-coding 'libwasmedge.a' is not ideal and might be 'wasmedge.lib' on Windows.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: LFX Serialization Completion` created by `hydai`, stating `WasmEdge needs support for the text format WebAssembly loader feature by implementing the serialization of WebAssembly modules. This includes completing serialization functions for element segment, data segment encoding, and WebAssembly instructions encoding. Unit test data needs to be generated and tests need to be passed, aiming for over 80% code coverage for serialization. The recommended skills for this mentorship are C/C++ and WebAssembly. The mentorship opportunity can be applied for on the provided link. Apply here: [Mentorship Link](https://mentorship.lfx.linuxfoundation.org/project/4a8a4f26-0ca9-4517-8cce-582c92092e33)`?"}
{"completion":"The labels for this issue are `documentation enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Release WasmEdge on s390x platform` created by `hydai`, stating `Some use cases rely on the s390x platform, but we don't provide prebuilt release assets for it. To address this, we propose: - Creating a document on building WasmEdge for s390x - Providing pre-built release assets for s390x Related issue: https://github.com/k3s-io/k3s/pull/6872`?"}
{"completion":"The labels for this issue are `help wanted LFX Mentorship feature c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `feat: a zlib plugin` created by `juntao`, stating `The goal is to add support for the zlib library within WasmEdge through a plug-in system. This will enable existing zlib-based C / C++ / Rust apps to be compiled and run inside WasmEdge without the need to compile zlib separately. The benefits include improved performance, easier development process, and seamless integration with container tools. The specific action item is to create a plug-in for zlib host functions and the link to apply for it is https://mentorship.lfx.linuxfoundation.org/project/74cecdf7-e886-4830-8bb0-7814f0d1aa2d.`?"}
{"completion":"The labels for this issue are `LFX Mentorship feature`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WasmEdge C++ SDK` created by `hydai`, stating `WasmEdge received requests for a C++ SDK. This is an LFX mentorship issue focusing on implementing the basics and VM stages. Applicants should be familiar with C++ and WebAssembly. They should apply on the LFX mentorship website and complete a pretest. The C++ SDK should mirror the functionality of the C SDK, particularly in the Basics and VM sections. Candidates need to understand how the C SDK handles WasmEdge internal functions and type conversions.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: streaming data processing with WasmEdge` created by `juntao`, stating `Fluvio, an open-source data streaming platform, aims to integrate WasmEdge as an alternative runtime. This involves creating a compile-time feature for the fluvio-smartengine crate to embed WasmEdge into the binary build using the WasmEdge Rust SDK. The desired outcomes include passing Fluvio integration tests with the WasmEdge feature, submitting a PR to the Fluvio project, and developing a demo app for processing streaming data using WasmEdge. Candidates with Rust language proficiency and familiarity with WebAssembly Rust SDKs, particularly the WasmEdge Rust SDK, are encouraged to apply on the LFX mentorship website. Before applying, candidates must complete the pretest #2232. Key resources for this integration include the WasmEdge Rust SDK, its high and low level APIs, WasmEdge Rust SDK examples, and the essa-rs project, offering guidance on supporting multiple Wasm runtimes. The intent is to utilize WasmEdge for AI inference. To apply for the issue, candidates can visit the LFX mentorship website and complete the pretest #2232.`?"}
{"completion":"The labels for this issue are `LFX Mentorship c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: A Rust library crate for mediapipe models for WasmEdge NN` created by `juntao`, stating `Mediapipe provides ML models for streaming data with Python, iOS, Android, and TFLite-JS SDKs. We aim to create a Rust library crate for easy integration of Mediapipe models into WasmEdge applications. Each model has a description page outlining input and output tensors in Tensorflow Lite format. We need library functions for each model to process input media objects, run inference, and interpret results, returning output parameters and visual representations. Applicants should have Rust, AI model experience, Tensorflow Lite familiarity, and image processing skills. Candidates can apply on the LFX mentorship website with pretest #2230. Link to apply: [LFX mentorship website](https://mentorship.lfx.linuxfoundation.org/project/e4e6d486-e6df-475d-8074-a363d0361076)`?"}
{"completion":"The labels for this issue are `Improvement priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `feat: evaluate the horizontal scaling performance improvement approach` created by `hydai`, stating `To improve the multi-thread performance, we need to establish the baseline, benchmark, and identify suitable approaches for our codebase. There are discussions on similar approaches in other runtime implementations, like Wasmtime: https://github.com/bytecodealliance/wasmtime/issues/4637`?"}
{"completion":"The labels for this issue are `good first issue help wanted feature binding-go`.","prompt":"Can you assign labels to the GitHub issue titled `[Feature] Support Bazel in `WasmEdge-go`` created by `DarumaDocker`, stating `Wasmtime-go uses CGO to consume the C API of the Wasmtime project, providing precompiled binaries for Linux x86_64, macOS x86_64, and Windows x86_64. To use on other platforms, users need to build Wasmtime and set CGO_* env vars. The project is tested with Go 1.13+. Bazel users can add the provided code to their WORKSPACE file. Considering Bazel's popularity in the Golang community, it's worth exploring support for it in WasmEdge-go.`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `Support Typed Function Reference Proposal` created by `q82419`, stating `The typed function reference proposal moved to phase 3. We need to: 1. Support the proposal. 2. Add configurations and options in the CLI. 3. Pass the spec test suite.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled ``wasmedge` is stuck when stdout is redirected to a file in bash` created by `TerrorJack`, stating `In a `ubuntu:20.04` container, using the official `wasmedge` release, running the `hello` wasm module with `wasmedge --enable-tail-call ./hello` works, but `wasmedge --enable-tail-call ./hello > actual` gets stuck. The `hello` file is available at the provided link. Expected: The `hello` module should run smoothly and produce an output. Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 20.04`?"}
{"completion":"The labels for this issue are `help wanted question Hacktoberfest integration`.","prompt":"Can you assign labels to the GitHub issue titled `Support for K3s` created by `invent360`, stating `Why no support for k3s? Any plans to support it? If not, why are kubeadmin and kubeedge considered better options over k3s?`?"}
{"completion":"The labels for this issue are `documentation enhancement c-CLI c-Internal c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Limit the range of randomly generated fd in the WASI component` created by `hydai`, stating `We need to handle the randomly generated file descriptor numbers in our application due to compatibility issues with the old select API and the standard of WASI. The application sometimes only accepts file descriptor numbers less than FD_SETSIZE (usually 1024). To address this, we propose the following actions:  - Implement an internal function to control the range of randomly generated file descriptor numbers. - Export this function as a configuration option in the C API. - Provide a CLI option to control this configuration flag. - Document these changes accordingly. For more details, refer to the [WASI documentation](https://github.com/WebAssembly/WASI/blob/main/phases/snapshot/docs.md#-path_openfd-fd-dirflags-lookupflags-path-string-oflags-oflags-fs_rights_base-rights-fs_rights_inheriting-rights-fdflags-fdflags---resultfd-errno).`?"}
{"completion":"The labels for this issue are `binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Rust SDK: set_cost_limit not working.` created by `MediosZ`, stating `I'm unable to use `set_cost_limit` in the Rust SDK as it doesn't work. Currently, the program runs to the end even after setting the cost limit. I expect the program to report an error when it exceeds the cost limit.  Environment: - Hardware Architecture: x64 - Operating system: Ubuntu 20.04 To reproduce: In the test `wasmedge-sys/tests/executor_with_statistics.rs`, change cost limit to a small value, say 100, and run the test. Alternatively, use the provided Rust program and a compiled wasm program named `app.wasm`.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Wasmedge signature tool` created by `LFsWang`, stating `Continue the work of #517 by using openssl instead of orlp-ed25519 in the original work.`?"}
{"completion":"The labels for this issue are `enhancement c-Internal c-CAPI breaking changes`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support ValType as a structured class with variant` created by `little-willy`, stating `In our current WASM support, storing `ValType`s as uint_8 limited by the official WASM spec is a constraint. With the upcoming function-reference and GC proposal, the `ValType` type specifier may need to occupy multiple bytes for typed reference. To address this, we propose replacing the current ValType enum class with a structured class, initially functioning as a wrapper for the enum class. This structured class could accommodate additional information in the future to support function-reference and GC proposal. It's essential to consider the compatibility of the binding interface, especially for java and rust SDKs where ValType is exposed. This compatibility may need reevaluation considering the proposed changes.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled ``assert_exhaustion` is not implemented` created by `erxiaozhou`, stating `The program is stuck in an infinite loop and not producing any output. I expect an exception indicating a stack overflow. Details:  - Code Version: git commit id 844103848a799fe3dc315b48cf4993ccdff1e097  - Hardware Architecture: x86\\_64  - OS: Ubuntu 20.04  - Optional:    - C++ Compiler version: clang-14    - CMake version: 3.21.6    - CMake flags:  `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON`    - Boost version: libboost1.71-dev:amd64  - Build commands:    ```export CC=/usr/bin/clang-14    export CXX=/usr/bin/clang++-14    rm -rf build ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON .. ; make -j ; cd ..``` Steps to reproduce the issue:  1. Build the wasmedge  2. Run the test case using `build/tools/wasmedge/wasmedge --reactor <test_case_name> to_test` from [wasmedge_timeout.zip](https://github.com/WasmEdge/WasmEdge/files/9997777/wasmedge_timeout.zip)`?"}
{"completion":"The labels for this issue are `enhancement good first issue binding-python`.","prompt":"Can you assign labels to the GitHub issue titled `Python SDK progress tracking` created by `SAtacker`, stating `The issue aims to provide a Python API on top of the existing C-API of WasmEdge, supporting only the CPython Version due to its maturity and available wrappers. The Python SDK is in alpha development, not recommended for production environments. The current implementation is based on the WasmEdge 0.9.x APIs but may change with newer versions. The author provides an appendix with links to temporary hosting of Docs and PyPi test. The author lists the status of various typedefs and functions, marking their support status. They mention old issues on GitHub and the caution about the python SDK's alpha development. The long list of API functions and contexts indicates extensive work on the project. The API's extensive coverage is illustrated by the detailed status of each typedef and function. The caution about its alpha development highlights potential risks. The author requests: \"Please shortly describe by example what feature you want to use or what idea you want to see in the current WasmEdge project.\" They provide temporary hosting of Docs and PyPi test links for reference. The API's comprehensive coverage and the caution about its alpha development are crucial points. Additionally, the references to temporary hosting of Docs and PyPi test indicate a strong need for feedback and validation.`?"}
{"completion":"The labels for this issue are `enhancement help wanted priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `Support Multiple Processes WASMEdge` created by `wenhuizhang`, stating `Enable multiprocess support on WASM runtime by allowing forking of child processes and enabling memory sharing between processes.`?"}
{"completion":"The labels for this issue are `bug help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `AOT bug` created by `L-jasmine`, stating `After enabling ahead-of-time (AOT) compilation, running a WebAssembly (wasm) module results in the error message: `[error] execution failed: out of bounds memory access, Code: 0x88`. This occurs on Ubuntu 18. To reproduce the issue, refer to the following steps: https://github.com/second-state/wasmedge_asyncify/blob/preview/examples/aot/src/main.rs Optional Information (if built from source): - C++ Compiler version - CMake version - CMake flags: `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON` - Boost version`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] (post-release) libsodium tests failed` created by `0yi0`, stating `The latest run of the test suite for libsodium 1.0.18 resulted in 77 failures. The last passing run was 3 months ago, but the logs have expired. The specific failures include \"siphashx24\" and \"xchacha20.\" The image with the error details is available in the link provided.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled ` HTTP server embedded mode works with WasmEdge and not with WasmTime (and vice et versa)` created by `k33g`, stating `I have two use cases for launching WASM HTTP servers with either WasmEdge or WasmTime. The first case involves a Rust HTTP server, where WasmEdge works, but WasmTime fails with an \"unknown import\" error. The second case is an ASP.Net HTTP server, which works with WasmTime but encounters a \"mismatched function type\" error with WasmEdge. The expected outcome is to be able to launch the servers with either WasmEdge or WasmTime. For the Rust HTTP server: - Starting with WasmEdge works fine, but using WasmTime results in a failed server with the \"unknown import\" error. For the ASP.Net HTTP server: - When using WasmTime, the server starts and responds to requests, but with WasmEdge, the server fails due to a \"mismatched function type\" error. The issue can be reproduced by building the projects and attempting to launch the servers with both WasmEdge and WasmTime in supported environments. To take action, the provided GitHub samples can be opened in Gitpod to reproduce the issue. Detailed steps for building and launching the servers with both WasmEdge and WasmTime are outlined in the original post.`?"}
{"completion":"The labels for this issue are `enhancement good first issue platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled ``dladdr()` on Windows` created by `q82419`, stating `WasmEdge needs to implement `dladdr()` on Windows, as it's currently not available on that platform. This implementation should be added to `lib/plugin/plugin.cpp` to ensure consistency across different operating systems.`?"}
{"completion":"The labels for this issue are `binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `[Java SDK] Road Map` created by `kenvifire`, stating `Provide Java SDK for WasmEdge with the following tasks:\r - Set up wasmedge-jni and wasmedge-java projects\r - Wrap c apis including WasmEdge Basics, WasmEdge VM, WasmEdge Runtime, AOT compiler, and Async API\r - Document Readme, build and install instructions, Java API docs, and step-by-step examples\r - Implement CI workflow for building on different platforms and publishing to Maven repository - Refactor by generating JNI header and bug fixes. Please feel free to add more features under this issue.`?"}
{"completion":"The labels for this issue are `bug help wanted Hacktoberfest platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `wasi `path_readlink` not work well` created by `Puellaquae`, stating ``path_readlink` fails to read the contents of a symbolic link, returning errors like `Error: Errno { code: 28, name: \"INVAL\", message: \"Invalid argument.\" }` or `Error: Errno { code: 44, name: \"NOENT\", message: \"No such file or directory.\" }` when used under a folder. This issue occurs on Ubuntu 20.04 with `x86_64` architecture. The provided Rust code showcases the problem, demonstrating the unexpected behavior when attempting to read the link. The desired outcome is for `path_readlink` to return the contents of the symbolic link, such as \"./test.txt,\" instead of producing errors.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Module Linking - add wasm to wasm support to wasmedge-bindgen` created by `dm4`, stating `In #1877, we discussed replacing the interface type with a serialize/deserialize protocol. Now, I want to use wasmedge-bindgen to achieve this. Current wasmedge-bindgen only works when using rust to call export function from wasm. I aim to add wasm to wasm support to wasmedge-bindgen. For this, we might need to: - Handle extern blocks in rust to generate import functions in wasm - Convert function signatures for import functions - Allocate/deallocate memory before/after calling wasm`?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `Increase the code coverage of inode-win.cpp` created by `abhinandanudupa`, stating `More coverage leads to better quality. A request to implement host functions on the Windows platform can be found in the appendix link provided. #1826.`?"}
{"completion":"The labels for this issue are `bug help wanted priority:low platform-windows c-CLI`.","prompt":"Can you assign labels to the GitHub issue titled `wasmedge CLI - AOT Compiler does not work itself on pure windows, terminal.` created by `ilsubyeega`, stating `Compiling error occurs when using AOT compiler from wasmedge cli in pure terminal on Windows OS Build 22621.730 with WasmEdge version 0.11.1. However, it works when using `x64 Native Tools Command Prompt for VS 2022`. The expected behavior is for AOT compiler to work correctly without throwing errors. Steps to reproduce and alternative method are provided along with corresponding error logs and images.`?"}
{"completion":"The labels for this issue are `platform-android arch-arm32`.","prompt":"Can you assign labels to the GitHub issue titled `android armv7 is supported or not` created by `morn-0`, stating `I'm exploring the possibility of compiling and running on Android armv7. My main concern is about the hardware architecture and operating system requirements. If anyone has experience with this or any insights, I'd greatly appreciate your input. If you have built from source, knowing your C++ compiler version, CMake version, CMake flags, and Boost version would be beneficial. If anyone can provide steps to reproduce the bug, that would also be very helpful.`?"}
{"completion":"The labels for this issue are `feature c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `WASI-NN PyTorch Backend supporting in manylinux2014` created by `q82419`, stating `In the `ubuntu 20.04` version of WasmEdge WASI-NN pytorch plugin, linking of `libtorch-pre-cxx11-abi` needs to be successful. On the `manylinux2014` version, compiling the  `cxx11-abi` version of libtorch should be done. The challenge is due to the usage of `GLIBCXX`. The environment is x86_64 architecture, running on CentOS 7.6.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `KinD quickstart documentation may be out of date` created by `jcuffe`, stating `When following the WasmEdge book's Kubernetes setup, attempting to run the provided container image results in an \"Exec format error.\" Yet, running a similar image from the Liquid-Reply quickstart succeeds, even when using an older image tag. The expected result is success with both sets of documentation. The issue occurs when running the image as per the WasmEdge book, while it succeeds using the Liquid-Reply repository's instructions. Hardware Architecture: x64 Operating system: Ubuntu 20.04 To reproduce: 1. Install KinD using the quickstart instructions. 2. Create a cluster with the image specified in the WasmEdge book. 3. Run a container according to the WasmEdge book instructions (fails). 4. Run a container according to the Liquid-Reply repo instructions (succeeds).`?"}
{"completion":"The labels for this issue are `enhancement priority:high c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Propose the plugin manifest` created by `hydai`, stating `In the current system, we lack an easy method for users to install pre-built plugins, like 'WASI-NN.' This requires manual downloading and placement of files. To simplify this, I propose a 'plugin manifest' file detailing plugin versions, compatibility, and download information in JSON format. This file would ship with every release. Here's an example of the proposed format: ```json {   \"wasmedge_version\": \"0.11.0\",   \"prerelease\": false,   \"timestamp\": \"2022-08-08\",   \"plugins\": [     {       \"name\": \"wasi-nn-openvino\",       \"version\": \"0.1.0\",       \"triple\": {         \"manylinux2014_x86_64\": {           \"platform\": \"manylinux2014\",           \"arch\": \"x86_64\",           \"url\": \"link\",           \"checksum\": \"hash\"         }       }     }   ] } ``` The \"plugin manifest\" would include the WasmEdge version, plugin names, supported platforms and architectures, download URLs, and plugin hashes for verification. /cc @SAtacker @ibmibmibm @q82419`?"}
{"completion":"The labels for this issue are `enhancement c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `[Internal] New file manager pattern` created by `dannypsnl`, stating `The top-level form of WASM is traditionally the module, but in the component model, it's not. To address this, the new implementation needs machinery to stop the loader from reading all the data via an infinite loop.  One proposed solution is to create a file manager with a range, each manager for a specific purpose. This will also remove `loadContent` callback issues. For example, we can now write code like this: ```cpp auto SecSize = FMgr.loadU32(); loadSection(Comp->getAliasSection(), FMgr.subRange(*SecSize)); ``` To achieve this, it's important to extract `FMgr` from `Loader` to avoid falling back on a class-based approach. Additionally, consideration should be given to moving out `loadXxx` member functions to address the issue of a god class `Loader`. Those member functions often don't share any state.`?"}
{"completion":"The labels for this issue are `help wanted Hacktoberfest platform-windows binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `On Windows, an error occurred when i embedded wasm in my rust app` created by `abc767234318`, stating `I encountered an error while embedding wasm in my rust application on x86 hardware architecture and Windows OS.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Pooling instance allocation strategy` created by `EmisonLu`, stating `The current instance allocation strategy in wasmtime allocates resources at instantiation time and deallocates them when the instance is dropped. I'm proposing an alternative mechanism where a pool of resources is created beforehand, and module instantiation reuses resources from this pool, returning them when the related instance is dropped. This proposed change and its specific requirements are detailed in the existing implementation of wasmtime's InstanceAllocationStrategy (https://docs.rs/wasmtime/latest/wasmtime/enum.InstanceAllocationStrategy.html).`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Porting OpenVINO on multiple platforms for the WASI-NN proposal in WasmEdge` created by `q82419`, stating `The goal is to integrate OpenVINO installation for multiple platforms like MacOS, Windows, or manylinux with the WasmEdge WASI-NN plugin. The tasks include surveying OpenVINO's installation guide on various platforms, implementing an automatic installation script on CI for multiple platforms, and integrating the OpenVINO runtime installation in WasmEdge. To apply for the LFX mentorship, submit the pre-test in #1752. Relevant links: [OpenVINO runtime official release](https://www.intel.com/content/www/us/en/developer/tools/openvino-toolkit/download.html), [OpenVINO Wiki](https://github.com/openvinotoolkit/openvino/wiki)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Support serialize and deserialize in WasmEdge` created by `q82419`, stating `WasmEdge needs to enable serializing and deserializing of the loaded WASM data to binary and vice versa, allowing for better control over the WASM binary, such as caching and snapshotting. The specific requirements are: 1. Design and implement a function to serialize the loaded WASM data structure into the WASM binary. 2. Design and implement a function to deserialize the serialized WASM binary back into the loaded WASM data structure. 3. Support binary segment removal during serialization. 4. Optimize the deserializing mechanism. For further details and references, see the appendix for the proposed solutions and related resources. To apply for the LFX mentorship, complete the pre-test in issue #1751.`?"}
{"completion":"The labels for this issue are `help wanted binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Please support std::io::Error` created by `L-jasmine`, stating ````markdown I suggest abstracting the error type definitions to allow seamless conversions between different error types. This would simplify error handling and interoperability with various libraries. Additionally, we can consider incorporating the `thiserror` crate to improve error handling ergonomics. I welcome feedback and suggestions on these proposals. ````?"}
{"completion":"The labels for this issue are `documentation good first issue help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `The example of thread proposal is missing in the WasmEdge book` created by `hydai`, stating `Move the thread proposal example from the `examples` folder to the WasmEdge book as a dedicated page that explains the example in detail.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `Bus error on MacOS in universal WASM format` created by `q82419`, stating `When installing WasmEdge 0.10.1 on MacOS and running the examples/wasm/fibonacci.wasm file in universal WASM format, a bus error occurs when using the AOT file (fibonacci_aot.wasm). However, using the shared library format (fibonacci_aot.dylib) produces the expected result. Expected Behavior: The universal WASM format in AOT should work on MacOS. Environment: - Architecture: x86_64 - Operating System: MacOS 10.15 Steps to Reproduce: 1. Install WasmEdge 0.10.1 on MacOS. 2. Run the fibonacci.wasm file in universal WASM format using wasmedgec. 3. Execute the compiled AOT files using the provided command: \"wasmedge --reactor fibonacci_aot.wasm fib 20\" and \"wasmedge --reactor fibonacci_aot.dylib fib 20\". I've observed a bus error when running the AOT file in universal WASM format on MacOS. The shared library format yields the expected result. I'm seeking a resolution to enable the AOT functionality for universal WASM format on MacOS.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `[Example] Add a WASI-crypto example` created by `q82419`, stating `We need a tutorial for creating a WASM program using wasi-crypto. Here are the key details: - Provide a rust source to utilize wasi-crypto and compile into wasm32-wasi target. - Demonstrate the use of WasmEdge with wasi-crypto plugin to run the WASM.`?"}
{"completion":"The labels for this issue are `enhancement help wanted priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `Add `serialize` and `deserialize` features to `Module` [Rust SDK]` created by `EmisonLu`, stating `Compiling wasm bytes into the `Module` can be time-consuming. Storing the first compiled `Module` locally can save time when using it again. To achieve this, adding `serialize` and `deserialize` features to the `Module` is proposed. This will enable calling functions in the same `Module` at different times without recompiling.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Host Function capability to call into Wasm Function` created by `neilhubertprice`, stating `Motivation: Host code may need to call Wasm functions, like __new(), to handle runtime issues, such as memory allocation for objects and handling strings. While it's achievable in WasmEdge to execute __new() for Wasm functions, the same approach fails for Host Functions, causing system segfaults when returning from a Host Function to a calling Wasm Function. Currently, with AssemblyScript, it's possible to pass strings into Wasm functions and return them, but not to return strings from Host function calls due to inability to allocate strings for return. Details: The issue seems to revolve around _Executer::runFunction_ and its impact on the stack state used by calling Wasm functions from within Host Functions. The author suggests that introducing a new method like _callFunction_, along with an API method, could enable Host Functions to call a function using the existing stack context, allowing for proper unwinding of frames upon return. This proposal aims to address the current issue and improve the handling of function calls within Host Functions.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Rust Tokio integration for asyncify` created by `juntao`, stating `The asyncify toolkit in Binaryen easily transforms Wasm bytecode apps for async/await operations. We want to demonstrate how to call asyncified Wasm functions from tokio or monoio frameworks. The goals are: - Running WasmEdge functions asynchronously from tokio - Calling host functions asynchronously from WasmEdge.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `[Feature] To support task-oriented stack switching proposal ` created by `apepkuss`, stating `Asynchronous computation is popular, and the community proposed the Task Oriented Stack Switching Proposal to support this in WebAssembly runtimes. WasmEdge Runtime could provide C APIs and data structures based on this proposal, enabling Rust/Go/Python bindings to offer async operations.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled ``wasmedge_http_req` does not support DELETE method ` created by `Ren-ZY`, stating `I need to implement the `delete_state` function in Rust Dapr SDK, which relies on the `DELETE` method in `wasmedge_http_req`. However, `wasmedge_http_req` currently does not support the `DELETE` method, only `GET`, `POST`, and `HEAD`.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Get involved with WinterCG and implement Web Platform API's` created by `mpcref`, stating `WinterCG aims to promote \"Web-interoperable Runtimes.\" As a prominent player in the JS runtime space, I believe our project should engage with this community to benefit the WasmEdge project through shared efforts. The community group focuses on enhancing API interoperability among JavaScript runtimes, especially non-browser ones, by discussing and proposing changes to web APIs and documenting runtime behaviors. More details can be found at https://blog.cloudflare.com/introducing-the-wintercg/. Could WasmEdge consider using txiki.js, a JS runtime built on QuickJS with many Web Platform APIs already implemented, as an alternative to QuickJS?`?"}
{"completion":"The labels for this issue are `enhancement good first issue help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `More Informative Error Message on Undefined Syscall` created by `hostilefork`, stating `Trying out WasmEdge with Emscripten's STANDALONE_WASM mode, I encountered a `fopen()` failure without clear insight. Comparing it with a Rust example, `File::open()` also failed without a `--dir` parameter. Attempting to debug WasmEdge, I found that the only I/O-related breakpoints hit were on `INode::fdWrite()`. Analyzing Rust's wasm output, I noticed the import of `path_open`, which was not present in the Emscripten-generated code; instead, it used `open_at`. I discovered that using a version of `clang` from wasi-sdk is necessary to translate `fopen()` to use WASI `path_open` instead of `open_at`. It would be helpful to receive more informative failure messages, such as warnings about missing functions like `__syscall_openat`. A possible solution could be a `--warn-unknown-calls` option to control such messages.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `Create WasmEdge Internal in Book` created by `hydai`, stating `We need to create clear documentation for developers who wish to contribute to WasmEdge. This should include articles on the WasmEdge architecture, internal data structures, and design choices. Additionally, we need to refine the existing 'extend' section to 'contributing'.`?"}
{"completion":"The labels for this issue are `feature priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `Create a Dapr JS SDK for WasmEdge` created by `juntao`, stating `WasmEdge aims to fully support node.js APIs, including http networking APIs, enabling node.js applications to run inside WasmEdge as Dapr sidecar services. This can be achieved by fully supporting the node.js HTTP API in WasmEdge QuickJS through the Rust internal module based on wasmedge_wasi_socket. Once implemented, the existing Dapr JS SDK should be able to run without any changes.`?"}
{"completion":"The labels for this issue are `help wanted feature priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `Create a Dapr Rust SDK for WasmEdge` created by `juntao`, stating `We aim to enable WasmEdge-based microservices to communicate directly with Dapr sidecars. Initially, we will utilize the wasmedge_http_req API for communication with the Dapr sidecar. In future iterations, we plan to leverage WasmEdge's Tokio-like async networking library for communication through the Dapr protocol.`?"}
{"completion":"The labels for this issue are `enhancement help wanted feature`.","prompt":"Can you assign labels to the GitHub issue titled `Support QUIC in the socket library` created by `juntao`, stating `WasmEdge now supports UDP, enabling potential support for QUIC. QUIC, an IETF standard, offers high performance compared to TCP.  Action Items: - Find a QUIC library for WasmEdge socket API. - Develop host functions to access the QUIC library. - Create Rust APIs for developers to manage QUIC connections in Wasm apps.`?"}
{"completion":"The labels for this issue are `priority:low platform-windows compiler-MSVC`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge 0.10.0 not working in windows` created by `Puellaquae`, stating `wasmedge.exe exits with code -1073740791 on Windows 10 Pro 21H2 19044.1706. Versions 0.10.0, 0.10.0-rc.1, 0.10.0-alpha-2 all fail to work. Executing wasmedge.exe yields no output. Expecting wasmedge.exe to execute successfully.`?"}
{"completion":"The labels for this issue are `enhancement good first issue help wanted priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `Support Node APIs in wasmedge-quickjs` created by `juntao`, stating `In WasmEdge, the most requested feature is full node.js compatibility. This involves implementing all node.js APIs in either JavaScript or Rust. The implementation status is being tracked in the wasmedge-quickjs repository. Node.js APIs can be implemented in JavaScript in the modules directory and in Rust / C in the src/internal_module directory. A priority matrix is in place to indicate the importance of each feature. The status, module name, language, and priority are being tracked for each feature. For example, the dns module has been implemented in rust/c/js and given a priority of 2. Conversely, the assert module is marked as done but has a priority of 0. This issue provides a comprehensive overview of the status and priority of each API, highlighting the ones still in progress, those that are done, and those that need testing. The primary aim is to achieve full node.js compatibility in WasmEdge, with specific focuses on implementing node.js APIs in JavaScript and Rust, updating the feature's implementation status, and prioritizing features based on their importance. Testing of specific modules is also essential for completion. The author specifically calls out the need for implementing node.js APIs and updating the feature's status, making it clear that these are the primary areas of focus for the issue.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Support HTTPS` created by `juntao`, stating `The WasmEdge WASI socket API currently lacks HTTPS and TLS support. While work on TLS support through wasi-crypto is underway, we propose creating a WasmEdge plugin to directly support a limited set of HTTPS operations, specifically GET and POST requests via C++ based host functions. We plan to expose these host functions as a Rust API for developers, integrating them into the wasmedge_http_req crate. Our approach allows for blocking requests and aims to address the current limitations.`?"}
{"completion":"The labels for this issue are `feature integration`.","prompt":"Can you assign labels to the GitHub issue titled `[Feature] Propose to provide an FVM implementation based on WasmEdge.` created by `CaptainVincent`, stating `Add more use cases and partnerships with our wasm engine. The FVM is a major update to the FileCoin network. This work will enhance the WasmEdge runtime to support FileCoin specific host functions and data structures. We will also enhance the WasmEdge Rust SDK to work with FVM’s integration points. We will provide node software release packages and documentation for the operator and developer communities to deploy WasmEdge-based FVM nodes.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Extensions] WasmEdge extensions and ecosystem collection` created by `q82419`, stating `We are extending host function capabilities in several areas:\r - Added WasmEdge-image and WasmEdge-tensorflow for image and TensorFlow support.\r - CLI tools are extended with WasmEdge-tensorflow-tools. \r - Our examples now include WasmEdge-go-examples and WasmEdge-WASINN-examples for reference.\r - Tests and benchmarks are available in WasmEdge-unittest.\r - New language bindings:\r    - Golang: WasmEdge-go\r    - Rust: wasmedge_process_interface, wasmedge_tensorflow_interface`?"}
{"completion":"The labels for this issue are `good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Coverage report for the WASI-NN` created by `q82419`, stating `The `proposal/wasi_nn` branch has passed unit tests but is lacking the coverage report. The goal is to enable the coverage report for codecov, encompassing both compilation with and without the wasi-nn openVINO backend.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `failed to instance.writeMemory: failed to Call allocate` created by `chris-aeviator`, stating `When running the reactr example with my compiled rust app as wasm, I encounter the error \"wasmedge runtime failed: wasm function not found, Code: 0x05\" on an x86 Arch Linux system. The error doesn't occur with a hello world example, so the expected outcome is a working program.`?"}
{"completion":"The labels for this issue are `enhancement feature`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-Socket: Handle IPv4, IPv6, and more protocols` created by `hydai`, stating `In the current design of the WASI socket, dealing with the size difference between `sockaddr_in` and `sockaddr_in6` in WASM memory is a concern. To address this compatibility issue, using `sockaddr_storage` as the new interface type is proposed. This will require handling the conversion between `sockaddr_storage` and `sockaddr_in | sockaddr_in6` in the host function implementation details, as well as defining the corresponding data structure on the Rust Crates Side.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] RecvFrom return sender address length` created by `L-jasmine`, stating `In the RecvFrom function, the InnerAddress should be written by wasmedge_wasi, not wasm. This address is the sender's address, so wasm doesn't know if it is ipv4 or ipv6.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] generate the standalone native binary executor without wasmedge` created by `cyw3`, stating `After compiling `hello.wasm` with `wasmedgec`, I aim to directly execute the `hello` binary without relying on wasmedge. This is beneficial for easier distribution and eliminates the need to install wasmedge separately. Additionally, it provides program protection similar to packing reinforcement. I'm inquiring if the project currently supports this functionality. Thanks!`?"}
{"completion":"The labels for this issue are `good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `A demo for proxy-wasm` created by `dm4`, stating `WasmEdge merged into proxy-wasm-cpp-host. A demo is needed to showcase support for proxy-wasm. Further details are pending.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Provide a wasm-compatible Rust TLS implementation` created by `juntao`, stating `The WasmEdge networking socket API currently supports TCP and HTTP connections, but HTTPS is not yet supported. The goal is to create a Rust TLS implementation based on the [rust-crypto](https://crates.io/crates/crypto) library to enable HTTPS support in WasmEdge. This involves reviewing Rustls and its use, understanding and utilizing the [wasi-crypto spec](https://github.com/WebAssembly/wasi-crypto), and implementing the TLS spec similar to Rustls using wasi-crypto. To be considered for the LFX mentorship, applicants must have experience with Rust, WebAssembly, and familiarity with crypto algorithms. Resources for reference include Rustls, wasi-crypto, rust-crypto, WasmEdge socket API, and WasmEdge HTTP examples.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Consider exposing C++ APIs as public interface?` created by `stdrc`, stating `After installation, only pure C APIs are available in the installed `include` directory, making it inconvenient to use in C++. Although it's possible to use C++ APIs by adding WasmEdge as a CMake subdirectory and linking against the `wasmedgeVM` library target, it becomes challenging when building and installing WasmEdge separately. Providing C++ APIs in the installed `include` dir would enhance convenience, eliminating the need to add WasmEdge source code to every project.`?"}
{"completion":"The labels for this issue are `good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `Support yew SSR in WasmEdge` created by `juntao`, stating `The [yew framework](https://yew.rs) enables creating web UI in Rust by compiling Rust code into WebAssembly bytecode, running inside the browser. It can also compile Rust to native machine code for a Rust-based web server (actix-web) for server-side rendering (SSR).  WasmEdge allows compiling Rust to WASM for server-side execution, offering safety and portability. The goal is to create a WasmEdge HTTP server for SSR in yew, as an alternative to actix-web + Rust native code stack. We achieved this with Percy framework, using wasm-bindgen library with modifications for dual browser and server execution. Check out the code at: https://github.com/KernelErr/wasmedge-ssr-test`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Provide a shared library with debuginfo` created by `spacewander`, stating `The installed shared library currently lacks debuginfo, making debugging unfriendly. The library is an ELF 64-bit LSB shared object and a stripped version is in use. An unstripped version may be bigger, but the impact is trivial in modern network environments and is crucial for saving developers' time.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Add GitHub Actions for SuperEdge` created by `alabulei1`, stating `Showcasing SuperEdge's capability to manage WasmEdge: - Create a new GitHub Action workflow for SuperEdge and WasmEdge   - How-to guide: https://github.com/superedge/superedge/commit/76529ca7cb23de1377a4027fe3ce4bb368acdc8a   - Place the new workflow on https://github.com/second-state/wasmedge-containers-examples/actions   - Add KubeEdge GitHub Actions workflows links to the SuperEdge chapter of the WasmEdge Book. Reference example:   - https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/kubernetes-containerd.yml`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Add GitHub Actions for KubeEdge` created by `alabulei1`, stating `Showcase the use of KubeEdge to manage WasmEdge by creating a new workflow with the following steps: 1. Follow the guide at https://wasmedge.org/book/en/kubernetes/kubernetes/kubeedge.html 2. Put the new GitHub Action workflow on https://github.com/second-state/wasmedge-containers-examples/actions 3. Add the KubeEdge GitHub Actions workflows links on the WasmEdge Book Example workflow: https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/kubernetes-containerd.yml`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Add GitHub Actions for OpenYurt` created by `alabulei1`, stating `I plan to showcase the usage of OpenYurt for managing WasmEdge, and have the following technical details and proposals: - Create a new workflow for OpenYurt and WasmEdge. You can refer to the guide at [WasmEdge Guide](https://wasmedge.org/book/en/kubernetes/kubernetes/openyurt.html). - Put the new GitHub Action workflow on [WasmEdge Containers Examples Actions](https://github.com/second-state/wasmedge-containers-examples/actions). - After that, add the OpenYurt GitHub Actions workflows links on the WasmEdge Book. An example workflow can be found at [Kubernetes Containerd Workflow](https://github.com/second-state/wasmedge-containers-examples/blob/main/.github/workflows/kubernetes-containerd.yml).`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `Wasmedge installation fails within alpine container on arm64 host` created by `redfave`, stating `I'm encountering an issue creating a docker image containing wasmedge on my Raspberry Pi. While it works on my x86 machine, building the docker image fails on the Raspberry Pi. Notably, installing wasmedge directly on the Raspberry Pi works fine. Environment: - Raspberry Pi 3B 1GB - Operating system: Ubuntu 20.04 x64 Steps to Reproduce: ```bash sudo buildah bud -t wasm-env-demo:latest ``` Dockerfile: ```Dockerfile ARG install_url=\"https://raw.githubusercontent.com/SAtacker/WasmEdge/alpine_fix/utils/install.sh\" FROM alpine:latest AS base RUN apk update && apk upgrade && apk --no-cache add bash curl wget coreutils git FROM base AS builder ARG install_url RUN curl -sSf ${install_url} | bash -s -- -V -p /usr/local ``` Expected: I expect to successfully install wasmedge within an Alpine container on an arm64 host. Error: The error occurs during the build at the step \"RUN curl -sSf ${install_url} | bash -s -- -V -p /usr/local\" with the exit status 126. Requesting: Please see --help. If the issue persists, make a trace using -V and submit it to the WasmEdge repository for further investigation.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement type imports proposal` created by `hydai`, stating `This issue pertains to the requirement for the GC proposal. The Type imports proposal enables Wasm modules to import type definitions, depending on #1123. The motivation and details are yet to be determined. Relevant Proposals: - GC Proposal: https://github.com/WebAssembly/gc - Typed function references Proposal: https://github.com/WebAssembly/function-references`?"}
{"completion":"The labels for this issue are `enhancement LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement typed function references proposal` created by `hydai`, stating `This is a requirement for the GC proposal. The Typed Function References proposal adds typed function references that allow direct calls without the need for tables. Motivations include efficient function calls, first-class function pointers, and exchange of function references between modules. Additionally, safe closures can be supported. The challenge involves understanding the Wasm Spec, reviewing the Typed Function References Spec, updating WasmEdge, adding an option for WasmEdge CLI, and implementing unit tests. Requirements for the LFX mentorship include experience with C++ and completion of challenge #1221. Links to the GC and Typed Function References proposals are provided for reference.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement GC proposal` created by `hydai`, stating `When compiling GC support languages into WASM, a major challenge is WASM's lack of GC support. To address this, we aim to implement the WebAssembly GC proposal. This involves implementing three proposals: \"reference types,\" \"1123,\" and \"1124.\" Once these are completed, we can progress to the GC proposal. Relevant links: [GraalVM issue discussion](https://github.com/oracle/graal/issues/3391), [GC Proposal](https://github.com/WebAssembly/gc).`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `feat: improving the performance of running rustpython` created by `hydai`, stating `Based on discussions from #996, we observed that running rustpython on WasmEdge is slower compared to other runtimes like wasmtime, even with ahead-of-time compilation: - WasmEdge 0.9.0: ~40s - Wasmtime: ~1s To address this, we need to: 1. Profile WasmEdge with rustpython workload and provide profiling reports. 2. Identify the bottleneck for this workload. 3. Enhance the WasmEdge runtime and ahead-of-time compiler for performance improvement. Minimum qualifications required for LFX mentorship: 1. Profiling tool experience: perf, gprof, oprofile, or valgrind. 2. C++ programming experience. 3. Complete challenge #1180.`?"}
{"completion":"The labels for this issue are `enhancement feature priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `[JS] Support the fetch API in the HTTP module` created by `juntao`, stating `The issue is about integrating QuickJS with WasmEdge and implementing features like module loading and asynchronous execution. The author suggests a structured upgrade plan for integrating QuickJS and highlights the importance of WebAssembly import and export functionality. They also mention a challenge with asynchronous execution and recommend exploring whether QuickJS can be adapted to support async execution within WasmEdge. Additionally, they propose defining a clear separation of concerns between module loading and script execution. The author seeks feedback and collaboration to address these technical aspects.`?"}
{"completion":"The labels for this issue are `Improvement priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `[JS] Refactor the NPM example to use rollup` created by `juntao`, stating `It currently uses NCC and depends on the CJS feature flag. We will standardize on ES6 modules using rollup.`?"}
{"completion":"The labels for this issue are `enhancement priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `[JS] remove the CJS compiler feature flag` created by `juntao`, stating `We'll use rollup.js to convert CJS modules to ES6 for direct use by WasmEdge.`?"}
{"completion":"The labels for this issue are `integration priority:high binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Research API calls used in FVM` created by `juntao`, stating `The FVM project utilizes the wasmtime SDK for its on-chain VM. We need to explore the specific wasmtime Rust SDK APIs it utilizes and figure out how we can seamlessly integrate the WasmEdge Rust SDK into the build system as a replacement. More information about the FVM project can be found here: https://filecoin.io/blog/posts/introducing-ref-fvm-a-new-fvm-website-and-the-early-builders-program/`?"}
{"completion":"The labels for this issue are `integration priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `[JS] provide performance measures for streaming SSR` created by `juntao`, stating `Can we use an existing benchmark or create our own benchmark for an I/O intensive test? We want to compare against Nextjs running in nodejs.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Create a comprehensive async networking example in JS` created by `juntao`, stating `The issue aims to showcase an I/O intensive application that can handle multiple concurrent requests using a single threaded app. Specifically, the application should listen for http requests, make outbound requests, and then respond. The main goal is to demonstrate the capability of handling multiple concurrent requests efficiently.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Update JS documentation` created by `juntao`, stating `\"Cover async networking and streaming SSR\" We need to address handling async networking and streaming server-side rendering (SSR). The main challenge is to ensure efficient communication between the server and clients in asynchronous operations. We also need to support seamless streaming of data for server-side rendering.  Proposed solutions include implementing async networking libraries and frameworks, exploring streaming SSR techniques, and optimizing data transfer protocols for asynchronous operations. Key technical details to focus on involve managing async requests, handling data streams efficiently, and integrating these capabilities into our SSR process. Could use support in identifying suitable libraries, best practices for async networking, and strategies for streaming SSR effectively.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Feature compare with W3C roadmap` created by `daixiang0`, stating `WasmEdge not showing in the https://webassembly.org/roadmap confuses users, especially with In-progress proposals.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `run wasm file report \"execution failed: out of bounds memory access, Code: 0x88\" after using wasmedgec --generic-binary` created by `zhouruisong`, stating `run wasm file reports \"execution failed: out of bounds memory access, Code: 0x88\" after using wasmedgec --generic-binary.  Expectation: Able to run wasm file after using wasmedgec --generic-binary. Environment: - Hardware Architecture: linux amd64 - Operating system: CentOS 7 - tinygo version 0.21.0 darwin/amd64 (using go version go1.17.3 and LLVM version 11.0.0) Steps to Reproduce: - Using \"wasmedgec --generic-binary pic2_lib.wasm 2.wasm\" fails. - Using \"wasmedgec --generic-binary pic2_lib.wasm 2.so\" is successful.`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `[Tinygo package] Support networking Socket` created by `alabulei1`, stating `Networking support is vital for edge computing. WasmEdge currently supports Networking Socket in Rust, and I propose adding support for Networking Socket in TinyGo, given its importance in cloud-native Edge Computing. Please share your thoughts on this issue.  Relevant link: https://github.com/second-state/wasmedge_wasi_socket`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Include shared libraries in the SDK releases` created by `DarumaDocker`, stating `\"When developing with Wasmer or Wasmtime SDK, the manual installation of libraries shouldn't be required. Currently, WasmEdge needs to be installed separately before using the SDK for languages like WasmEdge-go. It would be beneficial to find a way to include shared libraries directly in the SDK or compile them during SDK retrieval.\"`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `Pipe stdout and stderr ` created by `yanganto`, stating `When using multiple `WasmEdge` instances with `wasi`, the standard output gets mixed from different VMs. To address this, we need an option for `WasmEdge` to redirect standard IO to a different location. For applications like `Krustlet` collecting standard IO from multiple `WasmEdge` VMs with `wasi`, it would be beneficial to have the ability to customize the standard IO direction. The related code block can be found at: [Inode-Linux.cpp](https://github.com/WasmEdge/WasmEdge/blob/2389a7236371cb01f2237f93ee2849ac21ed69c9/lib/host/wasi/inode-linux.cpp#L121-L125)`?"}
{"completion":"The labels for this issue are `integration`.","prompt":"Can you assign labels to the GitHub issue titled `Integrate Apache EventMesh with WasmEdge` created by `qqeasonchen`, stating `The Apache EventMesh(incubating) is an event-driven distributed application runtime, suitable for cloudnative scenarios and could be integrated with WasmEdge. This integration is anticipated and would be beneficial for running Apache EventMesh in cloudnative environments. The Apache EventMesh project is found at [1]https://github.com/apache/incubator-eventmesh.`?"}
{"completion":"The labels for this issue are `feature Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[Go SDK] Support yield and resume` created by `juntao`, stating `We need to add support for `yield` and `resume` operations related to the host functions. This is related to issue #609.`?"}
{"completion":"The labels for this issue are `feature Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust SDK] Support yield and resume` created by `juntao`, stating `We need to add support for `yield` and `resume` operations related to host functions. We want to enable functionality similar to what's shown in the tokio examples at https://github.com/bytecodealliance/wasmtime/tree/main/examples/tokio. Related to issue #609.`?"}
{"completion":"The labels for this issue are `feature Improvement priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `[C API] Support yield and resume` created by `juntao`, stating `We need to support `yield` and `resume` operations for host functions. A host function can call `yield` to save the VM state and pass execution to the host, and then use `resume` to resume VM execution. The required APIs are: ```c void* WasmEdge_ResultPending(WasmEdge_VMContext*, WasmEdge_Result) void* WasmEdge_Yield(void* Data) WasmEdge_Result WasmEdge_VMResume(void* Data) void WasmEdge_VMInitFromFile(WasmEdge_VMContext*, char*) WasmEdge_Result WasmEdge_VMRun(WasmEdge_VMContext*, WasmEdge_String, WasmEdge_Value[], WasmEdge_Value[]) ``` An example use case involves defining a `HostFn` function, and an `main` function initializing the virtual machine. The code demonstrates registering a host function, instantiating a WebAssembly module, running a function, pending VM execution, and then resuming from the pending state. The proposed action includes integrating the provided example use case with the required APIs to enable `yield` and `resume` operations for host functions. The main technical challenge here is understanding and correctly implementing the `yield` and `resume` operations to manage VM state effectively.`?"}
{"completion":"The labels for this issue are `help wanted integration`.","prompt":"Can you assign labels to the GitHub issue titled `[Integration] Run Python programs in WasmEdge` created by `juntao`, stating `We can execute Python programs using RustPython on WasmEdge, which includes handling pip packages. Find more about it at https://rustpython.github.io/`?"}
{"completion":"The labels for this issue are `feature Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[Feat] Support seccomp` created by `juntao`, stating `We need to implement seccomp to isolate and limit the WasmEdge process, especially for AOT compiled binaries. This is vital for enhancing security and resource control.`?"}
{"completion":"The labels for this issue are `good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `[Community] Claim your WasmEdge Swag bag!` created by `alabulei1`, stating `Hey everyone, We've put together a WasmEdge swag bag to show our appreciation for developers who contribute to the WasmEdge Project. If you've contributed code, please fill out this form with your mailing address. You'll receive WasmEdge stickers, a badge, and a T-shirt as a token of our gratitude. Thanks for your contribution!`?"}
{"completion":"The labels for this issue are `enhancement help wanted Hacktoberfest priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `Performance bottleneck` created by `juntao`, stating `There's a performance issue in WasmEdge. To address it, follow these steps:  1. Build WasmEdge with the debug flag on as per the documentation. 2. Download two files: wasmedge_quickjs.wasm and index.js. 3. Run the application using the following command. It takes 5 minutes to return a result: ```bash wasmedge --dir=.:. wasmedge_quickjs.wasm index.js ``` 4. Profile the application using a tool like gperftools.`?"}
{"completion":"The labels for this issue are `binding-python`.","prompt":"Can you assign labels to the GitHub issue titled `[PySDK] SDK Implementation Discussion` created by `SAtacker`, stating `Implementing the PySDK involves considering the appearance and functionality of the SDK. It should leverage Python's advantages and not just translate C code. For instance, in the Python version, log level settings should use optional parameters and utilize objects. A top-down approach is essential for design, with the main module housing a WasmEdge object that initializes required elements. Functionalities should include callables, proposal activation, default module validation, and reactor mode arguments. Additionally, wrapping other functionalities as individual functions is recommended. Resources: - [WasmEdge Documentation](https://satacker.github.io/WasmEdge/) - [Issue Tracking](https://github.com/WasmEdge/WasmEdge/issues/396#issue-992592879)`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Feat: Support max gas for each VM instance` created by `juntao`, stating `A unique feature of WasmEdge is the ability to compute \"gas\" consumed for each VM instance. We want a way for VMs to stop once a certain amount of gas is exhausted. In the \"WASI\" config options, the user can optionally specify the amount of gas available to this instance. The VM instance stops once the gas is exhausted.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Support Wasm-C-API proposal` created by `q82419`, stating `\"This issue focuses on implementing the WASM-C-API proposal in the workspace. We're looking to support this proposal and address the challenges it presents. Key technical details include integrating the proposal into the existing codebase and ensuring compatibility. We need to explore potential solutions and handle any complexities that may arise during this process.\"`?"}
{"completion":"The labels for this issue are `enhancement help wanted LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Feat: Support Wasm-Signature proposal` created by `hydai`, stating `The primary goal is to enable verification of WebAssembly modules through embedded digital signatures. This will be achieved by implementing the Wasm-Signature proposal, providing 'sign' and 'verify' features in WasmEdge. The proposal involves following the spec of the Wasm-Signature proposal, using the \"Sign all bytecode\" option, implementing 'sign' and 'verify' features in the WasmEdge command line tool, adding unit tests and coverage, as well as creating a demo kit with specific commands for signing and verifying. Additionally, relevant resources include the Wasm-Signature proposal and existing tools like WasmSign and wasm-sign.`?"}
{"completion":"The labels for this issue are `enhancement help wanted LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Feat: Support Wasm-C-API proposal` created by `q82419`, stating `The wasm-c-api proposal aims to provide the C and C++ API for WASM runtimes. While WasmEdge already has a C API, it's important to implement the wasm-c-API proposal for broader support. Currently, non-runtime data structures have been implemented on the proposal/wasm_c_api branch. The next steps involve completing the runtime implementation according to the specified tasks: 1. Follow the spec of the wasm-c-api proposal and work on the proposal/wasm_c_api branch. 2. Implement the WASM C/C++ API by calling the WasmEdge classes or WasmEdge C API. 3. Add customized `wasm_config_t` functions for runtime configurations. 4. Complete the Wasm C/C++ API unit tests for coverage. 5. Ensure passing the WASM core tests without the SIMD proposal. Relevant links: - WASM C API proposal: [WebAssembly/wasm-c-api](https://github.com/WebAssembly/wasm-c-api) - WASM spec core tests: [WebAssembly/spec/tree/master/test/core](https://github.com/WebAssembly/spec/tree/master/test/core)`?"}
{"completion":"The labels for this issue are `enhancement help wanted Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Feat: Add Logging /Metrics/Tracing Capabilities` created by `MChorfa`, stating `As an SRE, I need to monitor, trace, and report the performance of my workloads running on the edge. This can be achieved by adding logging, tracing, and metrics reporting capabilities. Specifically, I propose allowing logging and tracing as per the opentelemetry-specification at [https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/overview.md], and enabling metrics reporting through a node exporter and endpoints such as /healthz and /metrics. An example implementation can be found at [https://github.com/boxkite-ml/boxkite/tree/master/boxkite/monitoring]. Thank you!`?"}
{"completion":"The labels for this issue are `invalid`.","prompt":"Can you assign labels to the GitHub issue titled `Rename the project` created by `syrusakbary`, stating `To whom it may concern, I'm Syrus Akbary, CEO and Founder of Wasmer, Inc. We own [wasmedge.com] and have been filing trademarks since December 2020. Your usage of \"WasmEdge\" clashes with our name. Please consider changing the project name to avoid conflicts. Best, Syrus`?"}
{"completion":"The labels for this issue are `enhancement invalid`.","prompt":"Can you assign labels to the GitHub issue titled `Support TLS2` created by `Avey777`, stating `Upgrade to TLS 2. Received a TLSv1 alert internal error when running curl command with OpenSSL/3.0.11. Action needed to address the SSL internal error. Relevant link: https://github.com/curl/curl/issues/10002`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `bug: `--nn-preload` option doesn't work with the latest version of WasmEdge (v0.13.5)` created by `sohankunkerkar`, stating `When running the Llama 2 inference model locally, following the specified instructions, I encountered an error with the command-line options. Specifically, the `--nn-preload` option was not recognized, even though I confirmed that I was using the correct version of `wasmedge`. Additionally, I checked the help documentation and did not find any mention of this option. Possible Solution: It seems that the `--nn-preload` option is not supported or may require specific configuration. I need clarification on whether this feature is supported in the current version or if there are alternative options to achieve the intended functionality.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: possible version mismatch in script: utils/wasi-nn/install-openvino.sh` created by `jaykchen`, stating `When running the container with the script install, an error occurs. Changing the version from `openvino-2023.2.0` to `openvino-2023.0.2` resolves the error. The issue could be related to the `install-openvino.sh` script. No other logs or information are available. Operating system is Ubuntu 22.04, and hardware architecture is amd64.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support `frequency penalty` in wasi-nn_ggml plugin` created by `apepkuss`, stating `To use the OpenAI chat completion API, adding support for the optional `frequency_penalty` is necessary in some cases. The current support includes `repeat-penalty` and `presence-penalty`, but adding support for `frequency-penalty` would improve compatibility with the OpenAI API. The definition of `frequency_penalty` in the OpenAI chat completion API can be found [here](https://platform.openai.com/docs/api-reference/chat/create#chat-create-frequency_penalty).`?"}
{"completion":"The labels for this issue are `enhancement c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support embedding mode in WASI-NN ggml plugin` created by `hydai`, stating `llama.cpp needs to support embedding vector retrieval for users of the WASI-NN ggml plugin. To implement this, we should add an option in the metadata to enable the embedding mode and return the embedding vector inside the metadata field. Check the embedding.cpp file in the examples directory for reference.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Support `top_p` and `presence_pennalty` configure in the ggml plugin` created by `alabulei1`, stating `This feature request pertains to the absence of `top_p` and `presence_penalty` support in the LlamaEdge framework, leading to incompatibility with popular web chatbot UI frameworks like ChatGPTNextWeb and Lobe Hub. The user provides an example JSON payload to illustrate the issue. The request is to add support for these parameters within the LlamaEdge framework to enable its usage with the specified web chatbot UI frameworks. Example: ```bash -d '{         \"messages\": [{\"role\": \"user\", \"content\": \"李白 诗仙代表作\"}],         \"model\": \"Mixtral-8x7B-Instruct-v0.1\",         \"temperature\": 0.7,         \"stream\": true,         \"presence_penalty\": 0,         \"frequency_penalty\": 0,         \"top_p\": 1         }' ````?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Unnecessary copy of full module when loading` created by `q82419`, stating `After applying the component model loader (#3036), the function creates a unique pointer and loads from a file/bytes. However, the function currently returns a raw pointer from the unique pointer, causing a full module copy and overhead. This should be fixed before the 0.14.0 release. No reproduction steps provided. Using WasmEdge version: master, C SDK, on Ubuntu 20.04 x86_64.`?"}
{"completion":"The labels for this issue are `enhancement priority:high c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Upgrade to OpenVINO API 2.0` created by `hydai`, stating `PR #3128 will introduce the grpc service into the WasmEdge repository. However, due to conflict with the grpc package and OpenVINO, upgrading OpenVINO to a newer version is required. After upgrading, another issue arose, mandating an upgrade to the Inference Engine API. The older API will be deprecated in the `2024.0` version. Please follow the official OpenVINO guide for the upgrade. Ref: [OpenVINO Transition Guide](https://docs.openvino.ai/2022.3/openvino_2_0_transition_guide.html)`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: labeler is not working when bumping to v5` created by `hydai`, stating `GitHub Action labeler v5 has introduced breaking changes from v4, causing failures in all labeler workflows. To resolve this, we need to modify the labeler.yml file. Currently, the labeler workflow fails, and the expected state is for it to function properly. To reproduce the issue, check the latest PR as the labeler is no longer working. No logs or compiler flags to share. The WasmEdge version used is master, and the operating system information and hardware architecture are GitHub CI. The proposed solution is to update the labeler.yml to resolve the breaking changes in v5.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: CI failed at plugins (manylinux2014_x86_64-plugins-deps, g++, Release)` created by `dm4`, stating `The CI failed due to an OpenSSL error while finding the OpenSSL root folder. The job requires setting the path to OpenSSL root folder in the system variable OPENSSL_ROOT_DIR. The expected state is for the CI to pass. The author recommends creating a PR and waiting for the completion. The WasmEdge version used is the latest, and the operating system is manylinux2014 with hardware architecture x86_64. There are no logs or response, and the issue falls under \"Others.\"`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-NN GGML backend show token per second when using `compute_single()`` created by `dm4`, stating `The `compute_single()` function needs to print the performance table. I suggest adding the print statement to `fini_single()` when log is enabled.`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-NN GGML backend need supports for `--thread` option` created by `dm4`, stating `Need to add support for the `--thread` option for the ggml backend. No details available.`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-NN GGML backend handled prompt too long at set_input` created by `dm4`, stating `When calling `set_input()` with long prompt text, it throws `ErrNo::InvalidArgument`. To avoid this, I propose moving the prompt length check to `compute()` and adding `ErrNo::PromptTooLong`.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Download error from urllib: HTTP Error 404: Not Found` created by `stackermans`, stating `The install script is unable to find the required WasmEdge plugin at the specified URL. The command `curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --plugins wasi_nn-ggml` is expected to install the plugin, but it fails due to a 404 error on the download link. This issue occurs on OSX with WasmEdge version 0.13.5 and hardware architecture arm64 (M2). The author suggests investigating and resolving the plugin download issue.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: The windows-MSVC job in the test wasmedge core workflow fails always` created by `jaydee029`, stating `The Windows-MSVC job in the test wasmedge core workflow fails for all recent PRs, even when there are no specific changes for that platform. This issue has been observed since the AOTcore and apiAOTcore files were edited two weeks ago. The workflow is expected to pass correctly. To reproduce, make a PR that invokes the Windows-MSVC test. The affected component is Others/ci, and the WasmEdge version used is the latest at this moment.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Failed to run `tinyllama-1.1b-chat-v0.3` with the `wasi-nn` plugin of `0.13.5`` created by `apepkuss`, stating `The new update of the `wasi-nn` plugin (b1656) is causing issues running `tinyllama-1.1b-chat-v0.3` on Ubuntu-22.04 and macOS-14.2 (M1 Pro). The sha256sum values for the latest and old `wasi-nn` plugins are as follows: - Latest version: 63220211418ffbac339b5beb934fe24e845bae6735980705c2f0389d2c48f81d - Old version: 1025c310976d3e7944a39e27c830f485eaa5f7518ce275a25d7735d0361bb386 Reproduction Steps: - Install WasmEdge 0.13.5 + ggml plugin of the latest version. - Download and run the required models. ``` curl -LO https://huggingface.co/second-state/TinyLlama-1.1B-Chat-v0.3-GGUF/resolve/main/tinyllama-1.1b-chat-v0.3.Q5_K_M.gguf curl -LO https://github.com/second-state/llama-utils/raw/dev/chat/llama-chat.wasm ``` - Check the version by running `wasmedge llama-chat.wasm -V`. - Run the model using the specified command. The issue persists without any response.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-linux c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled ``fd_filestat_set_times` with a large timestamp leads to errno `inval`` created by `yagehu`, stating `Calling `fd_filestat_set_times` with a very large timestamp returns errno 28 (inval) in WasmEdge, whereas it succeeds in other runtimes. This occurs specifically when the timestamp is larger than int64 max, like `13136941795642118959`. To reproduce, run the provided WAT with wasmedge, which exits with error 28 (inval). There is no response in the current or expected state. The issue is observed on Fedora 39 amd64 with WasmEdge version d1a4df1827f789cc109fdbc66e2ae8dc35fa7008.`?"}
{"completion":"The labels for this issue are `invalid c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Can not open the directory?` created by `Userzxcvbvnm`, stating `The issue involves a test program failing to delete a subdirectory in the specified directory using WasmEdge. The expected outcome is to successfully delete the file and the subdirectory named tmpdir. The user also compares this behavior with what wasmer does and provides relevant technical details such as reproduction steps, screenshots, software versions, operating system information, hardware architecture, and compiler flags. The user also includes the c and wasm file links for reference. Reproduction steps: Use the command `wasmedge --dir=./Data test.wasm` to reproduce the issue. The user used WasmEdge version 0.13.4 on Ubuntu 20.04 with hardware architecture x86_64 and compiled the c file into a wasm file using clang.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Community] Nominate 王纪开(@am009) as WasmEdge Reviewers` created by `hydai`, stating `Dear community, I am nominating a new reviewer, 王纪开(@am009), for the WasmEdge community. He contributed significantly with his work on [MSVC support](https://github.com/WasmEdge/WasmEdge/pull/2751). I kindly ask for approval from other maintainers. Please leave your comments and decision below. Best regards, hydai`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] ggml: update ggml to b1614, fix llama context initialization` created by `dm4`, stating `[WASI-NN] In ggml, initialize repeat-penalty and temp, and avoid saving llama_context, instead reset it every time. Also, update ggml to b1616.`?"}
{"completion":"The labels for this issue are `bug platform-macos c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Failed to clean up all installed files` created by `apepkuss`, stating `The `uninstall.sh` script did not remove all installed files on macOS after uninstalling. After installing `WasmEdge` and `wasi_nn-ggml` using the command provided, running the uninstall script did not completely remove the installed directories and files, leaving the directory structure intact. The uninstall command failed to remove the `ggml-metal.metal` file. This issue occurred on macOS 14.1.1 with WasmEdge version 0.13.5 on an Apple M1 Pro architecture.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] ggml: add repeat-penalty and temp` created by `dm4`, stating `Issue: Fix #3071 Description: I have observed unexpected behavior in the login process. After entering valid credentials, the application fails to authenticate the user and returns an error message indicating authentication failure. This issue is affecting multiple users and needs to be addressed promptly. Technical Details: - The issue occurs specifically when the system attempts to validate the user credentials against the database. - The error message received by the users is \"Authentication failed. Please try again.\" - The issue is not consistent and occurs intermittently, making it challenging to reproduce on demand. Proposed Solution: - Investigate the authentication process to identify potential causes of intermittent failures. - Review the database interaction to ensure accurate validation of user credentials. - Implement robust error logging to capture detailed information when authentication failures occur. - Consider implementing retry mechanisms to handle intermittent authentication failures gracefully. Challenges: - The intermittent nature of the issue makes it difficult to pinpoint the root cause. - Ensuring that any changes made do not impact the overall performance of the authentication process is crucial. - Coordinating efforts to address this issue promptly, considering its impact on multiple users. Request: - Prioritize investigation and resolution of this issue due to its wide impact on user experience. - Request collaboration from team members with expertise in authentication processes and database interactions. This captures the key technical details and proposals while maintaining the original perspective and tone.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/setup-java from 3 to 4` created by `dependabot[bot]`, stating `The issue requests the upgrade of [actions/setup-java](https://github.com/actions/setup-java) from version 3 to 4.0.0. The new version includes updates to the Node.js runtime, dependencies, and support for Microsoft OpenJDK 21.0.0. The release also introduces breaking changes regarding the Node.js runtime version. The repository's full changelog and details on new contributors are available for further review. Additionally, Dependabot compatibility is highlighted, providing the necessary commands for its management. Key Actions: - Upgrade [actions/setup-java](https://github.com/actions/setup-java) to version 4.0.0 - Review and address breaking changes related to the Node.js runtime - Consider the impact of the updated dependencies and support for Microsoft OpenJDK 21.0.0 - Manage Dependabot actions using the provided commands.`?"}
{"completion":"The labels for this issue are `enhancement feature`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Support for the `--repeat-penalty` option of llama.cpp` created by `apepkuss`, stating `The `--repeat-penalty` option is required for the `MistralLite-7B` model when running it with `llama.cpp`. This option penalizes repeat sequences of tokens. Use the following command to run `mistrallite.Q4_K_M.gguf`: ```console ./main -ngl 32 -m mistrallite.Q4_K_M.gguf --color -c 2048 --temp 0.7 --repeat_penalty 1.1 -n -1 -p \"<|prompter|>{prompt}</s><|assistant|>\" ``` Find the model card for `TheBloke/MistralLite-7B-GGUF` here: https://huggingface.co/TheBloke/MistralLite-7B-GGUF`?"}
{"completion":"The labels for this issue are `question c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `question: Function type check of WASI proc_exit` created by `unicornt`, stating `I noticed that WasmEdge does not check the type of wasi function when importing them. I am curious about why it is not checked and how WasmEdge calls the wasi function with the wrong type.\r \r The provided code error when run in the terminal with `wasmedge case.wasm` and returns `0`. Other runtimes also throw the same error.  [code reference and image provided]`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Google colab: /bin/bash: line 1: wasmedge: command not found` created by `taozhiyuai`, stating `I tried to run Yi-34B on Google Colab following the instructions from \"https://www.secondstate.io/articles/yi-34b/\". Steps 1 to 3 are fine, but I'm getting an error \"/bin/bash: line 1: wasmedge: command not found\" at step 4. Can anyone help? Thanks! ![1](https://github.com/WasmEdge/WasmEdge/assets/146583103/fbcd013c-dec3-4e78-ae98-d4e3ecd9be21)`?"}
{"completion":"The labels for this issue are `c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `Update Cargo.toml to fix the breaking issue` created by `saiyam1814`, stating `Solves #3064 When generating the API documentation, the table of contents isn't being displayed correctly. The issue arises because the table of contents uses anchor links that aren't being generated for headings with special characters. The proposal is to modify the anchor generation to handle special characters and ensure that the table of contents is displayed accurately in the API documentation. The challenge will be identifying an approach that can accommodate special characters in the anchor links while preserving the integrity of the documentation structure. This improvement is necessary to enhance the usability of the API documentation and provide a more seamless navigation experience for users.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: <wasi-logging plugin  exmple not working>` created by `saiyam1814`, stating `The Crogo.toml file is at version 0.11, but when attempting `cargo build`, it requests an update to 0.15. Upon doing so, it fails with the following errors:  ``` error: failed to parse package: /Users/saiyam/git/WasmEdge/examples/plugin/wasi-logging/wit Caused by:     expected ';', found '}'          --> /Users/saiyam/git/WasmEdge/examples/plugin/wasi-logging/wit/logging.wit:35:1 error[E0433]: failed to resolve: use of undeclared crate or module `wasi` ``` This issue occurs when building `wasi-logging-example` using `cargo build --target wasm32-wasi`. My goal is to resolve the errors and achieve a successful build.`?"}
{"completion":"The labels for this issue are `bug c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `bug: cannot run Yi-34B` created by `dinfer`, stating `I cannot run Yi-34B as per the steps in this post: https://www.secondstate.io/articles/yi-34b/ When running the command: ```bash wasmedge --dir .:. --nn-preload default:GGML:AUTO:Yi-34B.Q5_K_M.gguf llama-chat.wasm -p Yi-34B ``` I receive the error: ```bash error: invalid value 'Yi-34B' for '--prompt-template <TEMPLATE>'   [possible values: llama-2-chat, codellama-instruct, mistral-instruct-v0.1, mistrallite, openchat, belle-llama-2-chat, vicuna-chat, chatml, baichuan-2, wizard-coder, zephyr, intel-neural] ``` Reproduction steps:  Run the commands step by step in the official post: https://www.secondstate.io/articles/yi-34b/ WasmEdge Version used: 0.13.5 OS: macOS Sonoma 14.1.1 Hardware Architecture: Apple M2 Pro`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: libwasmedgePluginWasiNN.so: undefined symbol: cblas_sgemm` created by `mabushey`, stating `I followed the tutorial to install Wasmedge via the provided command. When running a command to use Orca, an error occurred with the message \"undefined symbol: cblas_sgemm.\" The expected state is no error. To reproduce the issue, build with specific options, execute using certain flags and inputs, and then observe the error. Relevant details:  - Wasmedge version 0.13.5 - Arch Linux OS - x86_64 hardware architecture.`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Plugin c-Test c-CI c-Example c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `Proper  initialization of DLInfo` created by `khagankhan`, stating `Issue: Fixed https://github.com/WasmEdge/WasmEdge/issues/3014 Original Content: \"Issue tracking for memory leak should be fixed.\" Refined Summary: Memory leak fix.`?"}
{"completion":"The labels for this issue are `bug good first issue platform-windows c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Maybe a writing error ?` created by `Userzxcvbvnm`, stating `Using `wasmedge --dir=./Data write.wasm`, when running the wasm file, the file fd is successfully obtained with a current offset of 0. However, despite having nothing to write in the buffer, the start value is 50, exceeding the file size of 33 bytes. It is expected for the file size to expand to 50 bytes, similar to the behavior in wasmtime. The issue occurs on WasmEdge version 0.13.4 running on Windows 10 with an amd64 architecture, compiled from the C file using clang. The reproduction steps entail uploading the wasm file and executing it using `wasmedge run --dir=./Data write.wasm`.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] ggml: update ggml & refactor ggml dependency` created by `dm4`, stating `Use FetchContent to download the ggml source and apply the patch. Then, update the ggml version and corresponding backend. Remove the `clear-context` option and reset context after each `compute()`. Also, set output metadata (`input_tokens`, `output_tokens`) at output with index 1. A related pull request is available [here](https://github.com/second-state/WasmEdge-WASINN-examples/pull/72).`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `test pr` created by `jaydee029`, stating `this is a test pr`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Fix failures on wasi testsuite` created by `ibmibmibm`, stating `- Validate `filestat_set_times` for improper flags - Validate buffer size in `fd_prestat_dir_name` - Correct `path_open` for handling file rights relative to paths - Address `path_open` issue with validating `O_TRUNC` rights - Rectify `path_readlink` to avoid following symbolic links - Resolve issue in `path_unlink_file` related to trailing slash paths and unsupported \".\" paths in unix `rmdir``?"}
{"completion":"The labels for this issue are `bug good first issue c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled ``sock_shutdown` a closed fd segfaults` created by `yagehu`, stating `Calling `sock_shutdown` after closing a file descriptor using `fd_close` causes wasmedge CLI to segfault. Reproduction Steps: ```wat (module   (import \"wasi_snapshot_preview1\" \"sock_shutdown\" (func $sock_shutdown))   (import \"wasi_snapshot_preview1\" \"fd_close\" (func $fd_close))   (func $_start     (call $fd_close (i32.const 2))     (call $sock_shutdown (i32.const 2) (i32.const 27) (i32.const 1337))   )   (memory 2)   (export \"memory\" (memory 0))   (export \"_start\" (func $_start)) ) ``` Build: `wat2wasm shutdown.wat -o shutdown.wasm` Execute: `wasmedge shutdown.wasm` Error: `Segmentation fault (core dumped)` Components: CLI WasmEdge Version: 0.13.5 OS: Fedora 39 Arch: amd64`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled ``fd_renumber` on same fd segfaults` created by `yagehu`, stating ``fd_renumber` leads to a segmentation fault when used on the same source and destination file descriptors. This occurs with various file descriptors, such as stdin/out/err. To reproduce, the provided code can be built and executed, resulting in a segmentation fault. This issue pertains to WasmEdge 0.13.5 on Fedora 39 amd64, using the CLI and wasm. The author requests clarification on the cause of this segmentation fault and seeks a solution to address this issue.`?"}
{"completion":"The labels for this issue are `c-CLI`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] component model loading` created by `dannypsnl`, stating `Issue #2943: Loading 1. Involves the function `loadPreamble`. 2. Concerns the function `loadVec<SectionType>(vector, F)` for loading vectors. 3. Involves using `Expect<std::optional<T>> loadOption(std::function<Expect<void>(T &)> F)` to load syntax like `t?:<valtype>?`. Let's address the issues related to loading, particularly with the functions `loadPreamble` and `loadVec<SectionType>`, along with utilizing `loadOption` for specific syntax loading like `t?:<valtype>?`.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `question: plans to support other Rust libraries that require WASI functions that are not supported` created by `font`, stating `I encountered an error running a web app with the WASI platform. The specific error I received was: \"Failed to compile Tera template: operation not supported on this platform.\" I suspect this error is due to an unsupported Rust standard library file system API needed by the Tera template engine library, like `std::fs::canonicalize` API. I have a few questions and concerns: - Is the analysis of encountering an unsupported function in a library dependency resulting in the \"operation not supported on this platform\" error correct? - Are there plans to add WASI support for more Rust library dependencies to aid building Wasm server-side applications? - How should we handle maintaining forks of library dependencies for porting them to WASI in the long term? Do we expect library authors to maintain WASI support within their projects?`?"}
{"completion":"The labels for this issue are `enhancement c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Retrieving the number of tokens from the `wasi-nn-ggml` plugin` created by `apepkuss`, stating `In the context of multi-turn conversations, we need to dynamically update the chat history by considering the number of tokens in user queries and assistant responses. As the chat history grows, we need to maintain a specified size, which determines when older messages are removed. This removal depends on the context size and the number of tokens in each message. There's a need to compute the number of tokens for user queries, assistant responses, and the overall chat history. This data is crucial for OpenAI-compatible chat responses and adjustments in AI service frontends. The current capability of the `wasi-nn_ggml` plugin does not support obtaining the number of tokens for each message. To address this, we require support in `llama.cpp` for computing and storing the mentioned statistics.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] ggml: support load_by_name_with_config` created by `dm4`, stating `When the graph builder length is greater than 1, the metadata for builder[1] is now a json string. We must continue to support setting metadata from set_input with index 1 for backward compatibility. Additionally, we now support passing the model parameter from the command line interface, currently only supporting `n-gpu-layers`. The example for this is: `--nn-preload default:GGML:AUTO:llama-2-7b-chat.Q5_K_M.gguf,ngl=99`. We need to move parameters to `struct Graph` and move `LlamaContext` to `struct Context`.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Plugin not compatible: manylinux2014x86_64wasi_nn-ggml-cuda on amazon linux 2` created by `richzw`, stating `We encountered an error while installing WasmEdge in Amazon Linux 2 using the command:  ```bash curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- --plugin wasi_nn-ggml ``` The error message \"Plugin not compatible: manylinux2014x86_64wasi_nn-ggml-cuda\" was displayed. We are using WasmEdge version 0.13.5 and the Linux kernel version is 5.10.186-179.751.amzn2.x86_64. We need assistance in resolving the compatibility issue with the plugin.\"`?"}
{"completion":"The labels for this issue are `documentation question`.","prompt":"Can you assign labels to the GitHub issue titled `question: https://wasmedge.org/docs/develop/deploy/podman/#prerequisites missing crun instructions` created by `nareddyt`, stating `It seems like the instructions for step 3 might be incomplete. There could be a need for a git clone step similar to the one mentioned in the oci-runtime/crun section. Specifically, the need is to build and configure crun with WasmEdge support, followed by configuring and building a crun binary with WasmEdge support. No response has been received on this matter.`?"}
{"completion":"The labels for this issue are `invalid`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different output when running the same wasm file` created by `XinyuShe`, stating `I created a WASM file and noticed that when running it with WasmEdge, the output for a floating-point number is different compared to other runtimes like Wasmtime and Wasmer. Specifically, the value 78488.55 is rounded to one decimal place, resulting in 78488.5 in WasmEdge, while it gives 78488.55 in other runtimes. The expected behavior is for WasmEdge to produce the same output as the other runtimes. Here are the reproduction steps for checking versions and running the WASM file with each runtime: - Check versions: `wasmtime --version`, `wasmer --version`, `wamrc --version`, `iwasm --version`, `wasmedge --version` - Run WASM file:   - WasmEdge: `wasmedge --reactor filea232.wasm main`   - Wasmtime: `wasmtime --invoke main filea232.wasm`   - Wasmer: `wasmer run filea232.wasm -i main --cranelift`   - Wamr: `iwasm --heap-size=0 -f main --llvm-jit filea232.wasm` Versions used: - WasmEdge: version 0.13.4 - Docker: version 24.0.5, build ced0996 - Operating system: Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) I would like the output of WasmEdge to match that of other runtimes.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Remove render:bash from the bug report template` created by `hydai`, stating `The issue prevents adding code blocks on users' input. It's causing a problem with the input handling. We need to find a way to allow code blocks in user input. This may involve reviewing our input handling process and identifying the specific restrictions preventing code blocks.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `bug: AWS Sample not working` created by `barum`, stating `I followed all the instructions, but the AWS sample does not work locally. Received error messages indicate problems with external agents and undefined properties. No response when attempting to prompt expected state. Reproduction steps and logs not provided. Using WasmEdge version 0.13.5. Operating system: Mac. Hardware Architecture: arm64. No response for compiler flags and options.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-arm64 c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `bug: free(): invalid pointer on Raspberry Pi` created by `Tenderyi`, stating `I followed the tutorial at https://blog.stackademic.com/fast-and-portable-llama2-inference-on-the-heterogeneous-edge-a62508e82359, and encountered a \"free(): invalid pointer\" error, causing immediate abort.  Expected behavior: Display the word \"Question:\" on the screen. Reproduction steps: ```bash 1. Download the following files: wasmedge-ggml-llama-interactive.wasm, llama-2-7b-chat.Q5_K_M.gguf 2. Run 'wasmedge --dir .:. --nn-preload default:GGML:CPU:llama-2-7b-chat.Q5_K_M.gguf wasmedge-ggml-llama-interactive.wasm default' 3. Encounters \"free(): invalid pointer\" error ``` Components: CLI WasmEdge Version: 0.13.5 Operating system: Linux raspberrypi 5.4.72-v8 Hardware architecture: aarch64`?"}
{"completion":"The labels for this issue are `bug invalid`.","prompt":"Can you assign labels to the GitHub issue titled `bug: free(): invalid pointer on Raspberry Pi` created by `Tenderyi`, stating `I tried running the command from the tutorial on a Raspberry Pi 3 Model B+ with wasmedge version 0.13.5. The command `wasmedge --dir .:. --nn-preload default:GGML:CPU:llama-2-7b-chat.Q5_K_M.gguf wasmedge-ggml-llama-interactive.wasm default` resulted in a \"free(): invalid pointer\" error. The device architecture is aarch64.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] remove or upgrade macOS 11 to 12` created by `dannypsnl`, stating `This should address the performance issue with macOS CI. And, 11 is unsupported via Apple too. Should fix #3013.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled ` Different output when running the same wasm file` created by `XinyuShe`, stating `I created a wasm binary with an exported function \"main\" and compared its outputs in different runtimes. There are two issues: the first output is -nan and the seventh output is different in WASMEDGE compared to others. I expect WASMEDGE to produce the same output as other runtimes. To reproduce, compile the wasm file and then run the command \"wasmedge --reactor filea6.wasm.so main\". Details: WASMEDGE version 0.13.4, Ubuntu 22.04.3 LTS, Docker version 24.0.5, build ced0996.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64 compiler-llvm`.","prompt":"Can you assign labels to the GitHub issue titled `Potential Uninitialized Memory Usage in WasmEdge` created by `khagankhan`, stating `A MemorySanitizer warning is triggered when running a WasmEdge tool with a specific .wasm file. The warning indicates a use-of-uninitialized-value within the std::filesystem::path destructor, which is invoked in the WasmEdge::Plugin::Plugin::getDefaultPluginPaths[abi:cxx11]() function. The issue may be related to in WasmEdge/lib/plugin/plugin.cpp: ```C++ auto LibPath = std::filesystem::u8path(DLInfo.dli_fname).parent_path().lexically_normal(); ``` MemorySanitizer warning is triggered, indicating a use-of-uninitialized-value in the std::filesystem::path destructor, specifically in the std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr() function. The full MSAN log: ==2902116== WARNING: MemorySanitizer: use-of-uninitialized-value     #0 0x7fa331ba47cf in std::unique_ptr<std::filesystem::__cxx11::path::_List::_Impl, std::filesystem::__cxx11::path::_List::_Impl_deleter>::~unique_ptr() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/unique_ptr.h:360:6     #1 0x7fa331d2b49c in std::filesystem::__cxx11::path::_List::~_List() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/fs_path.h:647:24     #2 0x7fa331d2b49c in std::filesystem::__cxx11::path::~path() /usr/bin/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/fs_path.h:313:21     #3 0x7fa331d2b49c in WasmEdge::Plugin::Plugin::getDefaultPluginPaths[abi:cxx11]() /root/wasmoi/targets/WasmEdge/lib/plugin/plugin.cpp:254:20 WasmEdge tool should execute without any MemorySanitizer warnings, indicating that all memory is properly initialized and managed. Reproduction steps: 1. Build WasmEdge using the provided script. 2. Execute the WasmEdge tool with the provided inputs to trigger the issue. 3. Observe the MemorySanitizer warning`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Fix release workflows` created by `hydai`, stating `1. Correct Windows MSVC path names. 2. Include `-y` flag in `apt install` for package installation.`?"}
{"completion":"The labels for this issue are `c-CMake c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Add support for LLVM 17` created by `ibmibmibm`, stating `Use pipeline description string for llvm 13 and above. Add definition for LLD 17. Suppress gcc 13.1 warning in spdlog/fmt. See https://github.com/fmtlib/fmt/issues/3415.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Hosting WasmEdge in C.` created by `khagankhan`, stating `I have a WebAssembly (wasm) module containing a CRC checksum calculation, utilizing the \"env\" module and the \"addToCrc\" function. I've successfully applied it in a Node.js environment. However, I'm encountering issues implementing it in WasmEdge. I've provided my code, but the \"addToCrc\" function isn't being called, resulting in an incorrect CRC checksum. I suspect that I'm not handling the \"_memory\" aspect properly. Can you provide guidance on handling this or identify any mistakes in my approach? The primary code for WasmEdge invokes the \"addToCrc\" function, manages file reading, VM context creation, and function type definition. Despite successful module loading and validation, the CRC checksum remains zero. This suggests an issue with the \"addToCrc\" function. I'm keen to identify the cause and resolve it to enable proper CRC checksum generation. I seek assistance in rectifying the \"addToCrc\" function's invocation and resolving any potential errors in the handling of the \"_memory\" aspect.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Different behavior when executing code with the same effect` created by `unicornt`, stating `I generated a wasm code and found that its behavior differs across different runtimes. WasmEdge returns code 3, while Wasmtime and Wasmer return code 2. I expect WasmEdge to return code 2 as well. This difference is caused by a specific call in the code, and I've identified the root cause related to memory data differences. I've also provided reproduction steps and system details. Additionally, I'm seeking insights on why this variation occurs and possible solutions.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: <title>The implementation of instruction 'f64x2.mul' may have bugs` created by `XinyuShe`, stating `I created a wasm binary with an exported function named \"main\" and compared the outputs of WASMEDGE with other runtimes. The outputs differed, and they are as follows: ```bash Executed: wasmedge --reactor filea154963.wasm main 340282366920937259259921195296773636095 340282366920937259259921195296773636095 ... (repeated outputs) Executed: wasmtime run --invoke main filea154963.wasm 316968409489397640197182485818085862287 316968409489397640197182485818085862287 ... (repeated outputs) root@4252f5ec38df:/home/sxy/exp/0_Issue_files# wasmer run filea154963.wasm -i main 316968409489397640197182485818085862287 316968409489397640197182485818085862287 316968409489397640197182485818085862287 ... (repeated outputs) ``` The stack data of this instruction can be found in the provided image link. After analysis, I suspect the error may have occurred at line 53 of its wat file, viewable in the linked image. Reproduction steps: ```bash 1. Build with options '...' 2. Execute with flags '....' 3. Execute with inputs '....' 4. Get error ``` ![DESCRIPTION](https://github.com/WasmEdge/WasmEdge/assets/60457190/20873504-a94f-4e43-968b-dbbbb45f3b94.png) I am using wasmedge version 0.13.4 in a Docker environment with Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) architecture. I am facing issues with the wasm binary outputs when compared with other runtimes. I suspect an error at line 53 of the wat file. Any assistance on this matter would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: <title>The implementation of instruction 'f64x2.add' may have bugs` created by `XinyuShe`, stating `I created a wasm binary with an exported function called \"main\" and then compared the outputs of WASMEDGE with other runtimes using the provided command. The outputs of WASMEDGE differ from the other runtimes. Command used and comparison of outputs: - Executed: wamrc -o filea201519.wasm.aot filea201519.wasm  - Executed: iwasm --heap-size=0 -f main filea201519.wasm.aot  - WASMEDGE output: 340240828546070184860793106435332374528 (repeated) - WASMTIME output: 340240828546070184860793106439627276288 (repeated) Python commands and their respective outputs are also provided. The stack data of this instruction and an error analysis screenshot are available. The error is suspected to occur at line 36 of the .wat file. Reproduction steps: 1. Build with options '...' 2. Execute with flags '....' 3. Execute with inputs '....' 4. Get error Screenshots are included. Environment: - WasmEdge version 0.13.4 - Docker version 24.0.5, build ced0996 - Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) CLI Component. No specific compiler flags and options are mentioned.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: <title>The implementation of instruction 'f32x4.mul' may have bugs` created by `XinyuShe`, stating `I created a wasm binary with an exported function \"main\" and compared the outputs of WASMEDGE with other runtimes. The outputs from WASMEDGE differ from other runtimes. I checked the stack data and think the error may have occurred at line 76 of its wat file. Reproduction Steps: 1. Build with options '...' 2. Execute with flags '....' 3. Execute with inputs '....' 4. Get error ![Description](https://github.com/WasmEdge/WasmEdge/assets/60457190/ca6659ba-fa33-44e4-9bcc-dd05b3a9e919) Logs: - WASMEDGE version 0.13.4 - Operating system: Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64) - Docker version 24.0.5, build ced0996 I seek help in identifying and resolving the discrepancy in outputs and potential error in line 76 of the wasm file.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `bug: <title>The implementation of instruction 'f32x4.add' may have bugs` created by `XinyuShe`, stating `I created a wasm binary with an exported function named \"main\" and compared the outputs of WASMEDGE with other runtimes. The WASMEDGE outputs differed from other runtimes as shown below: ```bash [filea118365.zip](https://github.com/WasmEdge/WasmEdge/files/13239573/filea118365.zip) filea118365.wasm: - Executed with WAMR: Generated AoT file with CPU features and compiled successfully. - Executed with WASMEDGE: Produced the same output multiple times. - Executed with WASMTIME: Produced a different output than WASMEDGE. Python: - Printed hex values for specific numbers. Stack data and analysis: - Presented a hex value and identified a potential error at line 22 in the .wat file. Reproduction steps: 1. Build with specified options. 2. Execute with provided flags and inputs. 3. Get error. CLI version used: WASMEDGE 0.13.4 Operating system and architecture: Ubuntu 22.04.3 LTS (GNU/Linux 5.15.0-79-generic x86_64). No response was given for the expected state or compiler flags/options.`?"}
{"completion":"The labels for this issue are `c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Add invariant attribute for memory and global pointer` created by `ibmibmibm`, stating `- Introduce 'invariant.group' attribute for global and memory pointers - Address issue #2963`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer: Double quote the strings to prevent splitting in env file` created by `SAtacker`, stating `This issue addresses problem with WebAssembly syscalls. An example is provided where `clock_gettime` syscall doesn't work as expected. I suspect this issue may be related to `WasmEdge` not supporting the necessary functionality for this syscall. We should investigate and enhance `WasmEdge` to properly handle `clock_gettime` syscall.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `remove nix build for now` created by `dannypsnl`, stating `It's too unstable, so I remove it for now.`?"}
{"completion":"The labels for this issue are `bug c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Installation error on WSL2 Ubuntu 20.04 env` created by `Meettya`, stating `I'm encountering an issue starting the installation process within a WSL2 Ubuntu 20.04 container on Windows 11. It seems to be related to the PATH with Windows paths and potential mishandling by the installer.  ```bash 1. install curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash 2. Get error ``` I receive an error when attempting to run the given installation script. The error occurs during the WasmEdge installation process. The system shows issues with the PATH, particularly with Windows-related paths. My WSL Ubuntu environment appears to be affected. #### Logs: Upon running the installation script, the shell reports an error related to the PATH variable, specifically mentioning `(x86)/VMware/VMware`. This issue prevents successful WasmEdge installation. #### Environment: - WasmEdge Version: 0.13.4 - Operating system: Ubuntu 20.04 - Hardware Architecture: x86_64`?"}
{"completion":"The labels for this issue are `bug c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Installation is not working` created by `carrycooldude`, stating `Installation via the provided script isn't working on Ubuntu 22.04 x64. Building and executing with specific options and flags lead to an error. The issue lacks a response, and no logs are shared. The WasmEdge version is recent. The author expects guidance on resolving the installation failure.`?"}
{"completion":"The labels for this issue are `documentation c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Remove legacy parts and refactor build-extensions` created by `0yi0`, stating `This PR focuses on improving manylinux plugins for building workflows. The goal is to ensure the workflows are robust before further refactoring.`?"}
{"completion":"The labels for this issue are `binding-java c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Java] provide platform specific jni and jar for Java bindings` created by `proohit`, stating `This PR aims to package wasmedge-java bindings into platform-specific jars. Closing issue #2234.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add Security insights` created by `alabulei1`, stating `Check out the security insights documentation in the Clomonitor.io site for detailed information.`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add the software bill of materials` created by `alabulei1`, stating `Check out the software bill of materials (SBOM) documentation at: https://clomonitor.io/docs/topics/checks/#software-bill-of-materials-sbom`?"}
{"completion":"The labels for this issue are `help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add dependencies policy` created by `alabulei1`, stating `Check out docs: https://clomonitor.io/docs/topics/checks/#dependencies-policy`?"}
{"completion":"The labels for this issue are `good first issue help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add a reference link for the ROADMAP.md to the WasmEdge's README file. ` created by `alabulei1`, stating `The roadmap file can be found at this URL: [https://github.com/WasmEdge/WasmEdge/blob/master/docs/ROADMAP.md](https://github.com/WasmEdge/WasmEdge/blob/master/docs/ROADMAP.md).`?"}
{"completion":"The labels for this issue are `good first issue help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `Add a reference link for the Adopter file to the WasmEdge's README file.` created by `alabulei1`, stating `The Adopter file's URL is [here](https://wasmedge.org/docs/contribute/users).`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Support more llama options` created by `dm4`, stating `- Discussing technical details: `batch-size`, `reverse-prompt`, and fixing llama log printing. - Need to resolve issues related to batch size and reverse prompts. - Priority is to fix llama log printing.`?"}
{"completion":"The labels for this issue are `bug priority:low c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `Bad performance in AOT mode` created by `unicornt`, stating `I ran `case.wasm` in WasmEdge (AOT mode) and found that it takes almost twice as long as `wasmtime` and is slower than wamr (both `llvm-jit` mode and `fast-jit` mode). On my machine, `WasmEdge` takes 3.79s while `Wasmtime` takes 1.97s to finish running `case.wasm`. According to the performance of other cases, I expect `WasmEdge` to take less time than other runtimes, so the abnormal long execution time might be due to performance problems in WasmEdge. Reproduction steps: 1. Build with default options. 2. Compile with `wasmedgec case.wasm case-aot.wasm` 3. Execute with `time wasmedge case-aot.wasm > case.out` Components: CLI WasmEdge Version/Commit: 0.13.4-92-g278904bc OS: Ubuntu 20.04 Hardware Architecture: x86_64 Compiler info: GCC version: 9.4.0, CMake version: 3.16.3`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-OCR New Plugin for using Tesseract OCR within WasmEdge` created by `sarrah-basta`, stating `**Wasi-OCR** is a WasmEdge plugin that utilizes the Tesseract API for optical character recognition (OCR). It integrates seamlessly with Tesseract, allowing the extraction of text from images for Document AI applications within WasmEdge. The file structure of Wasi-OCR includes the plugin functions and necessary files for module registration. For using the plugin, the Tesseract API has two dependencies: tesseract-ocr and libleptonica-dev. These dependencies can be installed using the provided instructions. To build WasmEdge with the plugin, the `-DWASMEDGE_PLUGIN_WASI_OCR=On` flag should be used, following a process similar to the provided link. The main purpose of Wasi-OCR is to provide an OCR solution with no CLI dependency, making it easier to harness the power of OCR in Document AI applications within WasmEdge.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `feat: WASI-OCR New Plugin for using Tesseract OCR within WasmEdge` created by `sarrah-basta`, stating `WASI-OCR is an OCR solution using the Tesseract API, implemented as a WasmEdge plugin. It consists of a host function in the WasmEdge C++ SDK that interfaces with the Tesseract C++ API, and a Rust library crate for utilizing the plugin's functions to process images and extract relevant information as a `Data` struct. Tesseract is an open-source OCR engine widely used for text recognition from images. It is commonly employed in Document AI for automating document processing tasks. The Wasi-OCR file structure includes C++ and header files for registering the plugin as a module. The Tesseract API is created upon environment creation and destroyed at the end of the `image_to_data` function call. Installation of the plugin requires installing Tesseract-OCR and libleptonica-dev using the specified commands, and linking them via CMakeLists. Building WasmEdge with the plugin involves using the `-DWASMEDGE_PLUGIN_WASI_OCR=On` flag. Overall, the solution leverages the Tesseract API and WasmEdge to provide OCR capabilities in a Wasm environment, facilitating the extraction of text from images and documents.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Add metadata support` created by `dm4`, stating `Use `setInput()` with index=1 for llama.cpp options and encode options with a JSON string. Check the example update in https://github.com/second-state/WasmEdge-WASINN-examples/pull/52.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Add GitHub action to submit MSI package to WinGet repositories` created by `abhinandanudupa`, stating `Ensure that the GitHub token being used has the necessary permissions by referring to https://github.com/microsoft/winget-create#github-personal-access-token-classic-permissions.`?"}
{"completion":"The labels for this issue are `c-Plugin c-CMake`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] ggml backend: enable cuBLAS and bump from b1309 to b1383.` created by `hydai`, stating `Issue: Fixes #2951 We're encountering performance issues in the data processing module when dealing with large datasets. Specifically, the current implementation of the sorting algorithm is inefficient and causes a significant slowdown. This impacts our application's responsiveness and overall user experience. Proposal: I suggest implementing a more optimized sorting algorithm, such as merge sort or quicksort, to improve the overall performance of the data processing module. Additionally, considering the parallel processing capabilities of our system, we should explore leveraging multithreading to parallelize the sorting operation and distribute the workload across available cores. Challenges: One challenge we may face is ensuring the thread safety of the sorting algorithm implementation, especially when dealing with shared data structures. We also need to carefully assess the potential impact on memory usage and take measures to mitigate any adverse effects. Action Items: 1. Evaluate and select a more efficient sorting algorithm (e.g., merge sort, quicksort). 2. Investigate and implement multithreading for parallelizing the sorting operation. 3. Address thread safety concerns when modifying the sorting algorithm. 4. Assess and optimize memory usage to minimize any negative impact. Looking forward to collaborating on these improvements.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `agx orin, free(): invalid pointer Aborted (core dumped)` created by `thunder95`, stating `I followed the tutorial for using AGX Orin device for LLama2 inference. When I run the command with the specified parameters, it throws \"free(): invalid pointer Aborted (core dumped)\".`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Allocation error?` created by `orangeC23`, stating `The issue involves using clang to compile a C file into WebAssembly (Wasm) binaries and executing them with WasmEdge. The observed output from WasmEdge is different from the expected output produced by wasmtime and WAMR. The author provides detailed reproduction steps along with the source code and commands used for compilation and execution. They also mention the specific versions of WasmEdge, operating system, and hardware architecture used. There are no provided logs as responses. The issue pertains to CLI and relates to WasmEdge version 0.9.1 on Ubuntu 20.04 with an x86_64 architecture. The author utilized a specific installation method for WasmEdge. The intended action requested is to identify the discrepancy in outputs between WasmEdge and other Wasm runtimes and to address the observed differences.`?"}
{"completion":"The labels for this issue are `invalid hacktoberfest-spam`.","prompt":"Can you assign labels to the GitHub issue titled `Create hacktoberfest-1` created by `Bharti814`, stating `Issue: binary search code Hey everyone, I'm working on a binary search algorithm, and I'm encountering an issue with the implementation. When the input array contains duplicate elements, the algorithm doesn't always return the correct index. I've been trying to figure out the best approach to handle this situation. I've considered modifying the binary search code to account for duplicate elements, but I'm not entirely sure about the most efficient way to do it. I'd appreciate any advice or suggestions on how to tackle this problem effectively. Looking forward to your insights.`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASMEDGE-Zlib] Changed a few naming style issues.` created by `NeelDigonto`, stating `Changed naming style issues on the zlib plugin test source file. Followup of PR #2562. @hydai`?"}
{"completion":"The labels for this issue are `c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[WASMEDGE-Zlib] Working example with Build + Run Guide.` created by `NeelDigonto`, stating `Companion example for the zlib plugin for wasmedge created by PR #2562. Requesting @hydai's attention.`?"}
{"completion":"The labels for this issue are `c-Plugin c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Unified preload options & support streaming to stdout` created by `dm4`, stating `- [WASI-NN] Unified preload options with case-insensitive matching: Proposal to unify preload options with case-insensitive matching in the WASI-NN project. - [WASI-NN] Add AUTO device support in ggml backend: Request to add AUTO device support in the ggml backend of the WASI-NN project. - [WASI-NN] Add STREAM_TO_STDOUT support in ggml backend: Proposal to include STREAM_TO_STDOUT support in the ggml backend of the WASI-NN project.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Enable OpenVINO target again` created by `hydai`, stating `Re-enable WASI-NN OpenVINO target disabled by https://github.com/WasmEdge/WasmEdge/pull/2933.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Disable OpenVINO target temporary due to the failure of installation issue` created by `hydai`, stating `Due to the apt repository not working, we'll disable OpenVINO on the CI workflow to avoid release and testing failures. We'll re-enable it once the issue is resolved.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Fix the broken installation of OpenVINO` created by `hydai`, stating `The apt-key used in the script is deprecated. Instead, manage keyring files in trusted.gpg.d per apt-key(8). There's also a warning about the unstable CLI interface of apt when used in scripts. The main problem is that the repository 'https://apt.repos.intel.com/openvino/2023 ubuntu20 InRelease' is not signed and has invalid signatures. This causes the process to complete with exit code 100. The proposed solution is to manage keyring files as mentioned and resolve the signing issue for the repository.`?"}
{"completion":"The labels for this issue are `c-CI c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Example] Fix get-string with latest C++ internal getSpan API. Fixes #2887` created by `hydai`, stating `This issue aims to solve problem #2887. When a user attempts to resize the browser window, elements on the page are not adjusting correctly. This leads to a poor user experience and affects the overall responsiveness of the web application. The current design lacks responsiveness and adaptive behavior across different screen sizes. To address this, I propose implementing a CSS media query and responsive design approach to ensure proper adaptation of elements based on the viewport size. This should involve updating the existing styles for various screen sizes to ensure a consistent and user-friendly experience across devices. We need to carefully test and validate the proposed changes to ensure they work as intended on different devices and screen sizes, covering both landscape and portrait orientations. Additionally, we should consider accessibility requirements to guarantee a seamless experience for all users. Overall, the goal is to enhance the responsiveness of our web application, providing a consistent and visually appealing experience across various devices and screen sizes.`?"}
{"completion":"The labels for this issue are `bug good first issue Hacktoberfest c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `bug: MemoryInstance::getPointer function changed. The example get-string is outdated and needs to fix` created by `sarrah-basta`, stating `Encountered bug in WasmEdge's \"get-string\" example plugin, possibly due to changes in memory access functions, causing compilation error in the specific example. \"get-string\" previously worked but seems to be failing now. Developed a new Wasi-OCR plugin for WasmEdge, and it relies on similar memory access functions. Request assistance to resolve the issue or guidance in adapting the example and plugin to the latest changes.\u0003\u0003\r Reproduction Steps:\u0003\r - Build WasmEdge with options '-DWASMEDGE_BUILD_EXAMPLE=ON' and execute the build command: 'make'\u0003\r Components: C SDK, Rust SDK\u0003\r WasmEdge Version: 01829c\u0003\r OS: Ubuntu 22.04\u0003\r Arch: x86_64\u0003\r Compiler: C++ Compiler Version - GNU Make 4.3, CMake Version - 3.22.1, Compiler Flags: '-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_EXAMPLE=ON'`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Support more options for llama` created by `dm4`, stating `- Add support for `LLAMA_N_CTX` environment variable to specify the context size. - Implement support for `LLAMA_N_PREDICT` environment variable to set the maximum tokens predicted. - Update ggml backend to version b1273.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Enable WASI-NN ggml plugin on macOS apple silicon model` created by `hydai`, stating `I'll manually update the WASI-NN ggml plugin on the macOS Apple Silicon model.`?"}
{"completion":"The labels for this issue are `c-Plugin c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Enable ggml llama.cpp plugin on macOS` created by `hydai`, stating `Refactor the issue to extract core technical details and proposals, reflecting the author's perspective without unnecessary elaboration: \"Fixes #2811 #2797 When using the 'handlebars' template engine, an issue arises with partials not being recognized when set to a different root. The proposal involves allowing the 'setPartial' method to specify a custom root directory. This change could resolve path conflicts and enhance the flexibility of template management. Challenges include determining the appropriate implementation approach and ensuring backward compatibility with existing projects. The author requests feedback on the proposed solution and welcomes suggestions for alternative strategies.\"`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Update ggml` created by `dm4`, stating `Update ggml library (#2802) to use gguf model for tests and enable `LLAMA_BLAS` by default, while also passing the model filename to ggml backend for preloaded model.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/bake-action from 3 to 4` created by `dependabot[bot]`, stating `The issue is about upgrading [docker/bake-action](https://github.com/docker/bake-action) from v3 to v4. Key changes in v4.0.0 include making Node 20 the default runtime, displaying proxy configuration, and updates to dependencies. The release notes also highlight key changes from v3.1.0 and v3.0.1. Dependabot will handle conflict resolutions. The author can trigger actions such as rebase or recreating the PR by commenting `@dependabot` commands.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump crazy-max/ghaction-chocolatey from 2 to 3` created by `dependabot[bot]`, stating `\"Bumps [crazy-max/ghaction-chocolatey](https://github.com/crazy-max/ghaction-chocolatey) from 2 to 3.\" - **Changes in Version 3.0.0:**   - Node 20 set as default runtime, requiring Actions Runner v2.308.0 or later. ([Release Details](https://github.com/crazy-max/ghaction-chocolatey/compare/v2.3.0...v3.0.0)) - **Commits:**   - Updates related to the version bump. ([Commits](https://github.com/crazy-max/ghaction-chocolatey/compare/v2...v3))`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/build-push-action from 4 to 5` created by `dependabot[bot]`, stating `The issue involves upgrading [docker/build-push-action](https://github.com/docker/build-push-action) from version 4 to version 5. Release v5.0.0 includes important changes: - Default runtime now requires Actions Runner v2.308.0 or later, specifically Node 20 as the default runtime. - Update of `@actions/core` from 1.10.0 to 1.10.1. The full changelog is available at [v4.2.1...v5.0.0](https://github.com/docker/build-push-action/compare/v4.2.1...v5.0.0). Commits and additional information can be viewed at [compare view](https://github.com/docker/build-push-action/compare/v4...v5).`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/login-action from 2 to 3` created by `dependabot[bot]`, stating `Bumping the [docker/login-action](https://github.com/docker/login-action) from version 2 to version 3.0.0 includes major changes like switching to Node 20 as the default runtime, updating dependencies such as `@actions/core` and `@aws-sdk`, and bumping other minor versions. The full changelog can be found [here](https://github.com/docker/login-action/compare/v2.2.0...v3.0.0). Dependabot compatibility score for this update can be viewed [here](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). There are specific Dependabot commands and options provided to manage this PR effectively.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/setup-buildx-action from 2 to 3` created by `dependabot[bot]`, stating `Bumped [docker/setup-buildx-action](https://github.com/docker/setup-buildx-action) from version 2 to 3. Key changes in version 3.0.0 include using Node 20 as the default runtime, requiring Actions Runner v2.308.0 or later, and updating `@actions/core` from 1.10.0 to 1.10.1. The full changelog and commit details are available in the provided GitHub links. Dependabot will handle any conflicts as long as the PR is not altered. The author can trigger a rebase manually by commenting `@dependabot rebase`.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Can wasmedge now support model training?` created by `17862687921`, stating `Can Wasmedge support model training now?`?"}
{"completion":"The labels for this issue are `bug platform-macos c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `Error while building WasiNN Plugin` created by `Hrushi20`, stating `I'm using WasmEdge 0.13.4 and encountering issues building the WasiNN Plugin required for the MediaPipe-rs module. I'm specifically trying to build it with WasiNN support. Environment: - Hardware: Mac M1 - OS: MacOS - C++ Compiler: [if applicable] - CMake version: 3.27.2 - CMake flags used:   -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=\"TensorflowLite\" Commands executed: cmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_PLUGIN_WASI_NN_BACKEND=\"TensorflowLite\" cmake --build build`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `WASI-NN GGML backend features` created by `dm4`, stating `The primary objectives for integrating the GGML backend in WASI-NN are as follows: - Move ggml from `thirdparty/` to `plugins/wasi_nn/thirdparty/` (#2831) - Enable BLAS support using OpenBLAS by default (#2831) - Enable Metal support by default on macOS (#2871)`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Track WASI Preview 2 Status` created by `dannypsnl`, stating `This issue summarizes the WASI Preview 2 and our implementation status as a tracker for dependencies and their corresponding plugins.  Key Details: - Dependencies and plugins:     - `wasi-clocks` depends on `wasi-poll`.     - `wasi-poll` requires wasmedge support for plugin dependence.     - `wasi-io` relies on `wasi-poll`.     - `wasi-filesystem` depends on `wasi-poll`, `wasi-clocks`, and `wasi-io`.     - `wasi-sockets` is dependent on `wasi-io`.     - `wasi-nn` has a plugin available in the WasmEdge repository.     - `wasi-random` is awaiting further action. Appendix: - Links to relevant projects as well as the WASI proposals are provided for additional context.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Update ggml` created by `dm4`, stating `Update ggml library to include gguf model for tests and enable LLAMA_BLAS by default.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump crazy-max/ghaction-chocolatey from 2 to 3` created by `dependabot[bot]`, stating `The issue involves updating [crazy-max/ghaction-chocolatey](https://github.com/crazy-max/ghaction-chocolatey) from version 2 to 3. The release notes highlight the changes in version 3.0.0, including the default runtime update to Node 20. The PR contains various commits related to the update. The author emphasizes that Dependabot will handle any conflicts and provides instructions for triggering Dependabot actions through commenting on the PR.`?"}
{"completion":"The labels for this issue are `enhancement platform-macos c-Plugin arch-arm64 c-WASI-NN c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Support WASI-NN ggml backend on the macOS platform` created by `hydai`, stating `In the 0.13.4 release, we added the WASI-NN ggml plugin for Linux (x86_64 and arm64). We need to support macOS and focus on arm64 architecture due to the shift in Mac's main product line. It's essential to enable building, testing, and releasing the WASI-NN ggml plugin on the macOS platform.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Test] add tests for wasi-nn ggml backend` created by `dm4`, stating `Add tests for wasi-nn GGML backend using the 1.8GB model `orca-mini-3b.ggmlv3.q4_0.bin` to reduce memory usage on CI.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] opencvmini api expose resize function, update normalize` created by `Charles-Schleich`, stating `Added resize function and updated normalize to align with OpenCV standards but didn't fully match it as I don't currently need to pass in a `mask` or use the `dtype` flag. Willing to change this if necessary. Questioning if we should expose a way to query dimensions for certain `MatKey` from the runtime, which could be helpful for manipulating dimensions internally and putting them into a buffer from the calling language. Requesting feedback on any changes I can or should make.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `Added imgproc 9 functions to opencvmini plugin.` created by `Wck-iipi`, stating `I experimented with wasm and wasmedge, implementing opencv functions using Rust SDK. This PR adds BilateralFilter, BoxFilter, MiniDilate, MiniErode, GaussianBlur, MiniLaplacian, MedianBlur, PyrDown, PyrUp to opencvmini. It's intended to assist with the implementation of #2792.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: CNCF - WasmEdge: Add matrix operations for OpenCVMini-Wasm-Plugin ` created by `aaryac33`, stating `WasmEdge aims to enhance its capabilities by developing the OpenCVMini plugin to provide more OpenCV functionalities within the WasmEdge environment. The key goals are to define new interfaces for the plugin that support image filtering, drawing, and feature detection functions, alongside related cv::Mat member functions, using OpenCV 4.x. The specified milestones involve project planning, research, and setting clear goals in weeks 1-2. Weeks 3-4 focus on designing matrix operations and defining the plugin's interfaces. Weeks 5-6, 7-8, and 9-10 are dedicated to the implementation and unit testing of image filtering, drawing, and feature detection functions, aiming for over 80% code coverage. The final weeks target integration, documentation, CI integration, and optimization of the functions. The recommended skills for this endeavor include expertise in C/C++, OpenCV, Rust, and WebAssembly. The author also emphasizes the need to re-export functions in C style, create unit tests and examples, and provide detailed documentation on building and using the plugin. The author requests clear project planning, thorough research on OpenCV 4.x and its WebAssembly capabilities, and the creation of a development environment early in the project. Additionally, the author seeks meticulous implementation, testing, and documentation to ensure a robust and efficiently functioning OpenCVMini plugin.`?"}
{"completion":"The labels for this issue are `platform-macos arch-arm64 dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Cannot find simdjson header when library is found` created by `dannypsnl`, stating `In `cmake` log, it shows the simdjson library is found, but the `ninja` command later failed, stating 'simdjson.h' file not found. ### Current State simdjson.h file not found, build failed ### Expected If the library is found, the build should pass ## Environment - Hardware Architecture: aarch64 - Operating system: MacOS 13.4.1 - C++ Compiler version: AppleClang 14.0.3.14030022 - CMake version: 3.26.1 - CMake flags: `cmake -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_TESTS=ON -GNinja ..` - Path of header: `/usr/local/include/simdjson.h` ## Steps to Reproduce ```shell mkdir build && cd build cmake -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_TESTS=ON -GNinja .. ninja ````?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] wasm proposal memory64` created by `dannypsnl`, stating `Issue:  - [x] executor's instruction `grow` - [ ] aot's instructions: `grow`, others? Resolve #2779 Proposed Simplified Version: I need to address the differences between executor's instruction \"grow\" and aot's instructions, specifically in terms of \"grow\" and any other instructions they might have.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `How can other runtimes directly use the result memory of main.wasm?` created by `17862687921`, stating `To use the memory of the running result in `main.wasm` without writing to a file, after converting the code into wasm and running it with Wasmedge, similar to accessing `results[2]` in Python, is there a way to directly use the result of `results[2]` in `main.wasm` for subsequent calculations (e.g., `num=main.wasm.results[2]+100`)? This is a key requirement for the project, and any insights or solutions would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Enable WASI-NN ggml plugin` created by `hydai`, stating `We added WASI-NN ggml plugin from version 0.13.4. The pull request allows the installer to handle this specific case.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump cachix/install-nix-action from 22 to 23` created by `dependabot[bot]`, stating `Bumping [cachix/install-nix-action](https://github.com/cachix/install-nix-action) from 22 to 23. Release notes: - Always show Nix trace - Nix 2.17 Commits: - Updated to Nix 2.17.0 - Full diff in [compare view](https://github.com/cachix/install-nix-action/compare/v22...v23) Dependabot commands: - `@dependabot rebase` - `@dependabot merge` - `@dependabot squash and merge``?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/checkout from 3 to 4` created by `dependabot[bot]`, stating `The issue entails updating [actions/checkout](https://github.com/actions/checkout) from version 3 to 4. Key changes in version 4.0.0 include updates to default runtime to node20 and support for fetching without the --progress option. New contributors have made their first contributions. The [changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md) provides details of changes in each version, while the [commits](https://github.com/actions/checkout/commits/main) show specific updates related to each pull request. The [Dependabot compatibility score](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores) indicates the PR's compatibility. The author can trigger Dependabot actions using specific commands, facilitating actions like rebasing, recreating, merging, etc.`?"}
{"completion":"The labels for this issue are `c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Example] Update wit-bindgen version from 0.7.0 to 0.11.0` created by `michael1017`, stating `To install wit-bindgen using cargo, update the version in Cargo.toml from 0.7.0 to 0.11.0.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Javascript SDK` created by `ShayanShiravani`, stating `We aim to utilize the Javascript SDK to embed WasmEdge into our Node.js host application. Your official website mentions this possibility, but I'm unable to find detailed technical documentation on how to achieve this. I need assistance in finding a solution to embed WasmEdge functions into our Node.js host app.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] wasi clocks` created by `dannypsnl`, stating `- Implement monotonic clock without pollable. - Manage display and record timezone-display, as well as utc-offset. - Address wall clock functionality. - Ensure thorough testing and continuous integration (CI) integration. resolve #2764`?"}
{"completion":"The labels for this issue are `feature c-Plugin c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement WASI-Clocks proposal as plugin in WasmEdge` created by `dannypsnl`, stating `We aim to support the WASI-Clocks proposal, which is part of the WASI-IO phase 2 proposal. The spec of the proposal may change, so we should follow the latest master to complete the implementation. Relevant links:  - WASI-Clocks: https://github.com/WebAssembly/wasi-clocks - WIT definitions: https://github.com/WebAssembly/wasi-clocks/tree/main/wit`?"}
{"completion":"The labels for this issue are `c-Plugin c-CI c-CMake`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Add ggml backend for llama` created by `dm4`, stating `Add the ggml backend to wasi-nn plugin. Plan to write entire model binary into a temporary file and send the filename to ggml.`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement WASI-IO proposal as plugin in WasmEdge` created by `dannypsnl`, stating `We need to implement the phase 2 WASI-IO proposal as a plugin to separate out WASI in a modular way. Keep up with the latest master for changes in the proposal specs. The plugin won't affect existing implementation, using the `wasi_io` namespace. Find more about WASI-IO at the repository link, and WIT definitions at the given path.`?"}
{"completion":"The labels for this issue are `c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Fix checking of shell paths` created by `SAtacker`, stating `Ref https://github.com/WasmEdge/WasmEdge/issues/2749 I'm facing challenges with WASI interface stability and compatibility. The current implementation lacks stability and doesn't support certain use cases. The fsync syscall is missing, and I'm not able to rely on an accurate timestamp for file operations. Additionally, I believe that adding an extended attribute to the WasmEdge runtime could help mitigate these issues. I would appreciate any guidance or solutions to improve the stability and compatibility of the WASI interface.`?"}
{"completion":"The labels for this issue are `c-CLI c-CAPI c-Test c-WASI c-CI c-CMake c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `Enabling WasmEdge Compilation with MSVC Toolchain` created by `am009`, stating `There are two main technical issues in this GitHub issue (https://github.com/WasmEdge/WasmEdge/issues/2629). First, when dynamically loading WebAssembly from a given HTTP path, the content type of the response is not specified. Second, there's a concern with the use of Emscripten's SDK to produce WebAssembly binaries with custom headers and sections, which can result in unexpected behavior.  The proposed solution involves providing a method to set the content type for the HTTP response when dynamically loading WebAssembly, and considering the use of custom section names and headers when dealing with WebAssembly binaries generated using Emscripten's SDK. The main challenges lie in addressing these issues to ensure consistent and predictable behavior when working with WebAssembly modules. The author has requested assistance with implementing a solution for specifying the content type of HTTP responses, along with advice on working with Emscripten's SDK to avoid unexpected behavior caused by custom headers and sections in WebAssembly binaries.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `Installer does not work on Fish shell` created by `zifeo`, stating `A backward incompatible change in the recent commit has caused installation issues for shells other than bash and zsh. The installation that was previously successful is now failing with a \"TypeError\" related to path handling. The expected behavior is a successful installation. The issue occurs on aarch64 architecture and macOS. To reproduce, use the following command with Fish shell: ```bash curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- ````?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] PyTorch Backend - Fallback Error Message Correction for Tuple type Output Tensors` created by `sarrah-basta`, stating `Refine GitHub issue: \"I need to update the fallback error message in PyTorch for Wasi-NN to account for tuple-type output tensors.\" `?"}
{"completion":"The labels for this issue are `priority:low c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Provide an option for using the gitee link instead of the GitHub link` created by `hydai`, stating `Due to a known issue, users in China must use gitee rather than GitHub.`?"}
{"completion":"The labels for this issue are `bug good first issue help wanted priority:low c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Crash report about the instruction `table.init`` created by `erxiaozhou`, stating `Segmentation fault (core dumped) when running `wasmedge` on Ubuntu 20.04 with hardware architecture amd64. I want to raise an \"OOB\" exception instead. To reproduce, use the provided test case and run the command: `wasmedge/wasmedge --reactor <test case> to_test` after compiling with the given commit ID and commands.`?"}
{"completion":"The labels for this issue are `bug good first issue help wanted priority:low c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Crash report about the instruction `memory.init`` created by `erxiaozhou`, stating `Description: I encountered a segmentation fault (core dumped) and expect an exception indicating \"OOB\". Environment: - Hardware Architecture: amd64 - Operating system: Ubuntu 20.04 - Compilation with commit id e4196d34b1b6b2e70e4a5bd9fe84e6936e11fc85 using clang-14. Steps to Reproduce: 1. Use the provided test case from [memory.init_WasmEdge_crash.zip](https://github.com/WasmEdge/WasmEdge/files/12366330/memory.init_WasmEdge_crash.zip). 2. Execute the command: `wasmedge/wasmedge --reactor <test case> to_test` `?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `Add load_by_name implementation into wasi-nn plugin` created by `CaptainVincent`, stating `Merged.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/setup-python from 3 to 4` created by `dependabot[bot]`, stating `Bumped [actions/setup-python](https://github.com/actions/setup-python) from version 3 to 4, which introduces several changes including support for `python-version-file` input, usage of `pypyX.Y` for PyPy, bugfixes, and other improvements. The author mainly emphasizes the need for specifying the Python version and highlights new outputs and environment variable updates. Additionally, there's a mention of a warning for deprecating Python 2.x in version 3.1.4.`?"}
{"completion":"The labels for this issue are `c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Fix the neontbl1 codegen error on macOS` created by `hydai`, stating `Fixes #2732 I'm experiencing a performance issue with the data processing module. When handling large datasets, the current implementation leads to significant slowdowns due to inefficient algorithmic choices. The proposed solution involves optimizing the algorithm to improve its efficiency when dealing with large datasets. Implementing parallel processing and optimizing data structures are potential approaches to address this issue.`?"}
{"completion":"The labels for this issue are `c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Fix fallback impl of `compileVectorExtAddPairwise`.` created by `am009`, stating `LLVM's vector shift operator requires two operands of the same type. To address this, I propose using a `splat` instruction to convert the shift count to vector type. The issue arises when the tests passing due to alternate implementations using SSE on x86_64. These implementations precede the fallback implementation but are guarded by feature checking. I confirmed the problem by removing other implementations and rerunning the tests. After applying this fix, the tests passed (with other implementations removed) under the Linux docker image wasmedge/wasmedge:latest. The primary challenge lies in ensuring consistent operand types for the vector shift operator.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64 c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `macOS CI runner failure due to the brew is not found` created by `hydai`, stating `See the CI job [here](https://github.com/WasmEdge/WasmEdge/actions/runs/5829865540/job/15810170644). When running the job, I encountered an error: \"/Users/ss/workspace/actions-runner/_work/_temp/49c5bfee-4570-444c-a96c-9d639803d40c.sh: line 1: brew: command not found.\" The process completed with exit code [12](https://github.com/WasmEdge/WasmEdge/actions/runs/5830716340/job/15812708147?pr=2734#step:3:13)7. It should work without any issues.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] use pre-built image to get deps` created by `dannypsnl`, stating `resolve #2729 When using the `computeChange` method, the documentation is not clear regarding how the `oldNode` and `newNode` parameters should be used. The example provided does not reflect the expected behavior. Also, the lack of detailed documentation makes it challenging for developers to understand and utilize the method properly. We need updated documentation with clear explanations and accurate examples for the `computeChange` method, ensuring that the `oldNode` and `newNode` parameters are properly explained and demonstrated.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64 c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Warnings on MacOS arm64` created by `q82419`, stating `In AOT spec tests for WasmEdge on arm64 architecture, warnings occurred due to intrinsic name mangling issues. The expected outcome is to have no warnings. To reproduce, build the WasmEdge on the master branch and execute specific tests related to simd functionalities. These include tests for simd arithmetic operations and simd lane and splat functionalities. The environment used for these tests is MacOS 13.4 running on M2 max hardware. The proposal is to resolve the intrinsic name mangling issue leading to warnings in AOT spec tests.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] pre-build image with necessary dependency for extension` created by `dannypsnl`, stating `This issue is related to #2729. I am facing a problem with the current implementation of the authentication module. The JWT tokens are expiring too quickly, leading to frequent authentication failures for our users. I propose to increase the token expiration time to 24 hours to reduce the frequency of re-authentication requirements for our users. Additionally, we need to ensure that the token refresh process works seamlessly to avoid disrupting user sessions. This improvement is crucial for providing a better user experience and reducing unnecessary authentication overhead.`?"}
{"completion":"The labels for this issue are `enhancement priority:high c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Create a CI image with pre-built OpenCV 4` created by `hydai`, stating `The existing workflows take too long to build OpenCV 4 on Ubuntu 22.04 TLS. Proposing to create a container image to replace the current one and address this issue efficiently.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Clean up the redundant lines all workflows` created by `hydai`, stating `This change addresses the issue reported in #2735.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Chore] - Added Redirection Notes` created by `adithyaakrishna`, stating `This PR adds redirection notes to all the current docs.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Performance problem while executing the given wasm file in the interpreter mode` created by `luxinyi0105`, stating `WasmEdge is taking about 10 minutes to execute the given wasm file, which is significantly slower compared to other WebAssembly runtimes like wasmer and wasmtime. The correct checksum result is obtained, but the execution speed is far slower. I suspect performance-related issues in WasmEdge. Using the command `$ wasmedge mutated.wasm` results in the correct output but takes 10 minutes, while the expected output should be instantaneous as seen with other runtimes. I am using WasmEdge version 0.13.2 on Ubuntu 22.04 with x86_64 architecture. This performance gap is adversely affecting the execution speed of the provided testcase.`?"}
{"completion":"The labels for this issue are `c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer: Formatting and Better source message` created by `SAtacker`, stating `Ref: https://github.com/WasmEdge/WasmEdge/issues/2687#issue-1820113967 I've encountered issues when using WasmEdge to run WebAssembly programs that require pthreads support. The current version lacks this capability, causing programs using pthreads to fail at runtime. I propose implementing pthreads support in WasmEdge to address this issue. Additionally, I suggest considering compatibility with existing pthreads implementations to ensure seamless integration. This enhancement will significantly benefit developers working with multithreaded WebAssembly programs. I believe this improvement aligns with the project's goal of providing a comprehensive and robust WebAssembly runtime environment.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `Updating redirect links in the WasmEdge docs ` created by `Mash707`, stating `Resolving issue #2716. Focus on optimizing database queries to improve overall performance. Proposed solution involves implementing query caching and optimizing indexing. Challenges include ensuring compatibility with various database systems. Requesting feedback and collaboration on proposed approach. End of summary.`?"}
{"completion":"The labels for this issue are `bug help wanted priority:medium c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] polloneoff permanently suspends when the clock timeout is set to 0ms` created by `L-jasmine`, stating `When using the `poll_oneoff` function with a clock Subscription timeout of 0, it stays permanently suspended and won't resume. To reproduce, run the following code:  ```rust fn main() {     let ten_millis = std::time::Duration::from_millis(0);     std::thread::sleep(ten_millis); } ``` After building with `cargo build --target wasm32-wasi`, execute `wasmedge target/wasm32-wasi/debug/main.wasm`.`?"}
{"completion":"The labels for this issue are `documentation good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] update redirect links in the WasmEdge docs folder` created by `hydai`, stating `WasmEdge split the docs to a new repository, causing links to break. Specifically, links in the original docs are not working due to refactoring PRs that changed the paths. The expectation is that all links in the original WasmEdge docs should work with the new WasmEdge docs. If incorrect links are found, PRs should be raised to fix them.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Fixed build fail in Xcode` created by `hangedfish`, stating `Fixed #2713. Patch enables successful Xcode project generation for WasmEdge, facilitating easy porting to iOS platform.`?"}
{"completion":"The labels for this issue are `arch-x86_64 arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `Upload prebuilt static libraries on Alpine in the `0.13.x` release series.` created by `hydai`, stating `We merged #2699 after the `0.13.x` releases. Need to build and upload prebuilt static libraries on Alpine for the previous release assets. Also, upload checksum files at the same time. Versions: 0.13.0, 0.13.1, 0.13.2, 0.13.3.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Hangs out while executing the given testcase` created by `luxinyi0105`, stating `While executing the given test case, using WasmEdge to run mutated.wasm hangs and does not end. Expected behavior is to correctly output a result or terminate due to triggering internal exception handling logic and output relevant information. System details: Hardware Architecture: x86_64, OS: Ubuntu 22.04, Tools Version: wasmedge 0.13.2. The testcase was mutated using Emscripten compiler, resulting in wasm files. Other WebAssembly runtimes like wasmer and wasmtime terminate the execution of the wasm file in approximately 6-8 seconds but do not output anything. URL for related files: [here](https://github.com/luxinyi0105/wasm_runtime_test/raw/main/08-01.zip).`?"}
{"completion":"The labels for this issue are `documentation c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Chore] - Removed Chinese Docs` created by `adithyaakrishna`, stating `After the discussion with @hydai, the removal of docs has been split into two parts. This PR covers one part, and another PR will handle the Removal of English and Redirection Addition. CC @alabulei1`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Feat] - Remove Old English and Chinese Docs` created by `adithyaakrishna`, stating `This PR removes the old English and Chinese Docs.`?"}
{"completion":"The labels for this issue are `dependencies c-CI github_actions`.","prompt":"Can you assign labels to the GitHub issue titled `Bump second-state/wasmedge-actions-libsodium-tests from 0.0.1 to 0.0.2` created by `dependabot[bot]`, stating `Bumping [second-state/wasmedge-actions-libsodium-tests](https://github.com/second-state/wasmedge-actions-libsodium-tests) from 0.0.1 to 0.0.2. Commits: - [CI] Use NodeJS 14.x instead of 16.x - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/949c609a5eefc3918205aca7796e6f9dda6d6b7d\"><code>949c609</code></a> - Use Zig 0.10.1 - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/973bc7010bf91a20961348687ad03cece8f90046\"><code>973bc70</code></a> - [CI] Add self-testing for main branch. - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/7bd3bc037870bdd55f456f92accb7238af1f0277\"><code>7bd3bc0</code></a> - Use Zig 0.10.0 release to compile libsodium - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/8c1809c1a220183de33653a423298da764b1017a\"><code>8c1809c</code></a> - [README] Add example and more description. - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/84320dbf56e9b52e5c497572c198c262da8aa7e1\"><code>84320db</code></a> - [CI] Separate self-testing for different versions. - <a href=\"https://github.com/second-state/actions-run-libsodium-tests/commit/39c677a27752528ba4b6c4d80866de5c1e7b245e\"><code>39c677a</code></a> See full diff in [compare view](https://github.com/second-state/wasmedge-actions-libsodium-tests/compare/v0.0.1...v0.0.2) [![Dependabot compatibility score](https://dependabot-badges.githubapp.com`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] opecvmini `rectangle` and `cvtColor`` created by `dannypsnl`, stating `1. The `rectangle` function can draw a rectangle on a given picture buffer with customizable color, thickness of 1, line type of LINE_8, and shift of 0.    - [x] Customize color    - [x] Thickness = 1    - [x] LineType = LINE_8    - [x] Shift = 0 2. The `cvt_color` function transforms a given matrix using a color conversion code and destination channel N.    - Transform given matrix using color conversion code and destination channel N`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `How to read host file in wasmedge runtime` created by `chris-void-777`, stating `I need assistance with compiling C code to WebAssembly and running it in Wasmedge on my x86_64 Ubuntu 22.04. The issue I encountered involves a sandboxed nature of Wasmedge where attempting to read a host file results in \"Operation not permitted\" and \"cannot open file\" errors. I couldn't find relevant information in the C language development documentation for Wasmedge. Any help in achieving this would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Build alpine static libraries` created by `jprendes`, stating `Build and release static alpine libraries. I'm looking to create and distribute static libraries specifically for Alpine Linux. The main challenge is ensuring compatibility with Alpine's minimal environment. I need guidance on tools and best practices for building static libraries for Alpine. Any recommendations or examples would be greatly appreciated!`?"}
{"completion":"The labels for this issue are `bug compiler-gcc`.","prompt":"Can you assign labels to the GitHub issue titled `Build failure with gcc/g++ 13: undefined reference to `WasmEdge::Fault::emitFault(WasmEdge::ErrCode)'` created by `paravoid`, stating `WasmEdge failed to (re)build from source during a regular Debian archive rebuild, caused by the switch from GCC 12 to GCC 13. Rebuilding with CC=gcc-12 CXX=g++-12 works around the issue. The specific error can be traced back to an undefined reference in `lib/system/fault.cpp`. I propose a fix by removing the inline attribute from the `emitFault` method in `fault.cpp`. My environment includes x86\\_64 architecture, Debian unstable, g++ (Debian 13.1.0-9) 13.1.0, CMake version 3.27.1, Boost version 1.74.0. To reproduce, use the provided steps involving Debian Sid and building WasmEdge.`?"}
{"completion":"The labels for this issue are `documentation c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Chore] - Removed `zh-tw`  Docs` created by `adithyaakrishna`, stating `@alabulei1 suggested removing `zh-tw` docs due to lack of content. This PR addresses that suggestion.`?"}
{"completion":"The labels for this issue are `platform-linux c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Optimize the installer instruction` created by `alabulei1`, stating `When installing WasmEdge on Ubuntu as root, the installer instructs to run `source /root/.bash_profile`, which is not found. The correct file to source is `/root/.profile`. The instruction should be updated to reflect this.  ```bash source /root/.profile ````?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `Add Test as app into nix flake script` created by `dannypsnl`, stating `# Motivation We aim to facilitate testing within a nix environment. # Details To achieve this, we plan to integrate an app 'test' into the nix flake script and execute the test by invoking `nix run wasmedge#test`. [Link to nix run documentation](https://nixos.org/manual/nix/unstable/command-ref/new-cli/nix3-run.html)`?"}
{"completion":"The labels for this issue are `c-CMake`.","prompt":"Can you assign labels to the GitHub issue titled `Add a flag to disable libtinfo` created by `rockwotj`, stating `We need to add a cmake flag to disable the requirement for libtinfo when building zlib from source. Currently, libtinfo is not required, but zlib doesn't include it when built. This flag will help streamline the build process.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Remove unused fds before closing them.` created by `MediosZ`, stating `Fix PR #2662 to ensure successful closure of unused file descriptors.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Build wasmedge on Nix` created by `dannypsnl`, stating `Build wasmedge on Nix I'm trying to build Wasmedge on Nix but encountering some issues with the build process. Specifically, I'm having trouble with the CMake configuration and finding the necessary dependencies. If anyone has experience with building Wasmedge on Nix and can provide guidance on resolving these build issues, I would greatly appreciate it. Key Points: - Facing challenges in CMake configuration and dependency resolution while building Wasmedge on Nix. - Requesting assistance from the community with resolving these build issues.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Build static library in github actions` created by `jprendes`, stating `This PR adds cross-compiled `libwasmedge.a` static library for Linux `x86_64` and `aarch64`, producing two artifacts in the release: `WasmEdge-0.13.1-debian11_x86_64_static.tar.gz` and `WasmEdge-0.13.1-debian11_aarch64_static.tar.gz`.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Fix blocking when multiple requests have the same fds.` created by `MediosZ`, stating `Fixing CI error with this PR. Removed unused file descriptor from FdDatas when socket is closed. Visit the link for more details: https://github.com/WasmEdge/wasmedge_hyper_demo/actions/runs/5511875753/jobs/10047996074`?"}
{"completion":"The labels for this issue are `c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Examples] Replace wasmedgec with wasmedge compile` created by `paravoid`, stating `Replace \"wasmedgec\" invocations with \"wasmedge compile\" due to recent WasmEdge tool unification.`?"}
{"completion":"The labels for this issue are `priority:high c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Add static library tarball in the linux release assets` created by `hydai`, stating `Enable inclusion of static libraries by adding them to the release assets for WasmEdge versions 0.12.1 and 0.13.1. This involves creating and adding tarballs for x86_64 and aarch64 architectures, and implementing a CI workflow to automate the release of these tarballs.`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Test] Migrating spec test from RapidJSON to SIMDJSON` created by `vrnimje`, stating `Fix issue #2598 by optimizing database queries to reduce latency. Need to review current query patterns and implement caching for frequently accessed data. Investigate potential indexing improvements for large data sets. Conduct performance testing to measure impact of changes.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Environment not work on zsh (MacOS arm64)` created by `q82419`, stating `\"After installation, WasmEdge may encounter an issue when trying to source \".zprofile\" as it might not exist in the user's home directory. The expected behavior after installation for bash shell is to add \". \\\"$HOME\\\"/.wasmedge/env\" to \".bashrc\" or \".bash_profile,\" and for zsh, the command should be added to \".zshenv\" instead of \".zprofile.\" Additionally, we should create the \".zshenv\" file if it doesn't already exist. This issue is observed on MacOS 13.2 running on arm64 architecture.\"`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Install with multiple plugins` created by `q82419`, stating `When installing WasmEdge with multiple plugins using the installer, the current command causes an error due to the use of `;` as the splitter for multiple plugins in bash and zsh. Perhaps, using `,` to separate the plugins could resolve this issue. This affects the command's functionality. Suggestions: - Consider using a comma (`,`) to separate the plugins instead of a semicolon (`;`). - Explore the impact of this change and ensure compatibility with bash and zsh. - Tagging individuals for awareness: cc @hydai  @SAtacker`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Implement OpenCV-mini` created by `dannypsnl`, stating `Feature transform consists of 'normalize', 'blur', and 'bilinear_sampling' functions. Read/write includes 'imdecode', 'imencode', and 'imwrite'. Additionally, there are 'imshow' and 'waitkey' functions, where 'imshow' is currently broken on MacOS. The related example can be found at https://github.com/second-state/opencvmini-example. Since #2403 is failing to trigger CI, the PR needs to be reopened.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[BUILDFIX] support fmtlib 10` created by `mtasaka`, stating `With fmtlib 10, fmt::format() doesn't handle WasmEdge::ErrCode as is. Pass this class to cast operator so that fmtlib 10 can handle this. This addresses issue #2646.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Bug] - Fixed Broken Link` created by `adithyaakrishna`, stating `**Description:** I need to fix broken links in the project.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Use arm64 arch name on macOS instead of aarch64` created by `hydai`, stating `This issue aims to address problem #2641. Currently, the application experiences a significant delay when processing large datasets. This delay is primarily due to inefficient algorithms used for data manipulation. The proposed solution involves optimizing the existing algorithms to improve processing speed. Additionally, parallel processing can be implemented to distribute the workload across multiple cores, further enhancing performance. The goal is to reduce processing time, particularly when handling large datasets. This optimization is crucial for improving the overall user experience and workflow efficiency.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Community] Nominate Shreyas Atre(@SAtacker) as WasmEdge Committers` created by `hydai`, stating `Dear WasmEdge Community, I'm nominating Mr. Shreyas Atre for the position of committer within our community due to his exceptional work on the Installer component. He developed the initial bash installer for WasmEdge (launched on September 6, 2021) and an improved Python installer (live on October 18, 2022). These contributions have significantly improved the user experience with WasmEdge. I invite other maintainers to review this nomination and share their thoughts or approval. Your input is crucial for a fair decision-making process. Best regards, hydai [Bash Installer Commit History](https://github.com/WasmEdge/WasmEdge/commits/master/utils/install.sh) [Python Installer Commit History](https://github.com/WasmEdge/WasmEdge/commits/master/utils/install.py)`?"}
{"completion":"The labels for this issue are `question platform-android`.","prompt":"Can you assign labels to the GitHub issue titled `CANNOT LINK EXECUTABLE on Android` created by `AndradeMaicon`, stating `I followed the guide to build Wasmedge for Android, but when running an example, I get the error \"CANNOT LINK EXECUTABLE \"./wasmedge\": library \"libwasmedge.so\" not found: needed by main executable\". I need help understanding what went wrong. Environment: - Hardware Architecture: (e.g. x86\\_64 or aarch64) - Operating system: (e.g. Ubuntu 20.04) - I used my Samsung Galaxy S21 5G to run these tests. Link to Samsung Galaxy S21 5G: https://www.gsmarena.com/samsung_galaxy_s21_fe_5g-10954.php`?"}
{"completion":"The labels for this issue are `good first issue help wanted c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `Bump OpenVINO from 2021 to 2023` created by `hydai`, stating `Update the install script for OpenVINO to the 2023 edition in https://github.com/WasmEdge/WasmEdge/blob/master/utils/wasi-nn/install-openvino.sh. The current script is still using the 2021 edition, which is outdated.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Make Installer uses the correct version on the Ubuntu aarch64 platform` created by `hydai`, stating `\"Fixes #2622 We're facing an issue with the current implementation of our authentication module. It's causing significant slowdowns during peak usage times. We've identified the bottleneck in the token verification process, which is leading to delays in user authentication. To address this, we propose implementing a more efficient caching mechanism for token validation. This should help alleviate the performance issues we're observing. We're also considering implementing parallel processing for token verification to further optimize the authentication flow. We welcome any insights or suggestions on alternative approaches to improve the authentication module's performance during high traffic periods.\"`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `interaction between AOT compiled modules gives out of bounds memory access, Code: 0x88 or unreachable` created by `loredanacirstea`, stating `I'm using Wasmedge v0.11.2 & `wasmedge-go` to run wasm modules with dependencies, e.g., `wasmA` calls `wasmB`. It works in interpreted mode but gives errors in AOT compiled mode: - If I call `Release()` on wasmB's VM, I get \"out of bounds memory access.\" - If I don't release wasmB's VM, I get \"unreachable.\" The errors occur after wasmA receives the result from wasmB. No shared resources between wasmA and wasmB. This happens only when an AOT compiled wasm makes an `externalCall` to another wasm module. If the call is from an interpreted to an AOT compiled wasm, it succeeds. Is there a known issue for AOT compilation? Why would wasmB influence the state of wasmA? Environment: - Hardware Architecture: darwin x86_64 - Operating system: MacOS - WasmEdge 0.11.2 I couldn't reproduce the bug with a simple example. I wanted to try this on v0.12.1, but couldn't make it work with the current wasmedge-go v0.12.0.`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Loader] Serialization compilation` created by `dracoooooo`, stating `- [x] The implementation includes Modules, Sections (Global, Element, Code, Data), Segments (Element, Code, Data), and Instructions. - [x] The proposed test involves checking Modules, Sections (Global, Element, Code, Data), Segments (Global, Element, Code, Data), and Instructions.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer: Use ubuntu20.04 packages only for x86` created by `SAtacker`, stating `The issue is about optimizing the WasmEdge interpreter for better performance. The author presents the idea of implementing an LLVM-based JIT to improve execution speed, especially for complex workloads. They also point out the challenges of integrating JIT with existing layers and request guidance on achieving this integration. The author suggests exploring the benefits of using LLVM for optimizing WasmEdge and seeks assistance in understanding the technical aspects and potential hurdles of this approach.`?"}
{"completion":"The labels for this issue are `bug c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `Installer failing on Ubuntu 22.04 aarch64` created by `dyasny`, stating `Installer failing on fresh Ubuntu 22.04 aarch64 on AWS when running the standard shell command. Upon investigation, the python installer script also fails to download the necessary files, resulting in a 404 error. The expected outcome is a successful download and installation.  Environment: - Hardware: aarch64 - OS: Ubuntu 22.04 Steps to Reproduce: 1. Install standard Ubuntu 22.04 AMI on EC2 t4g.2xl VM. 2. Run the command: `curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash` The key problem is the failure to retrieve the required files during installation, leading to the download and installation errors.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Replace the broken release workflow` created by `hydai`, stating ``actions/create-release` and `actions/upload-release-asset` are deprecated GitHub workflow actions, meaning GitHub will not fix existing issues with them. To address this, we should shift to using `gh`, the GitHub CLI tool.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Split some options of manylinux environment between x86_64 and aarch64` created by `hydai`, stating `We need to split the system into two parts because: 1. Some plugin owners don't want to support different architecture. 2. Some plugins may not work on such architecture. 3. For example, wasm-bpf only supports x86_64 currently.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Downgrade the release assets from Ubuntu 22.04 to Ubuntu 20.04` created by `hydai`, stating `Issue #2599 fixed  I'm encountering an issue with the recent changes made to the authentication module, specifically related to user roles not being correctly applied after authentication. This impacts the functionality of various features that rely on role-based access control.  My proposal is to review the recent changes in the authentication module and ensure that the user roles are correctly assigned and propagated after authentication. It's essential to have this resolved as it directly affects the security and access control of the application.  I would appreciate prompt attention to this matter. Thank you.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Add release workflows for wasm_bpf plugin, and the reletad installing script` created by `Officeyutong`, stating `Replaces #2570 Closes #2537 This PR adds release/test jobs for the `wasm_bpf` plugin and modifies the installing script to support it. - Modifies release.yml and build-extensions.yml to build and publish the wasm_bpf plugin on Ubuntu and manylinux - Modifies install.py to support installing wasm_bpf through the installation script - Adapts the CMake script of wasm_bpf to the CI building process - Includes a fix for the removal of MemoryInstance::getPointer related to a breaking change.`?"}
{"completion":"The labels for this issue are `platform-linux c-Internal arch-arm32`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Only define some 64 bits related constants on the corresponding platforms` created by `hydai`, stating `Fixes #2254 I'm encountering an issue with data processing in the `parseData` function. The current implementation is causing unexpected behavior when handling large datasets, leading to performance issues and potential crashes. The main challenge is optimizing the data processing logic to improve performance and prevent crashes, especially when dealing with large datasets. We need to review the `parseData` function and consider optimizing it for better performance with large datasets. One approach could be to refactor the data processing algorithm to reduce its time complexity and memory usage. Additionally, implementing batch processing or parallel processing techniques could help improve performance when handling large volumes of data. It's crucial to address this issue promptly to ensure smooth and efficient data processing, particularly when dealing with large datasets. I propose a thorough review and optimization of the `parseData` function to mitigate the performance and stability concerns.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer: Install 20.04 package for any ubuntu version >= 20.04` created by `SAtacker`, stating `Fixes - https://github.com/WasmEdge/WasmEdge/issues/2595 I propose a new feature for WasmEdge to support WAMV (Wasm Audio-Visual Media). WAMV is a combination of Wasm modules and some user interface (UI) elements for multimedia applications. The primary challenge is to enhance WasmEdge's functionality to handle audio and video playback and rendering efficiently. This requires close integration with the underlying system resources and APIs. My suggestion involves creating a new extension API that can manage multimedia resources and provide a seamless interface for developers to interact with WAMV features. This would greatly benefit the multimedia application development community and expand WasmEdge's scope beyond traditional computational tasks.`?"}
{"completion":"The labels for this issue are `documentation help wanted binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `Doc for the version between java bindings and WasmEdge` created by `liangyuanpeng`, stating `Add documentation for the compatibility between Java bindings and wasmEdge versions. Currently, Java bindings are out of sync, so it's unclear which wasmEdge version they support. Related to issue #2590.`?"}
{"completion":"The labels for this issue are `c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `Downgrade the release assets from Ubuntu 22.04 to Ubuntu 20.04` created by `hydai`, stating `In the recent PR, we upgraded the base building environment from Ubuntu 20.04 to 22.04, but since Ubuntu 20.04 is still in use, we need to ensure compatibility. We'll provide pre-built assets for Ubuntu 20.04 to avoid compatibility issues. We will introduce new docker images for Ubuntu 20.04 to include the base and toolchain configurations. This will address the potential incompatibility with existing environments still using Ubuntu 20.04.`?"}
{"completion":"The labels for this issue are `enhancement good first issue c-Internal c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `Migrate from RapidJSON to SIMDJSON for the better performance in the spec test` created by `hydai`, stating `SIMDJSON is a faster JSON library than RapidJSON. To make the spec test faster, we need to replace everywhere that contains RapidJSON with SIMDJSON.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Installer will install the `manylinux2014` version on `Ubuntu 22.04`` created by `q82419`, stating `When using the WasmEdge installer on Ubuntu 22.04 without specifying the `--dist` option, it installs the `manylinux2014` version instead of the expected `Ubuntu 20.04` or `Ubuntu 22.04` release. To reproduce, use the installer on the `wasmedge/wasmedge:latest` Docker image based on Ubuntu 22.04. The issue occurs on x86_64 architecture.`?"}
{"completion":"The labels for this issue are `bug help wanted binding-java`.","prompt":"Can you assign labels to the GitHub issue titled `Java binding is out of sync` created by `hydai`, stating `The Java binding is out of sync with the source tree, causing failed workflows. The source of the issue can be found at: https://github.com/WasmEdge/WasmEdge/actions/workflows/bindings-java.yml To resolve this, the Java binding needs to be synced with the latest WasmEdge C API to ensure the CI is green.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Fix TfLite model data ownership` created by `yanghaku`, stating `In TfLite C API, the function `TfLiteModelCreate` requires the caller to maintain ownership of the model data during the inference process. However, in the case of WasmEdge, there's a concern about ensuring the model data's lifetime, as demonstrated in the provided Rust code. To address this, I propose copying the data to the host functions to prevent potential issues with model data ownership. This approach aims to mitigate the risk of segment faults caused by freeing the model data prematurely. The discussion for this can be found in the provided pull request (https://github.com/WasmEdge/WasmEdge/pull/2360). For further reference, the TfLite model format with metadata is available at: https://www.tensorflow.org/lite/models/convert/metadata#model_with_metadata_format.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Correct the inheriting right of the readonly` created by `CaptainVincent`, stating `\"As I see it, 'RequiredInheritingRights' is received from a wasm invoke host function and isn't controlled by the WASM engine. Hence, it's essential to align the rights in this scenario. The proposal suggests that rights will be removed soon, making further contemplation on reasonable rights unnecessary. Here's the related discussion: https://github.com/WebAssembly/wasi-filesystem/issues/8\"`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Fix wasi-socket testcase timeout error` created by `ibmibmibm`, stating `Set the ready flag after the server socket starts listening, not binding. This is causing issues with the order of operations. A proposed solution is to adjust the timing of setting the flag. This will resolve the problem and ensure smooth functionality.`?"}
{"completion":"The labels for this issue are `c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Add new testcase from https://github.com/TartanLlama/expected/` created by `ibmibmibm`, stating `Let's update `emplace` to use inplace nonthrow constructor.`?"}
{"completion":"The labels for this issue are `documentation c-CLI c-Test c-WASI c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] use std::boyer_moore_horspool_searcher instead of boost one` created by `hydai`, stating `\"We removed all boost related parts and can now drop the boost dependency.\" Fixes #2258`?"}
{"completion":"The labels for this issue are `documentation c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Community] Propose new reviewer, WenYuan Huang, for the WASI-Logging proposal` created by `hydai`, stating `Dear community,  I'm nominating WenYuan Hung (@michael1017) as a new reviewer for WasmEdge. He's contributed significantly through his work on the WASI-Logging proposal (#2535). I kindly ask for approval from other maintainers and welcome your comments and decisions below.  Best regards, hydai`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] fix k8s containerd use case` created by `tu1h`, stating `Fixing the incorrect containerd Unix socket issue. The current Unix socket path used by containerd is wrong and causing problems for connecting to it. The proposal is to update the path to the correct one, '/run/containerd/containerd.sock'. This should resolve the connectivity issue and make containerd accessible again.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Community] propose adding an additional code of conduct` created by `alabulei1`, stating `In this PR, I want to add guidelines for using other developers' open-source work in our contributor's code. I invite maintainers and community members to review and provide comments. Thanks.`?"}
{"completion":"The labels for this issue are `c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Grant socket FDs the ability to fd_read and fd_write` created by `chriso`, stating `This PR provides socket FDs the `fd_read` and `fd_write` permissions, enabling the use of `read(2)` and `write(2)` on a socket FD, aligning with POSIX standards. This change supports Golang's upcoming capability to build WASM/WASI applications, utilizing `fd_read` and `fd_write` internally. The additional rights for socket FDs are necessary for compatibility with WasmEdge. This resolves issue #659. (See [comment](https://github.com/WasmEdge/WasmEdge/issues/659#issuecomment-974877813)).`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `improved the simple http server example in Rust` created by `dipankardas011`, stating `- Fixed the demo by providing more information and a better example. - Removed the broken HTTPS docs link. - Issue links: https://github.com/second-state/wasmedge_wasi_socket/issues/86`?"}
{"completion":"The labels for this issue are `wontfix`.","prompt":"Can you assign labels to the GitHub issue titled `No arm32 package found in version 0.8.2` created by `alps-sun`, stating `Supported release does not work on armv6l architecture. Requesting addition of maynlinux1 builds for  armv6l (32 bit interpreter only) into the release artifacts. Thank you. - Hardware Architecture: (armv6l) - Operating system: (Raspbian GNU/Linux 8 (jessie))`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Add release workflows for `wasm_bpf` plugin, and the reletad installing script` created by `Officeyutong`, stating `Draft ready for review after updating `build-extensions.yml`. Changes in this PR include: - Building and publishing `wasm_bpf` plugin on Ubuntu and `manylinux` in `release.yml` - Adding support for installing `wasm_bpf` in `install.py` script - Adapting CMake script of `wasm_bpf` for CI building process - Fixing issues related to breaking change (removal of `MemoryInstance::getPointer`)`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `More docs for MacOS installation - #2568` created by `maoo`, stating `\"Hopefully footnotes will be properly rendered!\" I need assistance in ensuring that footnotes are correctly rendered in the output. This has been a challenge, and I am looking for a solution to address this issue.`?"}
{"completion":"The labels for this issue are `documentation platform-macos c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `MacOS install - [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate` created by `maoo`, stating `Following instructions from the [WasmEdge installation guide for MacOS](https://wasmedge.org/book/en/quick_start/install.html) did not complete the installation successfully. The error message I encountered was:  ``` urllib.error.URLError: <urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1002)> ``` To resolve this, I used steps from a [Stack Overflow response](https://stackoverflow.com/a/70495761) and ran the script `curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash`. Subsequently, I navigated to the folder /Applications/Python 3.x and double clicked on Install Certificates.command to install the certificate. I am willing to offer a pull request to the installation guide to include a note if confirmation is obtained. My environment details are:  - Hardware Architecture: x86\\_64 - Operating system: MacOS Ventura 13.3.1 (22E261) - Python: 3.11.3 Reproducing the issue can be done by running `curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash` on a freshly installed Python for MacOS.`?"}
{"completion":"The labels for this issue are `c-CMake`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Fix parse WASMEDGE_PLUGIN_WASI_NN_BACKEND build flags` created by `yanghaku`, stating `This PR addresses the cmake error when building multiple backends by making a small patch. Instead of using ```,```, we should use ```;``` as the cmake list separator. This change will enable support for build instructions according to the documentation provided at [doc](https://github.com/WasmEdge/WasmEdge/blob/ed588d7fcd2b5e3393317208319d4eacfd2d33a3/docs/book/en/src/contribute/build_from_src.md?plain=1#L58).`?"}
{"completion":"The labels for this issue are `c-AOT`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Support exception handling, stack unwinding across AOT binary` created by `ibmibmibm`, stating `Utilize `__register_frame` and `__deregister_frame` functions in libgcc and libunwind for applying FDE data in `.eh_frame` section.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] PyTorch Backend - Added support for Tuple Type Output Tensors ` created by `sarrah-basta`, stating `Add support for tuple type output tensors for PyTorch on Ubuntu 22.04 with the following environment details: x86_64 hardware architecture, gcc 11.3.0 C++ compiler, and CMake version 3.22.1.  The request specifically involves updating the WASMEdge plugin `WASI_NN_BACKEND` to include PyTorch.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] zlib [LFX 2023 Term 2]` created by `NeelDigonto`, stating `Project Overview: Improved version of PR #2395 # CMake - Updated CMake files to enable WasmEdge zlib plugin and added plugin-specific conditions for building. # Workflows - Added build configurations for Ubuntu and manylinux in the workflows. # Documentation - Updated the contribution documentation for building the WasmEdge zlib plugin. # Tests - Added basic function presence check and a full deflate-inflate cycle test. # Implementation - Covered 74 functions related to ZStream and GZFile. - Implemented new functions including deflateSetHeader, inflateGetHeader, zlibVersion, gzerror, zError, get_crc_table, gzprintf, gzvprintf, and inflateBack. - Ready for review.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Serialization Completion` created by `dracoooooo`, stating `WasmEdge needs to support executing WebAssembly files in text format by converting the existing Abstract Syntax Trees (AST) into binary format. This involves reversing the code used to load binary format, located in the `lib/loader/ast`. The project aims to correctly transform existing ASTs into binary format and load them in WasmEdge. The serialization includes Instruction, Segment, Section, and Module. The milestones for this project are: - M1: Make a plan and get familiar with relevant code. - M2: Implement serialization for all instructions and add simple test cases within 3 weeks. - M3: Implement serialization for Segment, Section, Module, and add simple test cases within 3 weeks. Special attention is needed for proposals that extend the binary format, such as Bulk memory operations. - M4: Complete detailed unit tests and integration tests within 2 weeks. - M5: Code review and optimize the code within 2 weeks. - (~) Buffer of 1 week for unexpected delays. The repository for this project is at: [https://github.com/dracoooooo/WasmEdge/tree/dev/serialize](https://github.com/dracoooooo/WasmEdge/tree/dev/serialize) References: - [WebAssembly Binary Format](https://webassembly.github.io/spec/core/binary/index.html) - [WebAssembly Proposals](https://github.com/WebAssembly/proposals)`?"}
{"completion":"The labels for this issue are `c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Test] Fix socket test on macos.` created by `MediosZ`, stating `This PR addresses potential socket errors on macOS due to a size difference in `sockaddr_in` between Linux and macOS. On Linux, `sizeof(sockaddr_in) - sizeof(sockaddr_in::sin_family)` returns 14, while on macOS it returns 15 because `sin_family` is of type unsigned long on Linux but __uint8_t on macOS. The proposed solution involves adding a platform-specific condition to handle this discrepancy.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: A stream log processing framework for WasmEdge` created by `markcty`, stating `The project aims to create a log processing framework for WebAssembly applications, including components like collectors, transformers, dispatchers, and routers. The milestones include project setup, architecture design, implementation, refining design, and finalizing. Specific tasks such as researching existing frameworks, drafting architecture, implementing example combinations, refining the design, and writing documentation are also outlined, aiming for completion within 12 weeks. The project repository is hosted at https://github.com/markcty/wasm-log-flex.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[community] Propose new reviewers` created by `alabulei1`, stating `Dear community, I propose two reviewers for WasmEdge. 1. @hangedfish contributed to Andriod platform support and WasmEdge Socket SDK for C/C++. View PR #1059, #1445, and #2013. Find the WasmEdge Socket SDK for C/C++ [here](https://github.com/hangedfish/wasmedge_wasi_socket_c). 2. @yanghak contributed to GPU support and mediapipe support. View PR #2360, #2457, and #2458. The mediapipe-rs project will be transferred to WasmEdge Org soon. Check it at: https://github.com/WasmEdge/mediapipe-rs Please leave your comment.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Fix the incorrect function signature of internal WASI-NN` created by `q82419`, stating `The author is requesting assistance with the implementation of a specific feature. They are facing a challenge in integrating the feature with the existing codebase. The author proposes a solution that involves refactoring the code to accommodate the new feature and requests input on whether this approach is feasible. Additionally, they seek guidance on resolving potential compatibility issues with the existing system.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `Fix Wasmedge-Process documents grammar/instruction` created by `michael1017`, stating `This fix addresses the documentation for WasmEdge-Process. 1. Change `WasmEdge-HttpsReq` to `WasmEdge-Process`. 2. Correct grammar mistakes using Grammarly.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] New changes for extensions installation` created by `q82419`, stating `We are deprecating the WasmEdge extensions (WasmEdge-tensorflow, WasmEdge-image, and WasmEdge-tensorflow-tools) in version `0.13.0` and re-constructing the WasmEdge-tensorflow-deps for better use. When installing WasmEdge-tensorflow extensions, the installer will download the release from the same version of `WasmEdge-tensorflow-deps`. We have released new tags to avoid updating `WasmEdge-tensorflow-deps` when a new WasmEdge version is released. There are specific matrix details for different WasmEdge versions regarding the dependency installation. After version `0.13.x`, there will be no `WasmEdge-tensorflow` and `WasmEdge-tensorflow-tools`, and a new `wasmedge_tensorflow` and `wasmedge_tensorflowlite` plugin with specific tag and platform support is pending implementation.`?"}
{"completion":"The labels for this issue are `binding-rust c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Standalone rust bindings; Remove rust binding related codes.` created by `hydai`, stating `The rust binding has been relocated to [wasmedge-rust-sdk](https://github.com/WasmEdge/wasmedge-rust-sdk/).`?"}
{"completion":"The labels for this issue are `c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `fix function params in plugin/get-string/getstring.cpp` created by `edwardramsey`, stating `Fix compile error in getstring.cpp for plugin/get-string. I am encountering a compile error in getstring.cpp of the plugin/get-string directory. Need assistance in resolving this issue.`?"}
{"completion":"The labels for this issue are `c-CAPI c-Plugin c-Test c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Use StaticVector to speedup CI in debug version` created by `ibmibmibm`, stating `Add `getSpan` and `getStringView` method to `MemoryInstance`, replacing `getPointer` with length argument. Update all relative calls to `getPointer` to use `getSpan` or `getStringView`. Also, modify WASI `path_symlink` error reporting behaviors for invalid string pointers.`?"}
{"completion":"The labels for this issue are `documentation c-Plugin c-Test c-CI c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Add WASI-Logging Plugin` created by `michael1017`, stating `This PR implements the [wasi-logging](https://github.com/WebAssembly/wasi-logging) proposal, showcasing the logging API and stderr use case, with Rust source code examples and output details. It includes the `lib.rs` and `main.rs` code demonstrating the logging in action, and the output from running the code in Bash. The PR also links to the original proposal for reference.`?"}
{"completion":"The labels for this issue are `c-Test c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Refactor Poller interface for reusing same object` created by `ibmibmibm`, stating `Remove duplicate code from `poll_oneoff` with edge-trigger config. Refactor `Poller` interface to enable reusing the same object, including using a pool for reusing the `Poller`. Implement lazy removal of events on reused `Poller` and reuse `timerfd`. Additionally, add `PollerContext` for holding the `Timer` pool in `Environ`. Support absolute time flags for `poll_oneoff` in MacOS and turn on Edge-trigger test in MacOS. Lastly, extract `sleep_for` in test.`?"}
{"completion":"The labels for this issue are `c-Test c-CI c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Remove precompiled wasm assets in the source tree` created by `hydai`, stating `The Rust files will be removed after #2502. The following handcrafted WAT files will be removed:  - bindings/rust/wasmedge-sys/tests/data/fibonacci.wasm  - bindings/rust/wasmedge-sys/tests/data/import.wasm  - bindings/rust/wasmedge-sys/tests/data/test.wasm - bindings/rust/wasmedge-sys/examples/data/funcs.wasm - bindings/rust/wasmedge-sys/examples/data/fibonacci.wasm - bindings/rust/wasmedge-sys/examples/data/module2.wasm - bindings/rust/wasmedge-sys/examples/data/wasi_print_env.wasm - bindings/rust/wasmedge-sys/examples/data/module1.wasm  - test/mixcall/mixcallTestData/module2.wasm - test/mixcall/mixcallTestData/module1.wasm - test/externref/externrefTestData/funcs.wasm - test/externref/externrefTestData/stl.wasm - test/api/apiTestData/import.wasm - test/api/apiTestData/test.wasm - examples/plugin/get-string/test.wasm - examples/capi/host_functions/parse_json/parse-json.wasm - examples/wasm/fibonacci.wasm - examples/wasm/factorial.wasm - examples/wasm/factorial2.wasm Rust sources that are in tree: - examples/capi/wasi-env/wasi_get_env.wasm C sources that are in tree: - examples/capi/mandelbrot-set-in-threads/mandelbrot.wasm - bindings/rust/wasmedge-sdk/examples/data/mandelbrot.wasm Rust sources published online: - examples/wasm/add.wasm - examples/wasm/hello.wasm C sources published online: - examples/js/qjs_tf.wasm - examples/js/qjs.wasm`?"}
{"completion":"The labels for this issue are `binding-rust c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Support async wasi` created by `apepkuss`, stating `In this PR, I'm introducing the new `async_wasi` crate into the Rust SDK. This addition aims to enable asynchronous system calls, and it involves updating the SDK to support the new features provided by the crate. I would like to address the challenge of integrating these asynchronous system calls seamlessly into the SDK, ensuring compatibility and efficient usage for developers. I welcome feedback on the proposed changes and any suggestions for improvements in the integration process.`?"}
{"completion":"The labels for this issue are `c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer: Fix error message` created by `SAtacker`, stating `The TensorFlow extensions for macOS are currently limited to x86_64 architecture, causing errors on other platforms. The issue can be resolved by fixing the problem specified in GitHub issue #2477. Signed-off-by: Shreyas Atre <shreyasatre16@gmail.com>`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-CRYPTO] Fix CI Fail` created by `ibmibmibm`, stating `OpenSSL 3.0 doesn't duplicate contexts for aes-gcm and chacha20. The line endings need to be changed to unix LF, and buffer size needs to be set for correct API usage. Also, fix issue #2518.`?"}
{"completion":"The labels for this issue are `bug c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] WASI-crpyto test failed with openSSL 3.0` created by `q82419`, stating `WASI-crypto unit test failed with multiple errors and two failed tests. The expected outcome is for the unit test to pass. The hardware architectures supported are x86_64 and aarch64, and the operating systems supported are Ubuntu 22.04 and MacOS 13.2. To reproduce the issue, the following steps need to be taken:  1. Run 'apt update && apt install -y libssl-dev' 2. Execute 'cmake -GNinja -Bbuild -DWASMEDGE_PLUGIN_WASI_CRYPTO=On -DWASMEDGE_BUILD_TESTS=ON' 3. Build the project with 'cmake --build build' 4. Finally, navigate to 'build/test/plugins/wasi_crypto' and run './wasiCryptoTests'.`?"}
{"completion":"The labels for this issue are `documentation binding-rust c-Plugin c-Test c-Installer c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Deprecate wasmedge-httpsreq` created by `hydai`, stating `Issue: Fix #2514  Original issue: \"Our application is experiencing a runtime error which leads to unexpected termination. Specifically, when the user tries to save a new entry, the application crashes with an 'index out of range' error. This issue seems to be occurring due to an inconsistency in the data validation logic. It would be helpful to review the data validation process to identify and fix the root cause of this error.\" Refined summary: \"When saving a new entry, the app crashes with an 'index out of range' error. This is likely due to inconsistent data validation logic. Need to review and fix the data validation process to address this issue.\"`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `Deprecated Notice: httpsreq plugin will be replaced by wasmedge-rustls-plugin` created by `hydai`, stating `Deprecation Notice: `httpsreq` TLS Plugin We've developed a new TLS plugin based on the rustls library, and as a result, the current `httpsreq` TLS plugin will be deprecated in the 0.13.0 release. The new plugin, `wasmedge-rustls`, will be released simultaneously to facilitate a smooth transition for users. After the 0.13.0 release, no further updates or fixes will be provided for the `httpsreq` TLS plugin. Action Items: - Remove `httpsreq` from the source tree - Remove `httpsreq` related CI workflow, including build, test, and release - Remove the `httpsreq` related document We encourage all users to migrate to the new rustls-based plugin as soon as possible to ensure continued support. Thank you for your cooperation during this transition.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Refactor and reorganize codes` created by `ibmibmibm`, stating `Separate different backend codes to different files and check all parameters before processing.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Upgrade spdlog to v1.11.0` created by `ibmibmibm`, stating `Replace all `std::ostream` usage with `fmt::format`. This will enhance the readability and maintainability of the code. This change is needed to improve the current logging and formatting mechanism. The primary challenge is to identify all occurrences of `std::ostream` and properly replace them with `fmt::format`. The proposed solution is to refactor the codebase systematically to ensure all instances are updated correctly to use the new formatting library.`?"}
{"completion":"The labels for this issue are `bug priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `CI failed after upgrade wasmedge base image to ubuntu 22.04` created by `hydai`, stating `Working PR #2508. Some CI jobs failed after the wasmedge docker image upgrades to ubuntu 22.04. The CI jobs should be all green.`?"}
{"completion":"The labels for this issue are `feature c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `Support \"Named Models\" in WASI NN` created by `juntao`, stating `A new feature is being added to the WASI NN spec, and we need to provide support for it. Details can be found here: https://github.com/WebAssembly/wasi-nn/issues/36`?"}
{"completion":"The labels for this issue are `enhancement binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Standalone Repository for WasmEdge Rust Binding from Version 0.13.0 Onwards` created by `hydai`, stating `Proposal: Create a standalone repository for the Rust binding of WasmEdge starting from version 0.13.0 release. Motivation: The Rust binding has a unique development roadmap, and separating it into its own repository would enable independent versioning, focused issue tracking, clearer roadmap, and reduced complexity in the WasmEdge repository. Implementation Details: The Rust binding will be split from the WasmEdge repository, maintaining its history and managed by the same maintainers. Efforts will ensure compatibility and synchronization between the two projects. Request: I kindly request feedback on this proposal from WasmEdge community members and the mentioned maintainers.`?"}
{"completion":"The labels for this issue are `bug priority:medium c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to compile with fmt 10.0.0` created by `FtZPetruska`, stating `fmt 10.0.0 update removed implicit conversions to primitive types, causing build error due to compatibility issues. The proposed fix involves using `format_as`, but it's suggested to guard its declaration with `#if FMT_VERSION > 90000`. A patch has been provided to resolve the build issue on version 0.12.1. The essential steps to reproduce the issue are installing fmt 10.0.0, spdlog, and building WasmEdge. Additionally, the author specified optional environment and build information for reference.`?"}
{"completion":"The labels for this issue are `bug c-Test c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Fix WASI ci test` created by `ibmibmibm`, stating `Deny absolute path access and open directory with `__WASI_OFLAGS_DIRECTORY` flag. This access control mechanism needs to be implemented to prevent unauthorized access to absolute paths. The proposal is to enforce the use of the `__WASI_OFLAGS_DIRECTORY` flag when opening directories to ensure proper permission checks are conducted. This will enhance system security and prevent potential security risks associated with accessing absolute paths directly, without proper validation.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Missing `ntohs` conversion for 'port' variable in inode-linux.cpp.` created by `L-jasmine`, stating `The 'port' variable should be converted using the ntohs function. Currently, the code sets the port based on the address family, but it should use ntohs for both AF_INET and AF_INET6. The expected code snippet reflects this change. The main action item is to replace the current assignment of the port variable with ntohs for both address families.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Deprecate WasmEdge 0.9.x installation` created by `q82419`, stating `Deprecate WasmEdge 0.9.x installation before 2023/05/31, as with the 0.8.x.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Undefined behavior in LEB128 decoding` created by `rockwotj`, stating `While integrating with WasmEdge for a POC, I encountered undefined behavior with ubsan enabled when loading a wasm file generated by tinygo. This issue appears to stem from an error in the LEB128 decoding logic, resulting in ubsan violations. The expected behavior is to have no ubsan violations. Environment: - OS: Linux redpanda 5.15.0-70-generic - C++ Compiler version: clang14 - CMake version: 3.22.1 - CMake flags: -DCMAKE_BUILD_TYPE=Debug -DWASMEDGE_BUILD_AOT_RUNTIME=OFF - Boost version: 1.75 To reproduce, attempt to load the provided golang_identity_transform.wasm file from an in-memory buffer, including necessary custom host functions. Link to the file: [golang_identity_transform.wasm.zip](https://github.com/WasmEdge/WasmEdge/files/11425165/golang_identity_transform.wasm.zip)`?"}
{"completion":"The labels for this issue are `priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Fix deprecated actions and set-output mechanism in current workflow` created by `hydai`, stating `We need to update our actions using node12 as it will soon be deprecated, along with the `set-output` mechanism by GitHub. This affects workflows such as create-release, retrieve-version, and upload-release-assets. The expected outcome is to have no deprecated warnings during the CI workflow.`?"}
{"completion":"The labels for this issue are `enhancement c-CLI c-CAPI c-Test c-ExceptionHandling`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] Add exception handling proposal on interpreter mode` created by `harry900831`, stating `We can now generate WebAssembly (wasm) with exception handling using the command `emcc -O1 -fwasm-exceptions a.cpp -o a.wasm` and test it in interpreter mode. An example code is provided, demonstrating exception handling for division by zero and negative numbers. However, when replacing printf with cout, the execution may crash due to complicated exception handling blocks within cout. We aim to address this issue in the future. References: - Webassembly Specifications with exception handling: [WebAssembly Exception Handling Specifications](https://webassembly.github.io/exception-handling/) - Exception handling proposal: [WebAssembly Exception Handling Proposal](https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md)`?"}
{"completion":"The labels for this issue are `c-Plugin c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] Add GPU target support for pytorch backend.` created by `yanghaku`, stating `This PR enables GPU support for the WASI-NN Pytorch backend to enhance deep learning inference speed. To utilize the GPU target, the requirements are: 1. Hardware: Nvidia GPUs with CUDA support, AMD GPUs with ROCM support. 2. Runtime: ```libtorch.so``` should be built with CUDA/ROCM support. 3. User Code: Select the ```GPU``` target when loading the graph. Fix #2140`?"}
{"completion":"The labels for this issue are `bug priority:high c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `The behavior of `getaddrinfo` is wrong in the 0.12.0 release` created by `hydai`, stating `The `getaddrinfo` is not working in the 0.12.0 release but works in 0.11.2. Check details at https://github.com/WasmEdge/WasmEdge/discussions/2439. Current State: ![image](https://user-images.githubusercontent.com/2776756/234284373-9f09a9f2-2022-44d7-90aa-3ba6f2bb2ef9.png). Expected: ![image](https://user-images.githubusercontent.com/2776756/234284487-0b371ff3-7385-4137-be58-4ab9b3bf0575.png)`?"}
{"completion":"The labels for this issue are `good first issue platform-macos OSPP c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `[OSPP] feat: Expanding WasmEdge WASI Socket Support to macOS` created by `hydai`, stating `The goal is to enable the WasmEdge WASI Socket component to work on macOS, in addition to Linux, for seamless cross-platform support. Key objectives include identifying issues, implementing necessary changes, and testing for macOS compatibility. Deliverables expected are a modified version with macOS support, comprehensive documentation, a successful test suite report, and functional examples on macOS. To participate in this project, complete challenge #2453 before the application deadline.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] Link failed on Apple silicon for LLVM-15 or higher` created by `q82419`, stating `When using LLVM-15 or higher on Apple silicon platforms, linking fails with the `-DWASMEDGE_LINK_LLVM_STATIC=ON` flag. The expected outcome is successful linking. The environment consists of aarch64 (M2 max) architecture and MacOS 13.2.1.  To reproduce, run: ``` brew install llvm # or install llvm@15 cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_LINK_LLVM_STATIC=ON -DWASMEDGE_BUILD_PACKAGE=\"TGZ\" . cmake --build build --target package ````?"}
{"completion":"The labels for this issue are `enhancement c-CAPI c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[Common] Move async class to common and support in executor.` created by `q82419`, stating `This relates to WasmEdge `0.13.0`. I encountered an issue where the WasmEdge `0.13.0` does not properly handle certain SIMD instructions. Specifically, the failing operations are related to floating-point computations. This impacts the correctness and performance of my application, which heavily relies on SIMD optimizations. I propose enhancing WasmEdge to robustly support all SIMD instructions, including those for floating-point operations. This would enable my application to leverage the full potential of SIMD, ensuring both correctness and performance. I seek insights on potential workarounds or updates on the progress toward resolving this issue.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] universal WASM format spec test failed on MacOS aarch64` created by `q82419`, stating `The universal WASM format fails in spec test including `core binary-leb128`, `core imports`, `core linking`, `core start`, `core tokens`, `multi-memory imports`, `threads imports`, giving \"AOT section -- number of codes not matching\" error, using `wasmedgeAOTCoreTests`. The native format passed. I expect the spec test suite to pass on aarch64 MacOS 13.2.1.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `[AOT] simd spec test failed on MacOS aarch64` created by `q82419`, stating `The AOT mode of spec test suite failed for certain SIMD arithmetic tests, resulting in a bus error. To reproduce, use the following commands: ```bash cmake -DWASMEDGE_BUILD_TESTS=On -GNinja -Bbuild . cmake --build build cd build/test/aot ./wasmedgeAOTCoreTests ``` Expected outcome: Pass the spec test suite. Environment: - Hardware Architecture: aarch64 (Apple M2 max) - Operating system: MacOS 13.2.1`?"}
{"completion":"The labels for this issue are `bug platform-windows compiler-MSVC`.","prompt":"Can you assign labels to the GitHub issue titled `int128.h incompatible with MSVC` created by `Photosounder`, stating `I'm encountering compilation errors using WasmEdge `0.12.0-alpha.2` on MSVC. It seems no one has tried WasmEdge on Visual Studio recently. The issue is with `int128.h` containing nonstandard `__int128` keywords not supported on MSVC, and the conditional statements are not effective in resolving this. The original `#if` statement and the updated one aren't solving the issue. I'm suggesting using `#if defined(__SIZEOF_INT128__)` instead.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64 c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: fully support wasmedge-wasi-socket on the macOS apple silicon platform` created by `hydai`, stating `Some examples fail to execute on macOS, such as running 'wasmedge' with a specific command, resulting in a panic error related to server listener creation. The expected behavior is for it to work on macOS Apple Silicon as it does on Linux. ### Environment - Hardware Architecture: aarch64 - Operating system: macOS - WasmEdge version: 0.11.2 ### Steps to Reproduce Follow the tutorial on macOS.         - Maintain the original tone and perspective of the author to offer a clearer, more straightforward version of their original text.         - Preserve any direct quotes, technical terms, or specific examples the author used to illustrate their points.         - Avoid shifting to a third-person narrative and do not add extraneous wordings from the original text.         - Ensure that all key actionable items, technical specifics, and proposed solutions or requests made by the author are presented clearly and succinctly.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Bug] - Remove Checkbox in Release Process Docs and Update Installer Docs` created by `adithyaakrishna`, stating `The release process docs have checkboxes at the start of the list, which I've removed in this PR. I've also made the \"Notes\" heading bold to differentiate it from the text on the site. This change will help visitors easily identify the notes section.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump github/super-linter from 4 to 5` created by `dependabot[bot]`, stating `The issue is about upgrading [github/super-linter](https://github.com/github/super-linter) from version 4 to 5. The release notes of version 5.0.0 include several dependency updates and bug fixes. The repository has a high compatibility score. The author indicates that Dependabot will resolve any conflicts, and provides commands for triggering actions. The key action items are triggering a rebase manually and using Dependabot commands for various actions on the PR, like rebase, merge, squash and merge, recreate, cancel merge, reopen, close, and ignore. Additionally, there are various options available for executing Dependabot commands on this PR. The main technical detail is the version upgrade from 4 to 5, which brings various updates and bug fixes for dependencies. The author mentions a high compatibility score and provides instructions for triggering Dependabot actions on the PR.`?"}
{"completion":"The labels for this issue are `enhancement c-Plugin c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin][WIP] Implement OpenCV-mini` created by `dannypsnl`, stating `The \"transform\" feature includes functions for normalization, blurring, and bilinear sampling. For read/write operations, \"imdecode\" is used to decode an image from an instance buffer, while \"imencode\" is used to encode an image into an instance buffer and \"imwrite\" saves an image to a file. The \"imshow\" and \"waitkey\" functions handle image display, with \"imshow\" currently having issues on MacOS. Example usage can be found at https://github.com/second-state/opencvmini-example.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Support Ubuntu version of extensions installation` created by `q82419`, stating `The Ubuntu version of WasmEdge is not compatible with the `manylinux` version of extensions such as WasmEdge-tensorflow and WasmEdge-image. I've updated the ubuntu releases for WasmEdge-tensorflow and WasmEdge-image from WasmEdge 0.11.1. Please support the installation of the same `DIST` of the extensions and WasmEdge, and refrain from applying the WasmEdge-tensorflow-tools as the tools are stand-alone executables. The extension with Ubuntu releases can be tested with versions: `0.11.1`, `0.11.2`, and `0.12.0-alpha.2`. cc @SAtacker`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `Plugin zlib` created by `NeelDigonto`, stating `I have a minimal but complete zlib implementation with `WasmEdge C SDK` available on [https://github.com/notfathomless/wasmedge-zlib/tree/main/src](https://github.com/notfathomless/wasmedge-zlib/tree/main/src). I've begun transitioning this code into a proper WasmEdge Plugin. The progress update for this transition is as follows: - Basic Plugin Setup. - `deflateInit_` - `deflateInit` - `deflate` - `deflateEnd` - `inflateInit_` - `inflateInit` - `inflate` - `inflateEnd` All these functions are currently implemented in my `WasmEdge C SDK` playground. I'll continue re-implementing the functions after finishing my GSOC Proposal. Thank you!`?"}
{"completion":"The labels for this issue are `enhancement c-CLI c-Test c-CI`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] update for unified tool` created by `michael1017`, stating `Add wasmedge compile in CI. I'd like to include the wasmedge compile step in our continuous integration pipeline. This will ensure that our WebAssembly code gets compiled correctly and early in the development process. The challenge here is to integrate the compilation process seamlessly into our existing CI configuration. I propose setting up a dedicated CI job specifically for wasmedge compile, and then incorporating it into our overall pipeline. This will help catch any compilation issues early on and streamline the development workflow.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Update documents for unified tool` created by `michael1017`, stating `We are currently reserving the `wasmedgec` tool and have not removed it from the installation documents. However, we've added notes to inform users that `wasmedgec` is equivalent to `wasmedge compile` and that we plan to deprecate `wasmedgec` in the future. To reflect this change, I've replaced all instances of `wasmedgec` with `wasmedge compile` in the user guides and examples.`?"}
{"completion":"The labels for this issue are `c-CAPI c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `draft: Cpp sdk for WasmEdge` created by `Subhra264`, stating `Added a `wasmedge.hh` file in `include/api/wasmedge/` folder to declare methods and classes for the C++ SDK. Current focus is on outlining classes and methods to expose, with room for suggestions on setting up the SDK. Will update description as new changes are made.`?"}
{"completion":"The labels for this issue are `documentation enhancement c-CLI c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `[Tools] Unified WasmEdge tools Prerelease` created by `michael1017`, stating `This PR adds `compile` and `run` subcommands for the `wasmedge` tool, allowing users to now use `wasmedge compile` and `wasmedge run`. However, the original tool `wasmedgec` is still in use due to its extensive mention in project documents and tests. To address the removal of `wasmedgec`, the proposal is to create a new issue for its cleanup after updating all related documents.`?"}
{"completion":"The labels for this issue are `c-Plugin c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] tensorflow lite backend - fix set_input and get_output bugs when checking` created by `yanghaku`, stating `Update errno for wasi-nn plugin [(wasi-nn spec main branch)](https://github.com/WebAssembly/wasi-nn/blob/main/wasi-nn.wit.md). The ```TfLiteTensorCopyToBuffer``` function requires that ```output_data_size``` matches ```TfLiteTensorByteSize(tensor)```. When ```OutBuffMaxSize``` is less than ```TfLiteTensorByteSize(tensor)```, TfLite will return ```kTfLiteError``` and wasi-nn plugin will return ```Success```. In this case, the wasi-nn plugin may return ```InvalidArgument``` to indicate a failure in ```get_output```. Additionally, in the ```SetInput``` function, the variable ```DimensionBuf``` is used before checking if it is ```NULL```, and the variable ```TFDimension``` is unused and thus candidates for removal. To mitigate these issues, dimension and tensor byte checks have been added to ensure ```input_data_size``` matches ```TfLiteTensorByteSize(tensor)```. In relation to the tflite API, it is essential for the WASI-NN TensorFlow Lite plugin to ensure that the ```model_data``` is not released or modified during the lifetime of the ```TfLiteModel``` and any ```TfLiteInterpreter``` objects created from it, to prevent a segment fault. The next steps entail resolving the outlined issues.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: A Rust library crate for mediapipe models for WasmEdge NN` created by `yanghaku`, stating `[Motivation] To enable easy integration of MediaPipe models in WasmEdge applications, we aim to build a Rust library crate. MediaPipe provides ML models for streaming data and offers Python, iOS, Android, and TFLite-JS SDKs. As WasmEdge is increasingly used in data streaming applications, we want to create a Rust library crate specifically for integrating MediaPipe models in WasmEdge. [Details] - Each MediaPipe model has a description page detailing input and output tensors in Tensorflow Lite format, supported by the WasmEdge Tensorflow Lite plugin. - We require a set of library functions for each model, performing tasks such as processing input media objects into tensors, running inference using WasmEdge NN, and interpreting the result tensor to return output parameters and visual representations of the inference results. [Milestones] - Implement tasks for image classification, object detection, text classification, audio classification, vision tasks, and GPU support for MediaPipe models within specified timeframes. - Transfer the repository to https://github.com/WasmEdge/mediapipe-rs and publish the library to crates.io after writing the necessary documents. [Repository URL] - The repository will be transferred to https://github.com/WasmEdge/mediapipe-rs. [Mediapipe tasks progress] The following tasks have been completed for MediaPipe: - Object Detection - Image Classification - Image segmentation - Gesture Recognition - Hand Landmark Detection - Image embedding - Face Detection - Audio Classification - Text Classification [Appendix] We have raised a feature request in the WasmEdge repository for the Rust library crate for MediaPipe models: https://github.com/WasmEdge/WasmEdge/issues/2229.`?"}
{"completion":"The labels for this issue are `breaking changes`.","prompt":"Can you assign labels to the GitHub issue titled `Function reference proposal: Refactor the `ValType`.` created by `q82419`, stating `Concepts: Types `ValType`, `RefType`, and `BlockType` should be 8 bytes or less to prevent increasing the instruction class size. The length of data for these types is reserved as `uint64_t`. `RefType` is a subset of `ValType`, and `HeapType` should be implemented within `RefType`. For the C API, raw data should be copied to the struct. Naming patterns: `WasmEdge::ValType` and `WasmEdge::RefType` describe the value types. C++ enum classes `WasmEdge::ValTypeCode`, `WasmEdge::RefTypeCode`, and `WasmEdge::NumTypeCode` provide codes. `WasmEdge_ValType` is the struct for storing value type data, and `WasmEdge_ValTypeCode`, `WasmEdge_RefTypeCode`, and `WasmEdge_NumTypeCode` are C enums for the codes. TODO: - Fix the JAVA binding - Fix the Rust binding`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Instantiation failed error when  Run AI Inference function based on  Pytorch` created by `johnvan08`, stating `Followed the AI inference guide on WasmEdge but encountered an error when running the command. Received the error message: `[2023-03-02 13:34:31.338] [error] instantiation failed: unknown import, Code: 0x62` Tried building the .wasm file, but the issue persisted.  Environment: - Hardware Architecture: x86\\_64 - Operating system: WSL Ubuntu 20.04 - rust version: rustc/cargo 1.67.1 (d5a82bbd2 2023-02-07)   Looking for assistance to resolve this error and successfully run the AI inference function on WasmEdge.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Some CI actions may fail due to a potential action runner issue` created by `hydai`, stating `Running `apt upgrade` triggers error messages related to `grub-efi-amd64-signed` package, resulting in an error status 32. The error indicates issues with the package's post-installation script and a non-existent device at `/var/lib/grub/esp`. The expected result is for the process to work without errors. Reference: [here](https://github.com/orgs/community/discussions/47863)`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Update build from source section on Ubuntu` created by `hydai`, stating `\"Fixes #2320  When using the 'calculate' method with large numbers, it results in inaccurate calculations due to floating point precision. This issue arises specifically when dealing with currency-related calculations and can lead to significant discrepancies. As a solution, considering using a library such as 'decimal.js' for more precise arithmetic operations. Additionally, validating the inputs and outputs to ensure accurate results to alleviate the impact of floating point precision errors.\"`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/upload-artifact from 2 to 3` created by `dependabot[bot]`, stating `Bumped [actions/upload-artifact](https://github.com/actions/upload-artifact) from version 2 to 3.  Updated default runtime to node16, package-lock.json file version to 2, with breaking change of running all scripts with Node 16. Additional commits and release notes can be viewed for more details.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/checkout from 2 to 3` created by `dependabot[bot]`, stating `The issue involves updating the actions/checkout from version 2 to 3. The release notes mention the need for a minimum Actions Runner version of 2.285.0 to run, which is available in GHES 3.4 or later. Specific changes and backports in version 2.6.0 and earlier are detailed. The changelog provides a comprehensive list of versions and their respective updates. The author may need assistance in understanding the implications of the update and any relevant considerations.`?"}
{"completion":"The labels for this issue are `bug documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs]: Corrections for TF-lite` created by `manulpatel`, stating `There are a few corrections needed for TensorFlow Lite (TF-lite) in version 5.2.4 (Neural Network for WASI): 1. Add TF-lite to the prerequisites section. 2. Update \"using the PyTorch backend\" to \"using the TensorFlow-Lite backend.\" 3. Change \"The above Mobilenet PyTorch model\" to \"TensorFlow-Lite model\" and fix the link to the model/python code.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `Add WASMEDGE_LIB_DIR in installer generated scripts` created by `juntao`, stating `The WasmEdge installer creates a file to set up env variables, but the `WASMEDGE_LIB_DIR` variable is missing. To use WasmEdge in embedded mode or create WasmEdge plugins, the user needs to manually export it.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Migrate from k8s.gcr.io to registry.k8s.io.` created by `hydai`, stating `Reference: kubernetes/k8s.io#4780 The issue involves challenges with accessing the Kubernetes API server when using a client-go informer within a custom controller. The specific hurdle is related to malformed URLs and proxy issues when trying to list resources. The proposed solution is to investigate and potentially modify the client-go informer code to address the URL format and proxy concerns. Furthermore, the author suggests exploring compatibility with specific environment setups, such as running Kubernetes behind a proxy server or with custom URL configurations. The primary technical details revolve around understanding and resolving the API server access difficulties within the context of client-go informer usage.`?"}
{"completion":"The labels for this issue are `c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Add C API version of plug-in example.` created by `q82419`, stating `Due to the lack of C API example, we need unit test and documentation for the plug-in. Add the C API version example of plug-in in WasmEdge.`?"}
{"completion":"The labels for this issue are `bug c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Invalid base rights for preopen fd` created by `harry900831`, stating `In the [wasi-testsuite](https://github.com/WebAssembly/wasi-testsuite) code, using `wasi::OFLAGS_DIRECTORY` with write permission can cause an error when WasmEdge enables all rights for preopen fd. This issue is discussed in detail at: https://github.com/WebAssembly/WASI/issues/514. This behavior results from combining `wasi::OFLAGS_DIRECTORY` with write permission.`?"}
{"completion":"The labels for this issue are `bug c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Setting wrong rights in wasi::path_open` created by `harry900831`, stating `When using `wasi::path_open`, the rights for `file_fd` are the same as `dir_fd` instead of the specified rights. The expected rights for `file_fd` are `wasi::RIGHTS_FD_READ | wasi::RIGHTS_FD_WRITE | wasi::RIGHTS_FD_FILESTAT_GET | wasi::RIGHTS_FD_FILESTAT_SET_SIZE | wasi::RIGHTS_FD_FILESTAT_SET_TIMES`.`?"}
{"completion":"The labels for this issue are `bug c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to get the environment variable with special character` created by `harry900831`, stating `WasmEdge failed to handle the environment variables `a=text`, `b=escap \" ing`, and `c=new\\nline` in this specific test. The issue occurred while accessing the environment variables within the WASI testsuite.`?"}
{"completion":"The labels for this issue are `bug c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Filestat for stdin, stdout and stderr should be zero` created by `harry900831`, stating `According to the test fd_filestat_get.rs in wasi-testsuite and the maintainer's reply on WASI issue 514, we need to prevent leaking host information by zeroing out the filestat field for stdin, stdout, and stderr.`?"}
{"completion":"The labels for this issue are `bug c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: semantic exit codes for traps in wasm code execution` created by `harry900831`, stating `Status for abort.wasm and assert-false.wasm should return 134, but when running abort.wasm with wasmedge, the status is 1 due to a trap in the function. The wat file includes a function that runs into a trap. Upon checking the implementation of wasmtime, it appears to return 134 when encountering a trap. The author suggests a workaround by modifying specific parts in the runtimeTool.cpp file in the WasmEdge repository. These modifications involve changing the return values to 128 + SIGABRT.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `chore(deps): Bump docker/build-push-action from 3 to 4` created by `dependabot[bot]`, stating `The issue updates Docker build-push-action from version 3 to 4. The release notes for version 4 highlight the addition of support for SLSA Provenance attestation, which may cause issues with registry and runtime support. The provenance attestation functionality can be disabled if needed. Specific changes and fixes are listed in the release notes and commits. The author presents a Dependabot compatibility score for the update. The author also includes various Dependabot commands and options for executing actions on the PR.`?"}
{"completion":"The labels for this issue are `platform-windows c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Replace all of the `winapi` with `boost/winapi`` created by `hydai`, stating `We need to replace all `winapi` usage that doesn't belong to `boost/winapi` in the `host/wasi` part. This will unify the coding style, so we must find and replace these instances with the appropriate `boost/winapi` functions and definitions.`?"}
{"completion":"The labels for this issue are `bug c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `When using WasmEdge *Host Function* with *Threads proposal*, VM would meet some unknown errors.` created by `aetiurf`, stating `When using WasmEdge *Host Function* with *Threads proposal*, the VM encounters unknown errors, leading to an out of bounds memory access. This occurs specifically when both *Host Function* and *Threads proposal* are utilized together. The expected output of `Get result: 100` is not achieved. Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 22.04.1 LTS Reproduction: - The issue can be reproduced through the author's repository using WasmEdge C SDK.`?"}
{"completion":"The labels for this issue are `platform-android`.","prompt":"Can you assign labels to the GitHub issue titled `use birds_v2.wasm on android app` created by `LiangFang001`, stating `I'm trying to use `birds_v2.wasm` on Android NDK, but I'm encountering SELinux denial when Rust attempts to access `/sdcard/wasmedge/lite-model_aiy_vision_classifier_birds_V1_3.tflite`. I've already allocated `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` permissions for the app. Disabling SELinux with `setenforce 0` resolves the issue, but I'm seeking an alternative approach to use on the Android app.`?"}
{"completion":"The labels for this issue are `c-Internal c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `feat: provide a mock wasi-nn component in the wasmedge core` created by `hydai`, stating `This is a draft proposal to handle the WasmEdge component. If users don't install or install the wasi-nn plugins incorrectly, WasmEdge may report import function not found errors. To avoid confusion, I suggest providing a mock component. It will display \"Please install wasi-nn plugin errors\" to prompt users to install the plugin properly. Alternatively, the mock component can use the installed wasi-nn plugins to replace itself. /cc @q82419`?"}
{"completion":"The labels for this issue are `LFX Mentorship feature c-CLI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Unified WasmEdge tools` created by `hydai`, stating `The goal is to simplify the usage of WasmEdge tools by integrating them under a single entry point, 'wasmedge'. This will include subcommands such as 'run', 'compile', 'sign', 'verify', and 'test'. The focus of the first stage will be on implementing 'wasmedge run' and 'wasmedge compile', with the potential to add more features later. Candidates with C++ knowledge and optional WebAssembly understanding can apply through the LFX mentorship website and complete the pretest available on GitHub. The implementation should ensure the new integrated tool fully supports all existing commands and features, with 'wasmedgec' being directly replaced by 'wasmedge compile'. It's crucial to consider how 'wasmedge' handles command line usage, converts cmd options into internal configurations, interacts with private components, and communicates error/warning messages when necessary.`?"}
{"completion":"The labels for this issue are `documentation c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Add installer guide` created by `hydai`, stating `Replace #2207 I'm encountering an issue where the replace function is not working as expected when using a certain pattern with multiple matches. It seems to be related to the overlapping matches, causing unexpected behavior. It would be helpful if the replace function could handle this scenario by providing an option to specify whether to allow or disallow overlapping matches. This could be implemented as a new parameter in the replace function, allowing users to explicitly control the behavior. This enhancement would improve the flexibility and accuracy of the replace function in handling complex patterns with multiple matches.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `The workflow of the python installer is failing on the master branch` created by `hydai`, stating `The old installer and the new installer have different comparison results. We need to check if the workflow needs updating to match the latest version. The CI should be green. Reference: https://github.com/WasmEdge/WasmEdge/actions/runs/3874956072`?"}
{"completion":"The labels for this issue are `c-CLI c-Test c-WASI c-Example`.","prompt":"Can you assign labels to the GitHub issue titled `[Socket] AF_UNIX Support` created by `LFsWang`, stating `Implement #2138 with support for Linux and MacOS. Fix the issue with `accept` not accepting remote addresses longer than `IPv4` address. This should be moved to #2259. Signed-off-by: LFsWang <tnst92002@gmail.com>`?"}
{"completion":"The labels for this issue are `documentation c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Add installer guide` created by `hydai`, stating `Issue: Fixes #2206 Description: The current implementation of the authentication module is causing performance issues. The token validation process is taking longer than expected, leading to delays in user authentication. Additionally, the token refresh mechanism is not functioning optimally, resulting in unnecessary requests to the authentication server. Proposed Solution: I suggest refactoring the token validation process to improve efficiency. Implementing caching for validated tokens can help reduce the response time for authentication requests. Additionally, optimizing the token refresh mechanism by introducing token expiration checks locally can minimize unnecessary server requests. Challenges: The main challenge lies in ensuring the integrity and security of the token validation process while optimizing for performance. Careful consideration of caching strategies and expiration checks is crucial to avoid compromising security. Action Items: 1. Refactor the token validation process to incorporate caching for validated tokens. 2. Optimize the token refresh mechanism by introducing local token expiration checks. 3. Conduct thorough testing to validate the performance improvements without compromising security.`?"}
{"completion":"The labels for this issue are `documentation c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Provide a spec file to describe the feature and behavior of the WasmEdge installer` created by `hydai`, stating `We need a document named `installer guide` to specify the features, behavior, options, flags, and use scenarios for the installer. This will help clarify and reduce maintenance costs. Key tasks: Define options and flags, and describe use scenarios.`?"}
{"completion":"The labels for this issue are `arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Can't install WasmEdge on maxOS with M2 chip` created by `alabulei1`, stating `I installed WasmEdge following the book's guide, and the log confirmed the successful installation. However, running `wasmedge -v` in the terminal did not produce any output, despite the installation.  Expected: Running `wasmedge -v` should display the correct version if WasmEdge was installed successfully.  Environment: - Hardware Architecture: aarch64 - Operating system: macOS Ventura`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Remove the `0.8.x` supporting` created by `q82419`, stating `Remove support for `0.8.x` in the installer as per issue #2062. This involves eliminating all `0.8.x` WasmEdge and extensions, including dependencies. Simplifying the installer by removing image dependencies is also recommended.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Update the plug-in table` created by `q82419`, stating `As the table in the install.py file needs an update to the latest release (0.11.2), please make the following changes: - `wasi_crypto`: ubuntu20.04 x86_64, manylinux2014 x86_64, manylinux2014 aarch64 - `wasi_nn-openvino`: ubuntu20.04 x86_64 - `wasi_nn-pytorch`: ubuntu20.04 x86_64, manylinux2014 x86_64 - `wasi_nn-tensorflowlite`: ubuntu20.04 x86_64, manylinux2014 x86_64, manylinux2014 aarch64 - `wasmedge_httpsreq`: ubuntu20.04 x86_64, manylinux2014 x86_64, manylinux2014 aarch64`?"}
{"completion":"The labels for this issue are `bug c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Python installer does not place double quotes over source string` created by `SAtacker`, stating `When installing with the python installer, double quotes are not added, resulting in the current state being \". /root/.wasmedge/env\" instead of the expected \". \\\"/root/.wasmedge/env\\\"\". This leads to the uninstaller being unable to find the source string and making it unable to remove it. To reproduce, simply install using the python installer.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Support $DIST for WasmEdge core` created by `q82419`, stating `The current WasmEdge `$DIST` only supports plug-ins, preventing mixing of core and plug-ins for ABI compatibility and dependencies, especially for `WASI-NN`. The `WasmEdge-tensorflow` and `WasmEdge-image` extensions are not relevant because they work with the C API. Expectation: If the detected or assigned $DIST is `Ubuntu 20.04` or `manylinux2014`, the corresponding WasmEdge version and plugins should be installed. For example, on Ubuntu 20.04: ```bash $ ./install.sh -v 0.12.0-alpha.1 -D ``` And on `manylinux2014`: ```bash $ ./install.sh -v 0.12.0-alpha.1 -D --dist manylinux2014 ``` Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 20.04`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled ` Installer consider use unified format in argument and backward compatible warning` created by `CaptainVincent`, stating `The installer update changed argument keys and values, which should not directly break other projects. The proposed solutions are to maintain backward compatibility for old keys with a warning before deprecating them, and to require capitalized first letters for platform values like Linux and Darwin, although the general purpose of this rule is uncertain.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Utils] Installer and CI: fixes and improvements` created by `SAtacker`, stating `CI should fail when a .bashrc is generated. Currently, it reports both pass and fail without exiting.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Header files in default ~/.wasmedge directory removed on installing tensorflow extension` created by `SAtacker`, stating `The installer removes header files after installing tensorflow in the default directory ~/.wasmedge. When installing in the default path with the tensorflow extension, the header files should be retained.`?"}
{"completion":"The labels for this issue are `bug priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] The version of extensions should be the same of WasmEdge if the version not assigned` created by `q82419`, stating `The WasmEdge extensions currently install the latest release if the version is not assigned, even when a specific WasmEdge version is assigned. The WasmEdge extension's version should match the assigned WasmEdge version. Expected behavior during installation: - When installing with no specific version assigned: `./install.sh -e all`, WasmEdge 0.11.2, WasmEdge-image, and WasmEdge-tensorflow 0.11.2 should be installed. - When installing with WasmEdge version 0.11.0 assigned: `./install.sh -e all -v 0.11.0`, WasmEdge 0.11.0 should be installed, and WasmEdge-image and WasmEdge-tensorflow should match the assigned version. - When installing with WasmEdge version 0.11.1 assigned and Image version 0.11.0 assigned: `./install.sh -e all -v 0.11.1 --image-version 0.11.0`, WasmEdge 0.11.1 and WasmEdge-image 0.11.0 should be installed, and WasmEdge-tensorflow should match the assigned version. Environment: - Hardware Architecture: x86_64 - Operating system: MacOS 10.15`?"}
{"completion":"The labels for this issue are `bug priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Incorrect path of `wasmedge-image.h` header` created by `q82419`, stating `After installation, the `wasmedge-image.h` header is placed in the wrong path. It should be moved to `.wasmedge/include/wasmedge/`. To reproduce, use the command `install.sh -v 0.12.0-alpha.1 -e all -D --tf-version 0.12.0-alpha.1 --tf-deps-version 0.12.0-alpha.1 --tf-tools-version 0.12.0-alpha.1 --image-version 0.12.0-alpha.1 --image-deps-version 0.12.0-alpha.1`. This issue is observed on MacOS with an x86_64 architecture.`?"}
{"completion":"The labels for this issue are `c-Installer`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Unexpected `.bashrc` file generated on MacOS` created by `q82419`, stating `After installing WasmEdge with the installer on MacOS 10.15, the `.bash_profile` adds the `source` command but also generates a redundant `.bashrc` file. The expected behavior is for only the `.bash_profile` to be needed, making the `.bashrc` file redundant. This occurs on x86_64 hardware architecture.`?"}
{"completion":"The labels for this issue are `priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] New tensorflow dependency` created by `q82419`, stating `Due to the upcoming use of the tensorflow C++ API for the WASI-NN tensorflow backend, we need to update the tensorflow dependency to version `0.12.0`. After version `0.12.0-alpha.1`, `libtensorflow_cc.so.2.6.0` will replace `libtensorflow.so.2.6.0`, along with the `.dylib` on MacOS. The request is to update symbolic linking and the target file name in the installer to accommodate these changes.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Which backend compiler does WasmEdge use in the AoT mode?` created by `orangeC23`, stating `WasmEdge uses LLVM as the backend compiler in AoT mode. I'm interested in understanding the technical details of how WasmEdge leverages LLVM for Ahead of Time (AoT) compilation.`?"}
{"completion":"The labels for this issue are `good first issue Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: enable `codespell` in the lint workflow` created by `hydai`, stating `I propose implementing codespell to verify the spelling in our PRs. We can use the `--ignore-words` file to address false positives. Additionally, both tools offer automatic typo fixes. - @RRobot-lm`?"}
{"completion":"The labels for this issue are `c-CAPI c-Test c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `refactor: unify all reference value to RefVariant` created by `little-willy`, stating `Issue: After #2152. Summary: We encountered compatibility issues with the new library version in our project. The main challenge is the breaking changes affecting our existing codebase. We need to find a solution to seamlessly integrate the updated library without disrupting our current functionality. One potential approach is to refactor the impacted code to align with the new library's API or seek alternative libraries that offer better compatibility with our system. We also need to assess the impact of these changes on our overall project timeline and ensure minimal disruption to ongoing development tasks.`?"}
{"completion":"The labels for this issue are `c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `feat: add support for function reference proposal for validation.` created by `little-willy`, stating `Hey everyone, I'd like to discuss the issue we're facing after pull request #2151. The problem lies in the authentication module, which is not functioning correctly when the user is also connected to a VPN. This is causing access errors when retrieving certain resources. I suggest we look into making the authentication more compatible with VPN connections, possibly by implementing a different authorization method for VPN users. Any thoughts or suggestions on how we can address this issue would be greatly appreciated!`?"}
{"completion":"The labels for this issue are `c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support loading table extended from function reference` created by `little-willy`, stating `After #2125. I'm facing a challenge where the current implementation is causing performance issues due to excessive database queries. We need to optimize the code to reduce the number of queries and improve overall performance. Additionally, it would be helpful to incorporate caching mechanisms to further enhance performance. I propose refactoring the code to utilize efficient query techniques and implementing caching strategies, which should address the performance issues. Let's focus on optimizing database queries and incorporating caching mechanisms to improve performance.`?"}
{"completion":"The labels for this issue are `platform-windows binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `could not compile `wasmedge-sys` when trying to run `hello world` example` created by `omgirok`, stating `Encountering compile errors while following WasmEdge Rust documentation. 1st issue: failed to run custom build command for `wasmedge-sys v0.12.2`, fixed by setting environment variables. 2nd issue: panicked at 'Unable to find libclang', resolved by installing LLVM. 3rd issue: multiple errors related to missing function `path_to_cstring` and mismatched types. Request assistance to resolve the compile errors. Using WasmEdge 0.11.2, LLVM 12.0.0, and wasmedge-sdk 0.7.1 in Cargo.toml.`?"}
{"completion":"The labels for this issue are `enhancement help wanted c-Internal c-WASI-NN`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI-NN] PyTorch backend doesn't support GPU version` created by `shenben`, stating `WasmEdge currently supports pytorch operations only on CPU, not on GPU. The environment consists of an x86_64 architecture running Ubuntu 22.04.1 LTS, with NVIDIA-SMI and specific versions of C++ compiler, Boost, and WasmEdge. The issue arises when attempting to execute pytorch tasks on GPU using WasmEdge, resulting in an error. To reproduce the issue, WasmEdge smoothly runs a pytorch task with libtorch-one_version-cpu, but encounters an error when attempting the same task with different versions or cuda-based libtorch. The error points to an unresolved symbol related to torch compatibility when running the task. The author's hypothesis is that the issue stems from WasmEdge's inability to support pytorch operations on GPU or its incompatibility with cuda-based libtorch. The author is seeking a solution to enable WasmEdge to support pytorch operations on GPU or achieve compatibility with cuda-based libtorch. Furthermore, the author is looking forward to receiving a solution for the presented challenge.`?"}
{"completion":"The labels for this issue are `enhancement feature c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `Support Unix domain sockets in wasmedge_wasi_socket` created by `juntao`, stating `Improve WasmEdge's performance for same-host applications by adding support for AF_UNIX sockets. Additionally, create Rust and C APIs for this feature. This will address the common use case of Wasm apps and improve overall performance. Key details: - Support AF_UNIX in WasmEdge - Add Rust API - Add C API`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Go with tinygo: wasm function not found` created by `NuSkooler`, stating `I'm following the guide to create a .wasm file and execute it with WasmEdge. After building the .wasm file using TinyGo, running it with `wasmedge` gives a \"wasm function not found\" error for the `fibArray` function. ```powershell > cat .\\src\\fib.go package main func main() { } // ... (fibArray function implementation) > tinygo build -target=wasi -o .\\fib.wasm .\\src\\fib.go > wasmedge --reactor .\\fib.wasm fibArray 10 [2022-11-30 12:47:51.536] [error] wasmedge runtime failed: wasm function not found, Code: 0x05 [2022-11-30 12:47:51.537] [error]     When executing function name: \"fibArray\" ``` I expect the `fib.wasm` to execute and produce a result based on input. My environment is x86_64 on Windows (Version 10.0.19044.2251) with tinygo version 0.26.0. `?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `tokio_wasi: tokio::spawn() unable to work` created by `JasonLou99`, stating `My code utilizes Tokio to spawn asynchronous tasks but encounters an issue when running on WasmEdge. In the current state, the code compiles successfully but fails to run, producing an error related to spawning worker threads. The expected outcome is to understand how to implement multithreading or asynchronous concurrent programming in WasmEdge. Environment: - Hardware Architecture: (e.g. x64) - Operating system: (e.g. Ubuntu 20.04)`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Fix the wasi_nn::TensorType from u32 to u8.` created by `q82419`, stating `Signed-off-by: YiYing He <yiying@secondstate.io> I need help implementing a secure signature validation process for pull requests in our project's development. I'm considering using GPG signatures, but we need to ensure that the process is streamlined for contributors. Any insights or guidance on best practices for implementing this would be greatly appreciated.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump dtolnay/rust-toolchain from 1.65 to 1.70` created by `dependabot[bot]`, stating `Bumping [dtolnay/rust-toolchain](https://github.com/dtolnay/rust-toolchain) from 1.65 to 1.70. Commits: [ff9b645](https://github.com/dtolnay/rust-toolchain/commit/ff9b6451a98b007fa510bcd202b8126699846831) - toolchain: 1.70.0. See full diff in [compare view](https://github.com/dtolnay/rust-toolchain/compare/1.65...1.70). Dependabot compatibility score badge included. Actions can be triggered by commenting on this PR.`?"}
{"completion":"The labels for this issue are `c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support loading the instructions extended from the function references proposal` created by `little-willy`, stating `Issue: after #2124  Summary: I'm facing an issue after PR #2124, specifically related to the user authentication process. When a user tries to log in, the system is not recognizing the credentials and is not performing the required authentication. This behavior is consistent across different user accounts and browsers. Additionally, the error message displayed is not providing clear information, making it hard to determine the root cause. I've analyzed the recent changes introduced in PR #2124 but couldn't identify any direct impact on the authentication process.  Actionable Items: 1. Investigate the user authentication process and identify the underlying cause for the failed authentication. 2. Improve the error message to provide more specific information about the authentication failure, aiding in determining the root cause. 3. Review recent changes associated with PR #2124 to ensure they are not indirectly affecting the user authentication process. 4. Test the authentication process across various environments to confirm the consistency of the issue and potential impact. Proposed Solutions: 1. Considering potential dependencies, explore if any recent changes might have unintentionally affected the user authentication process. 2. Enhance logging to capture detailed information during the authentication process, helping to pinpoint the root cause of the issue.`?"}
{"completion":"The labels for this issue are `c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `feat: support loading the type extended from function references proposal` created by `little-willy`, stating `after completing issue #2107, we need to address the performance issues in the data retrieval for larger datasets. We need to optimize the data retrieval process to handle larger volumes efficiently. Specifically, we should review the database queries and consider implementing pagination to limit the amount of data fetched at once. Additionally, caching could be utilized to enhance performance by storing frequently accessed data. These improvements will contribute to a smoother user experience, particularly for users dealing with substantial datasets.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64 c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `WASM WASI has wrong behavior about file system on Mac OS` created by `CaptainVincent`, stating `Use of WalkDir to visit a folder on Mac results in incorrect behavior, including apparent loss of files and garbled file names when testing with [lsr-wasm-docker](https://github.com/assambar/lsr-wasm-docker) on a folder with a large number of files. ### Current State - Files are lost. - Some files are displayed but do not actually exist. - File names are garbled. ### Expected Walk all folders and subfolders normally. ## Environment - Wasmedge version 0.11.2 installed using the installer script:   ```bash   curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash   ``` - Rust toolchain (same version on both platforms):   - cargo 1.68.2   - rustc 1.68.2   - rustup 1.25.2 - Hardware Architecture: x86\\_64 - Operating system: macOS Monterey 12.5.1 ## Steps to Reproduce 1. Install Wasmedge and Rust:    ```bash    curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash    source \"$HOME/.wasmedge/env\"    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh    source \"$HOME/.cargo/env\"    rustup default stable    rustup target add wasm32-wasi    ``` 2. Build test suite:    ```bash    git clone https://github.com/assambar/lsr-wasm-docker    cd lsr-wasm-docker    cargo build --release --target=wasm32-wasi    export WALKDIR=$(realpath target/wasm32-wasi/release/lsr.wasm)    ``` 3. Run inside lsr-wasm-docker folder:    ```bash    wasmedge --dir /:$(pwd) $WALKDIR    ``` Mac log: ``` Starting from root_dir \"/\" / /Cargo.toml /LICENSE ``` Ubuntu log: ``` Starting from root_dir \"/\" / /Makefile /README.md /LICENSE /target /target/release /target/release/deps ... /.cargo/config.toml ``` `?"}
{"completion":"The labels for this issue are `c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `feat: add command line option to enable function reference type` created by `little-willy`, stating `This PR introduces a new command line option, `--enable-function-reference`, for the `wasmedge` command. This option enables a function reference proposal. Users can add `--enable-function-reference` to activate the proposal, although the support for the proposal itself has not been implemented yet.`?"}
{"completion":"The labels for this issue are `documentation enhancement priority:medium c-CLI c-CAPI c-Container c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Enable read-only filesystem support` created by `hydai`, stating `The goal is to enable mounting directories and files with a \"readonly\" annotation, similar to how it's done in Docker and Podman. Our current implementation grants read and write rights during the initialization function. To address this, we need a new option and configuration flag to handle the \"readonly\" case. The relevant file and line for the current implementation can be found at: [environ.cpp#L69](https://github.com/WasmEdge/WasmEdge/blob/master/lib/host/wasi/environ.cpp#L69).`?"}
{"completion":"The labels for this issue are `bug Improvement c-Test`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Bump IWYU to 0.19 for using LLVM 15` created by `hydai`, stating `Signed-off-by: hydai <hydai@secondstate.io> - This issue relates to providing a clear indication of who signed off on a commit in the GitHub repository. The main challenge is to automate and standardize this process across the repository. A proposal to address this involves integrating a sign-off mechanism within the development workflow, possibly through a pre-commit hook. This would require understanding the technical specifics of git hooks and implementing the sign-off process effectively. Additionally, assistance in designing a standardized approach to include sign-offs in all commits across the repository is requested.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Implement OpenCV plugin for WasmEdge and build rust wrapper for host functions` created by `omkar-mohanty`, stating `OpenCV cannot be compiled to `wasm32-wasi` target effectively due to heavy use of exceptions and threads. A workaround proposed is to add OpenCV as a plugin to WasmEdge. To address this:  - Study the [HTTP requests plugin](https://wasmedge.org/book/en/write_wasm/rust/networking-https.html) - Write C++ host functions code for `core`, `imgcodecs`, and `imgproc` OpenCV modules - Write Rust wrappers for `core`, `imgcodecs`, and `imgproc` modules - Review and implement host functions for the rest of the OpenCV library - Write Rust wrappers for the rest of the OpenCV library The main goal is to enable effective compilation of OpenCV to `wasm32-wasi` target by integrating it as a WasmEdge plugin.`?"}
{"completion":"The labels for this issue are `bug help wanted platform-macos c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `Tracking issue for missing network functions on macOS.` created by `MediosZ`, stating `There are two unimplemented network functions on macOS: - `sockGetLoaclAddr` - `sockGetPeerAddr``?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64 c-WASI`.","prompt":"Can you assign labels to the GitHub issue titled `wasi `path_filestat_set_times` always dereference link` created by `Puellaquae`, stating ``path_filestat_set_times` currently changes the time of the regular file when the `LOOKUPFLAGS_SYMLINK_FOLLOW` flag is not set. Expected behavior is for `path_filestat_set_times` without `LOOKUPFLAGS_SYMLINK_FOLLOW` to only change the link's time, not the linked file's time. Steps to reproduce and sample code for context are provided in the original issue. The proposed solution is to incorporate a check for the flag to choose `utimes` or `lutimes`. Debian 11 on x86\\_64 architecture is the environment. The code in question can be found [here](https://github.com/WasmEdge/WasmEdge/blob/b16d9d3e80b84e17974a911c2de94887194ada58/lib/host/wasi/inode-linux.cpp#L630).`?"}
{"completion":"The labels for this issue are `c-CAPI breaking changes c-function-references`.","prompt":"Can you assign labels to the GitHub issue titled `refactor: turn ValType into a structured FullValType` created by `little-willy`, stating `We propose to introduce a structured `ValType` to support the extended `ValType` definition in the function-reference and GC proposal. The current `ValType` is tightly coupled with the uint8_t definition. To address this, we are introducing a new class `FullValType` with a specific structure. Additionally, a new class `FullRefType` will be introduced for the current `RefType`. The structure of `FullValType` includes `TypeCode` and `WasmEdge_ValTypeExt`. With this update, we will store `FullValType` and `FullRefType` in the param and result types in `FunctionType`, as well as in `GlobalType` and `TableType`. Other related code will be refactored accordingly. This PR builds upon #2097 and will resolve issue #2081.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `Unexpected value on the stack` created by `erxiaozhou`, stating `Description: Current State: 0x0 0x0 0x0 0x2f 0x0 0x0 0xf0 0xff Expected: ........ 0xf8 0xff (The most significant bit of payload is 1). Raise a stack overflow exception. Environment: - Code Version: git commit id b16d9d3e80b84e17974a911c2de94887194ada58 - Hardware Architecture: x86\\_64  - Operating system: Ubuntu 20.04 Optional: - C++ Compiler version: clang-14 - CMake version: 3.21.6 - CMake flags:  `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON` - Boost version: libboost1.71-dev:amd64 - Build commands:   ```   export CC=/usr/bin/clang-14   export CXX=/usr/bin/clang++-14   rm -rf build ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON .. ; make -j ; cd ..   ``` Steps to Reproduce: [wasmedge_nan.zip](https://github.com/WasmEdge/WasmEdge/files/10047792/wasmedge_nan.zip) 1. Build WasmEdge. 2. Run the test case using `build/tools/wasmedge/wasmedge --reactor <test_case_name> to_test``?"}
{"completion":"The labels for this issue are `Improvement c-Internal`.","prompt":"Can you assign labels to the GitHub issue titled `unify Validator::VType and ValType to ValType` created by `little-willy`, stating `The Validator::VType and ValType are essentially the same. With the structured ValType support, we need to consolidate them and remove the redundancy. Unless there are specific reasons not to, we should unify VType and ValType into ValType and remove VType.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Validator] Fix the error code when element segment mismatch.` created by `q82419`, stating `This PR passed the newest spec tests on the branch `wasm-dev` in [WasmEdge unittest repo](https://github.com/second-state/WasmEdge-unittest/tree/wasm-dev), except the `threads` proposal. Therefore, the `wasm-dev-0.11.0` tag should be used currently until the `threads` proposal implementation being fixed. This pull request successfully passed spec tests on the `wasm-dev` branch, except for the `threads` proposal. To address this, the `wasm-dev-0.11.0` tag should be used until the `threads` proposal implementation is fixed.`?"}
{"completion":"The labels for this issue are `enhancement binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Let registration order will not affect import ability` created by `dannypsnl`, stating `In the current implementation, the registration order for importing modules is inconvenient. For example, the `host` crate in the [forward-call demo](https://github.com/second-state/module-interaction-example/tree/main/forward-call) needs to use `vm.clone()` due to this problem. If we could register import objects later, the `clone` would not be required. This change would make the process more efficient and avoid the need for unnecessary cloning.`?"}
{"completion":"The labels for this issue are `duplicate`.","prompt":"Can you assign labels to the GitHub issue titled `AoT compiler doesn't work  from a user` created by `alabulei1`, stating `Couldn't use `wasmedgec` to AoT compile a wasm file from `.net`. If you need more information, let me know.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Loader] Fix the detection of code segment boundary.` created by `q82419`, stating `Signed-off-by: YiYing He <yiying@secondstate.io> Summary: I am proposing to add the \"Signed-off-by\" tag to our project's commit messages to track the authorship of the contributions. This will help maintain a clear record of who has contributed to the project. I would also like to discuss the implementation and potential challenges related to this proposal.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `Unexpected Execution` created by `erxiaozhou`, stating `There is an output: 1. I expect it to raise an exception indicating \"failed to parse wasm binary\". Environment: - Code Version: git commit id 844103848a799fe3dc315b48cf4993ccdff1e097 - Hardware Architecture: x86\\_64 - Operating system: Ubuntu 20.04 - Optional Build Information:   - C++ Compiler version: clang-14   - CMake version: 3.21.6   - CMake flags:  `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON`   - Boost version: libboost1.71-dev:amd64 - Build commands:   ```   export CC=/usr/bin/clang-14   export CXX=/usr/bin/clang++-14   rm -rf build ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON .. ; make -j ; cd ..   ``` Steps to Reproduce: 1. Build the wasmedge 2. Run the test case using the command `build/tools/wasmedge/wasmedge --reactor <test_case_name> to_test` You can download the test case file from the provided link.`?"}
{"completion":"The labels for this issue are `bug platform-linux arch-x86_64`.","prompt":"Can you assign labels to the GitHub issue titled `Unexpected Execution` created by `erxiaozhou`, stating `There is an output: 0, but I expect an exception indicating \"unexpected content at the end of section\". My environment details are as follows: - Code Version: git commit id 844103848a799fe3dc315b48cf4993ccdff1e097 - Hardware Architecture: x86\\_64 - OS: Ubuntu 20.04 Optional details for source build: - C++ Compiler version: clang-14 - CMake version: 3.21.6 - CMake flags:  `-DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON` - Boost version: libboost1.71-dev:amd64 Build commands:   ```   export CC=/usr/bin/clang-14   export CXX=/usr/bin/clang++-14   rm -rf build ; mkdir build ; cd build ; cmake -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON .. ; make -j ; cd ..   ``` Steps to reproduce:  1. Build wasmedge. 2. Run the test case by `build/tools/wasmedge/wasmedge --reactor <test_case_name> to_test `  [wasm file](https://github.com/WasmEdge/WasmEdge/files/9997804/wasmedge1.zip)`?"}
{"completion":"The labels for this issue are `binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Missing conversion from `sys::Executor` to `sdk::Executor`` created by `dannypsnl`, stating `When accessing the host environment in the **host function**, we found that `sys::Executor` doesn't implement the required `sdk::Engine`. We propose implementing `From<sys::Executor> for sdk::Executor` in the bindings module to resolve this issue. The draft code for this implementation is provided in the Appendix. This is related to the existing issue #1981.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Cannot find registered plug-in on MacOS` created by `q82419`, stating `The plugin registration on MacOS appears correct, but the plugin cannot be found, likely due to the `NiftyCounter` and `PluginRegistoryStorage` being on different instances. To resolve this and pass the `wasi_crypto` tests, perform the following steps: 1. Ensure `openssl` is installed on MacOS by running `brew install openssl`. 2. Build WasmEdge with specific options using the following commands:    ```bash    cmake -GNinja -Bbuild -DCMAKE_BUILD_TYPE=Debug -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DWASMEDGE_PLUGIN_WASI_CRYPTO=ON -DWASMEDGE_BUILD_TESTS=ON .    ``` 3. After building, navigate to the directory and run the test:    ```bash    cd build/test/plugins/wasi_crypto    ./wasiCryptoTests    ``` Monitoring the address of the `NiftyCounter` variable and ensuring consistency during registration and finding the plugin is crucial to resolve the issue. When testing, it was observed that the address of `NiftyCounter` differed, leading to the inability to find the registered plugin.`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `[Help] How to open the debug log?` created by `2019zhou`, stating `How do I open the debug log of my function?`?"}
{"completion":"The labels for this issue are `wontfix`.","prompt":"Can you assign labels to the GitHub issue titled `[http_req] Specific URL cannot be fetched` created by `DarumaDocker`, stating `Since there is no issues link in the repo, I'm posting here. On my Ubuntu 22.04 laptop, I can successfully run an example using http_req to make a GET request and read the response. But when I change the requested URL to 'https://mmhaskell.com/blog?format=RSS', it fails with SSL errors. Need help to resolve this. Code and errors provided.`?"}
{"completion":"The labels for this issue are `Improvement priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Refactoring release CI for updating the artifacts and release assets` created by `hydai`, stating `We want to streamline the release workflow by uploading artifacts and release assets at the same job to minimize retries caused by network issues. When uploading release assets fails, we only want to retry the upload job, not the build job.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to include RapidJSON if RapidJSON is found.` created by `harry900831`, stating `In CMake configuration, the variable `${RapidJSON_SOURCE_DIR}` is empty when RapidJSON is found, leading to incorrect include paths. This results in a fatal error when building due to the absence of the 'rapidjson/document.h' file. The proposed solution involves ensuring the correct value for `${RapidJSON_SOURCE_DIR}` is set when RapidJSON is found. The issue is reproducible in the environment with the following specifics: Apple M1 architecture, macOS Monterey 12.4, Homebrew clang/clang++ version 14.0.6, LLVM 14.0.6, and CMake 3.24.2. To reproduce, execute `cmake -Bbuild -GNinja -DWASMEDGE_BUILD_TESTS=ON .` followed by `cmake --build build`.`?"}
{"completion":"The labels for this issue are `bug platform-macos arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to load plugin in plugin's test` created by `harry900831`, stating `I installed the wasmedge_process and wasi_crypto plugins, ran their tests, but encountered failures. For wasmedge_process, the tests failed because the module couldn't load properly, as evidenced by the assertion failures in various test cases. The code snippet where the module is being created and loaded shows that the module loading is unsuccessful. Similarly, the tests for wasi_crypto failed due to the module not being found, as indicated by the failure message \"can't find module wasi_crypto\" in the test log. Despite these failures, using the `wasmedge` runtime tool allows both plugins to load successfully. Environment: - Hardware Architecture: Apple M1 - Operating system: macOS Monterey Version 12.4 - C/C++ Compiler version: Homebrew clang/clang++ version 14.0.6 - LLVM version: 14.0.6 - CMake version: 3.24.2 Steps to Reproduce: 1. cmake -Bbuild -GNinja -DWASMEDGE_BUILD_TESTS=ON -DWASMEDGE_PLUGIN_WASI_CRYPTO=On -DOPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3 . 2. cmake --build build 3. cmake --install build 4. cd build/test/plugins/wasi_crypto 5. ./wasiCryptoTests 6. cd .. 7. cd wasmedge_process 8. ./wasmedgeProcessTests I need help understanding the reason behind the failures and how to resolve this issue.`?"}
{"completion":"The labels for this issue are `priority:high c-Internal c-Container`.","prompt":"Can you assign labels to the GitHub issue titled `[Loader] Change wrong AOT arch type error into info/debug` created by `hydai`, stating `After releasing the beta runwasi with Docker Desktop, users may build their own Docker images with the universal wasm format, leading to potential mismatches with the host environment. To address this, we should handle error messages by falling back to the interpreter mode and changing 'error' level messages to 'info/debug' level. Current State: ``` podman --arch wasm32 --os wasi -p 8080:8080 --annotation 'run.oci.handler=wasm' --rm  michaelirwin244/wasm-example  [2022-10-25 22:54:45.767] [error] loading failed: malformed section id, Code: 0x25 [2022-10-25 22:54:45.767] [error] AOT arch type unmatched. [2022-10-25 22:54:45.767] [error] Load AOT section failed. Use interpreter mode instead. Server is now running ``` Expected: ``` podman --arch wasm32 --os wasi -p 8080:8080 --annotation 'run.oci.handler=wasm' --rm  michaelirwin244/wasm-example  Server is now running ``` Reference: https://github.com/containers/crun/pull/1043#issuecomment-1291095611`?"}
{"completion":"The labels for this issue are `bug priority:medium binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Out of bounds memory access, Code: 0x88 when running Rust-compiled AOT in Docker` created by `Tails`, stating `I have a Rust host app that compiles [hello.wasm](https://github.com/second-state/wasm-learning/tree/master/cli/hello) to a Linux native binary within a Docker container. Running fine when interpreted, but errors out with a panic and memory access issue when using the AOT .so. The error message suggests a memory out-of-bounds access when executing the module \"prerenderer\" function \"_start\". Does the Rust SDK's VM support running AOT .so binaries?`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] The installer puts the library into a wrong path` created by `hydai`, stating `Ubuntu's python installer is placing library files in the incorrect location, creating a 'lib64' folder under '/usr/local' instead of '/usr/local/lib', which is disrupting downstream processes. The proposed solution is to revert the python installer and implement a comprehensive testing environment to compare the behaviors of the old and new installers. The expected result is to have the library files under '/usr/local/lib' as in the previous installation. This issue is observed on Ubuntu 20.04 with x86_64 architecture. To replicate, use a clean docker image with the following command: ```bash wget -q https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh sudo ./install.sh --path=\"/usr/local\" ````?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/upload-artifact from 2 to 3` created by `dependabot[bot]`, stating `Bumped [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2 to 3, including release notes and commits. The major update to version 3.0.0 incorporates changes such as updating the default runtime to Node 16. Additionally, there are several other smaller updates and bug fixes listed. The release also mentions breaking changes, notably, all scripts will now run with Node 16 instead of Node 12. The commits detail the specific changes made, including version upgrades and optimizations for larger file uploads. The provided Dependabot commands offer instructions on how to trigger specific actions, such as rebasing, recreating, merging, and ignoring versions or dependencies.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump actions/checkout from 2 to 3` created by `dependabot[bot]`, stating `The issue is about updating the [actions/checkout](https://github.com/actions/checkout) from version 2 to 3. Notable changes in version 3.0.0 include the update to the node16 runtime by default, which requires a minimum version of v2.285.0 for the Actions Runner. Additionally, version 3.1.0 introduces `@actions/core` `saveState` and `getState`, and version 3.0.2 adds the `github-server-url` input. The author has also mentioned the Dependabot compatibility score to be checked.`?"}
{"completion":"The labels for this issue are `bug c-Container`.","prompt":"Can you assign labels to the GitHub issue titled `When I run a wasm program in container, it can not get environment variables.` created by `TaurusM`, stating `I have a Dockerfile, environment variables are set, but I'm encountering issues with the environment variables not being recognized. The provided log and dependencies are attached. I'd appreciate any help in identifying the problem or any important details I might have missed. Thank you.`?"}
{"completion":"The labels for this issue are `Improvement c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `[CAPI] Provide runtime-only library` created by `hydai`, stating `Some embedded devices can't use ahead-of-time compilation due to hardware limitations. By providing a tiny library version, we can address this issue. We already have slim/slim-runtime docker images, so we just need to upload them to the release pages and add the related workflow jobs.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump crazy-max/ghaction-chocolatey from 1 to 2` created by `dependabot[bot]`, stating `The issue involves bumping the version of [crazy-max/ghaction-chocolatey](https://github.com/crazy-max/ghaction-chocolatey) from 1 to 2. The release notes for version 2.0.0 highlight the default runtime set to Node 16, which requires a minimum Actions Runner version of v2.285.0. This update is available by default in GHES 3.4 or later. The author provided Dependabot commands and options for triggering actions.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump codecov/codecov-action from 2 to 3` created by `dependabot[bot]`, stating `Issue: Bumping [codecov/codecov-action](https://github.com/codecov/codecov-action) from 2 to 3. Release notes: - v3.0.0 introduced changes, including adopting node16 and incorporating `gcov` arguments for the Codecov uploader. - Dependencies were updated, such as jest-junit, @actions/core, node-fetch, openpgp, @vercel/ncc, @types/node, @types/jest, actions/checkout, and minimist. Changelog: - Fixes and updates were made in the 3.1.1 release, along with dependency bumps for typescript, node-fetch, github/codeql-action, @types/jest, @types/node, actions/checkout, @actions/github, @actions/core, ossf/scorecard-action, typescript, openpgp, actions/upload-artifact, and more. - The 3.1.0 release added support for incorporating `xcode` arguments for the Codecov uploader and included updates for @vercel/ncc, @types/node, and jest-junit. Commits: - Commits include updates to dependencies, bug fixes, and enhancements for the new releases.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/login-action from 1 to 2` created by `dependabot[bot]`, stating `The issue involves upgrading [docker/login-action](https://github.com/docker/login-action) from version 1 to 2. The main changes in version 2.0.0 include using Node 16 as the default runtime, which requires a minimum Actions Runner version of v2.285.0. This version also includes updates to dev dependencies and workflows. It's important to note that the upgrade to Node 16 caused an issue for users of GHES 3.4 or earlier, so it was reverted in v1.14.1. Additionally, there are multiple dependency bumps in this release. Key actionable items: - Update to version 2.0.0 of the login action. - Ensure the minimum required Actions Runner version is v2.285.0 if using Node 16 as the default runtime. - Address any issues caused by the upgrade to Node 16 for GHES users. The author appears to emphasize the specific version changes and their implications.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/build-push-action from 2 to 3` created by `dependabot[bot]`, stating `The issue is about upgrading [docker/build-push-action](https://github.com/docker/build-push-action) from version 2 to version 3. The new release (v3.0.0) includes Node 16 as the default runtime and standalone mode support. It also involves updates to dev dependencies and workflow, as well as bumps for various packages like `@actions/exec`, `@actions/github`, minimist, semver, and csv-parse. The [release notes](https://github.com/docker/build-push-action/compare/v2.10.0...v3.0.0) and [commits](https://github.com/docker/build-push-action/compare/v2...v3) for more details. Dependency bot compatibility score is available for the proposed version. No conflicts will arise if there are no alterations to the PR.`?"}
{"completion":"The labels for this issue are `dependencies`.","prompt":"Can you assign labels to the GitHub issue titled `Bump docker/setup-buildx-action from 1 to 2` created by `dependabot[bot]`, stating `The issue involves updating the [docker/setup-buildx-action](https://github.com/docker/setup-buildx-action) from version 1 to version 2. The major change in version 2.0.0 is the default runtime of Node 16, which requires a minimum Actions Runner version of v2.285.0. The provided details include: - Transition from Node 16 as the new default runtime. - Minimum version requirement for Actions Runner. - Full changelog available at [v1.7.0...v2.0.0](https://github.com/docker/setup-buildx-action/compare/v1.7.0...v2.0.0). - Compatibility score and Dependabot commands for automerging. The author may be interested in ensuring compatibility with the new default runtime and addressing any potential conflicts arising from the update. The release notes and commits provide additional context.`?"}
{"completion":"The labels for this issue are `documentation c-Internal c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `[Misc] Add off log system api` created by `CaptainVincent`, stating `The error message, such as \"interrupt,\" should be concealed to prevent alarming users when migrating Wasmedge into other production environments. This will help avoid confusion and apprehension among users.`?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function `pathUnlinkFile`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathSymLink`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Poller::wait`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Poller::write`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Poller::read`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Poller::clock`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Poller::pollOneoff`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `canBrowse`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `filesize`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `isSymlink`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `isDirectory`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `filetype`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `unsafeFiletype`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `socketGetPeerAddr`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathRename`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathRemoveDirectory`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathReadlink`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathOpen`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathLink`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathFilestatSetTimes`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathFilestatGet`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `pathCreateDirectory`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `getNativeHandler`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdTell`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdSync`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdSeek`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `Readdir`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdWrite`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdRead`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdPwrite`` created by `abhinandanudupa`, stating `Description:  There's a bug in the current state that needs attention. Expected:  I'm expecting a different outcome. Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 20.04 Optional if built from source: - C++ Compiler version - CMake version - CMake flags: -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_AOT_RUNTIME=ON - Boost version Steps to Reproduce:  Please provide necessary information to reproduce the bug.`?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdPread`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdFilestatSetTimes`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdFilestatSetSize`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdFdstatSetFlags`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdFdstatGet`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdDatasync`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `fdAdvise`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `bug enhancement help wanted platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] WASI Host function - `open`` created by `abhinandanudupa`, stating ``?"}
{"completion":"The labels for this issue are `enhancement help wanted Hacktoberfest platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `[Windows] Review the `WASI` Host API` created by `abhinandanudupa`, stating `Goal: Fix bugs/issues with the WASI Host API for the Windows Platform. Description: The Windows Platform is not POSIX compliant, which may lead to incomplete fulfillment of the functionality described by the WASI standard. Check the [issues section](https://github.com/WebAssembly/wasi-filesystem/issues) for unaddressed issues. For more information, visit [WASI's official repository](https://github.com/WebAssembly/WASI). Refer to [this comment](https://github.com/WasmEdge/WasmEdge/issues/1477#issuecomment-1207415917) for the implementation status of each function in WasmEdge. If you discover issues or bugs in the current implementation or have better ways to implement functions, leave a comment in this thread. Review Status of Host Functions: Several functions specified by the WASI standard need review, listed in the issue. Environment: Hardware Architecture: x86\\_64 primarily, Operating System: The Windows Family of Operating Systems Appendix: [Windows] Implement host functions on the Windows platform #1826](https://github.com/WasmEdge/WasmEdge/pull/1826)`?"}
{"completion":"The labels for this issue are `bug help wanted platform-macos c-Internal arch-arm64`.","prompt":"Can you assign labels to the GitHub issue titled `Test failed on Apple M1 ` created by `harry900831`, stating `The test failed on Apple M1. The ctest failed on multiple tests, except for `wasiSocketTests` which is a known issue. The first three failed at the specific test suite, where the expected value did not match the actual value. The `wasiTests` failed due to discrepancies in expected and actual values. The environment details include hardware architecture, operating system, compiler version, LLVM version, CMake version, and associated flags.`?"}
{"completion":"The labels for this issue are `Improvement priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `Shipping binary precompiled WASM files is problematic for downstreams` created by `paravoid`, stating `As a Debian Developer, I'm interested in packaging WasmEdge for Debian inclusion. However, the current WasmEdge tarball includes WASM binaries, which doesn't align with Debian's strict inclusion rules. While I can repackage the tarball to remove these binaries, I'd prefer to explore alternative solutions before resorting to that. The good news is that the shipped WASM files may not be necessary for a default release build. Here's a breakdown of the categories of shipped WASM files and potential solutions: 1. Handcrafted WAT files can possibly be dropped and regenerated by the build system when necessary, or accepted as binaries alongside their sources. 2. Rust sources shipped in tree can be rebuilt in Debian, but removing the precompiled .wasm from the tarball might be the safest option for inclusion. 3. C sources shipped in tree can also be removed from the tarball, as they seem to be there as references and are not relied upon at build time. 4. Rust and C sources published online are not included in the tarball, posing a blocker for Debian inclusion. Rebuilding them using the specified toolchains and including their sources might make them acceptable for inclusion, while the more complicated cases may require removal from the tarball, with URLs or CMake files to fetch them from their respective repositories for source installations. Ultimately, addressing these issues may benefit not only Debian but also other distributions with similar rules. I'm keen on collaborating to find a suitable solution for Debian's inclusion needs while aligning with upstream requirements.`?"}
{"completion":"The labels for this issue are `documentation good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `[docs] Add examples for writing WasmEdge App in C++` created by `alabulei1`, stating `We need to add an example of writing wasmedge apps in C++ to the WasmEdge book. The example can be found in the following appendix: https://github.com/WasmEdge/WasmEdge/tree/master/examples/embed_cxx`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `Unable to build AOT on Ubuntu 20.04` created by `MediosZ`, stating `I'm having trouble building WasmEdge from source on Ubuntu 20.04 with LLVM and LLD installed.   1. I can't find LLDConfig.cmake, so I need to set `LLD_DIR` to the installation prefix of \"LLD\" or a directory containing LLDConfig.cmake.  2. After setting `LLD_DIR`, I'm unable to find some LLVM symbols, resulting in undefined references when building WasmEdge.  Expectation: Build WasmEdge from source without further modification. Environment: - Hardware Architecture: x86\\_64  - Operating system: Ubuntu 20.04 Optional: - C++ Compiler version: 9.4.0 - CMake version: 3.20.2 - CMake flags: -DWASMEDGE_BUILD_AOT_RUNTIME=ON - Boost version: 1.71 Steps to Reproduce: Clone the repo and build it as usual.`?"}
{"completion":"The labels for this issue are `question binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `run rust binding demo error` created by `xunfeng1980`, stating `The build is failing with multiple errors regarding missing functions, tuple structs, tuple variants, types, and values in the `ffi` module. These errors are preventing the `wasmedge-sys` package from compiling. Expected outcome: It should work. Environment: Darwin luxdeMacBook-Pro.local 22.1.0 Steps to Reproduce: N/A`?"}
{"completion":"The labels for this issue are `bug question binding-rust c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `Bugs that may be caused by the AOT compiler` created by `EmisonLu`, stating `I wrote two tests using WasmEdge rust sdk: one with the AOT compiler and the other without. When running `cargo test`, the test without the compiler passes, but the test with the compiler fails, showing an out of bounds memory access error. Here's the code and dependencies I used: ```toml [dependencies] wasmedge-sdk = \"0.4.0\" wasmedge-sys = \"0.9.0\" tempfile = \"3.3.0\" ``` Code: ```rust // code omitted for brevity ``` Error message: ```bash [2022-09-03 23:18:50.392] [error] execution failed: out of bounds memory access, Code: 0x88 test test_with_compiler ... FAILED failures: ---- test_with_compiler stdout ---- thread 'test_with_compiler' panicked at 'called `Result::unwrap()` on an `Err` value: Core(Execution(MemoryOutOfBounds))', src/lib.rs:54:6 note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace failures:     test_with_compiler ``` I need assistance in identifying and resolving the out of bounds memory access error when using the AOT compiler in my tests. Thank you!`?"}
{"completion":"The labels for this issue are `binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] `CallingFrame` in wasmedge-sdk` created by `EmisonLu`, stating `When using `CallingFrame` in `wasmedge-sdk`, the return type of the `module_instance()` method is `wasmedge_sys::Instance` instead of `wasmedge_sdk::Instance`, leading to potential issues. Requesting review and resolution. Thank you.`?"}
{"completion":"The labels for this issue are `good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `[Tools] Support the compiler optimization level in AOT tool` created by `q82419`, stating `The AOT compiler should support assigning optimization levels, as WasmEdge supports `O0` to `Oz` levels. This can be achieved by allowing optimization level assignment via command line arguments and setting it in the compiler configuration.`?"}
{"completion":"The labels for this issue are `question binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Deadlocks will occur in some cases` created by `EmisonLu`, stating `Under multi-threading, the global variable [`HOST_FUNCS`](https://github.com/WasmEdge/WasmEdge/blob/master/bindings/rust/wasmedge-sys/src/lib.rs#L231) of type `Arc<RwLock<HashMap<usize, BoxedFn>>` may deadlock when creating a host function inside another host function due to conflicting read and write operations. It needs to be confirmed whether the runtime core supports this scenario.`?"}
{"completion":"The labels for this issue are `help wanted feature priority:medium c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `Bump OpenSSL from 1.1.1 to 3` created by `hydai`, stating `OpenSSL 3 was released on 2021-09-07, and as most modern operating systems are migrating to this new version, we need to upgrade our OpenSSL dependencies from 1.1.1 to 3. According to OpenSSL's announcement, version 3.0 will be supported until 2026-09-07 (LTS), while version 1.1.1 will be supported until 2023-09-11 (LTS). We have some time before the 1.1.1 EOL. The OpenSSL upgrade affects the following plugins: WASI-Crypto and HTTPSREQ. Action item: We should update the OpenSSL dependencies from 1.1.1 to 3. Relevant links: OpenSSL announcement: https://www.openssl.org/policies/releasestrat.html, WASI-Crypto: [WASI-Crypto GitHub link], HTTPSREQ: [HTTPSREQ GitHub link]`?"}
{"completion":"The labels for this issue are `question`.","prompt":"Can you assign labels to the GitHub issue titled `[Rust] Potential memory leak issue` created by `hydai`, stating `Users have reported an issue with increasing memory when calling the handler function in the rust version of the code compiled to wasm. The same function in C and Golang works without any issue.  Relevant code snippet: ```rust // ... (code snippet as provided) ``` Expected behavior: If the rust code is correct, the memory should not increase every time the handler function is called. Environment: - Hardware Architecture: x86_64 - Operating system: Ubuntu 20.04`?"}
{"completion":"The labels for this issue are `good first issue help wanted Hacktoberfest Improvement priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Reduce the building time of OpenWrt` created by `hydai`, stating `The GitHub runners have a limit of 20 slots, and our WasmEdge OpenWrt workflow takes almost two hours, mainly because it builds the entire OpenWrt each time. We need a way to create a cache to reduce the building time. Links to the workflow file and an example run are provided below:  - Workflow file for OpenWrt: https://github.com/WasmEdge/WasmEdge/blob/master/.github/workflows/build_for_openwrt.yml - Example run: https://github.com/WasmEdge/WasmEdge/actions/runs/2915634679`?"}
{"completion":"The labels for this issue are `bug priority:high c-Plugin`.","prompt":"Can you assign labels to the GitHub issue titled `[Plugin] Refine some implementations in the httpsreq module` created by `hydai`, stating `Hi @2019zhou, I found some issues in the code that need attention: 1. All pointers should be checked for nullptr before use at line 32 of httpsreqfunc.cpp. 2. Return the `error code` in the return value instead of using `exit` to avoid termination of the whole program at line 49 of httpsreqfunc.cpp. 3. The same as `abort` needs fixing at line 73 of httpsreqfunc.cpp. Please fix these. Thanks. _Originally posted by @hydai in https://github.com/WasmEdge/WasmEdge/issues/1763#issuecomment-1225216156_`?"}
{"completion":"The labels for this issue are `documentation enhancement priority:high platform-windows platform-linux platform-macos c-CAPI`.","prompt":"Can you assign labels to the GitHub issue titled `Enable SONAME and SOVERSION for WasmEdge C API` created by `hydai`, stating `In this PR, I propose the following changes:  - Rename the C API library from `libwasmedge_c.so` to `libwasmedge.so`. - Set the SONAME to `libwasmedge.so.0`. - Set the SOVERSION to `libwasmedge.so.0.0.0`. - It's important for all library users to update the linker option from `lwasmedge_c` to `lwasmedge`. - Additionally, all language bindings will need to be updated. @ibmibmibm @q82419  I kindly request your review and consensus before merging. Thank you.`?"}
{"completion":"The labels for this issue are `bug help wanted priority:low platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `wasmedge can't recognize argument in GBK encoding correctly` created by `wudenggang`, stating `Environment: - Hardware: x86\\64 - OS: Windows 10 When I ran the command `test hello.wasm` with a Chinese word argument, it caused a panic. ![hello](https://user-images.githubusercontent.com/3587832/186190645-c7a6d886-21e8-4f38-88b6-cb728574039d.png)`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Fix lost file when packaging on Windows.` created by `q82419`, stating `Close #1759 - Refactor data processing module to improve performance and scalability. Consider leveraging parallel processing and optimizing database queries to address current bottlenecks.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Executor] Handle the AOT terminated case.` created by `q82419`, stating `Close three issues: #1378, #1744, and #996.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Expose a helper function to compile a wasm binary array` created by `hydai`, stating `In the current design, the `CompilerCompile` function wraps the `Loader` and requires both the `Input File` and `Output File`. We need to provide a way for developers to directly pass a memory array without the `Input File`. We should create a new C API called `CompilerCompile` with `Bytes Array` directly.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX workspace: OpenCV SDKs for Wasm` created by `juntao`, stating `WasmEdge supports AI inference for computer vision applications on the edge. Our existing demos use the Rust image crate for image processing, but it's limited for many applications. In Python, image pre-processing is done with the OpenCV library. We want to create an OpenCV SDK for WebAssembly applications and benchmark its performance against the Python version. Key Actions: - Study how OpenCV is compiled into WebAssembly and its JavaScript API - Attempt to compile OpenCV and the Rust wrapper crate into WebAssembly - Create computer vision examples using the OpenCV library in WasmEdge - Benchmark the AOT version of OpenCV in WasmEdge against the Python version - Optionally, create a JavaScript wrapper for OpenCV in WasmEdge QuickJS Relevant References: - [opencv-wasm](https://www.npmjs.com/package/opencv-wasm) package for node.js - [Rust binding for OpenCV](https://github.com/twistedfall/opencv-rust) - [WasmEdge tensorflow SDK](https://wasmedge.org/book/en/dev/rust/tensorflow.html) - [WASI-NN examples for WasmEdge](https://github.com/second-state/WasmEdge-WASINN-examples)`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Node API support for WasmEdge QuickJS` created by `juntao`, stating `The WasmEdge QuickJS runtime aims to support Node.js applications to increase its adoption. It already supports NPM and CJS modules and allows developers to create new JavaScript APIs using the extension mechanism with JavaScript and Rust. Tasks include learning the extension mechanism, studying current Node.js API support, contributing missing APIs, and creating CI tests and examples. Relevant links: [WasmEdge QuickJS](https://wasmedge.org/book/en/dev/js.html), [Node.js API support](https://wasmedge.org/book/en/dev/js/nodejs.html), [JavaScript extension](https://wasmedge.org/book/en/dev/js/modules.html), [Rust extension](https://wasmedge.org/book/en/dev/js/rust.html), and the [tracking issue](https://github.com/WasmEdge/WasmEdge/issues/1535).`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Add more WASI-NN examples using WasmEdge` created by `alabulei1`, stating `WasmEdge now supports the WASI-NN proposal with the OpenVINO backend after the 0.10.1 version is released. It's better to add more examples. Submit a PR [here](https://github.com/second-state/WasmEdge-WASINN-examples)`?"}
{"completion":"The labels for this issue are `enhancement feature`.","prompt":"Can you assign labels to the GitHub issue titled `[Proposal] breaking change in multi-memory spec. The order of load/store immediates should be switched` created by `hydai`, stating `There's a breaking change in the multi-memory proposal. We need to switch the order of load/store immediates in the binary format. More details in pull request #29 and issue #28.`?"}
{"completion":"The labels for this issue are `Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Enable markdownlint for our documents` created by `hydai`, stating `\"When using markdown for documents, we encountered a formatting issue similar to #1721. To address this, I propose enabling a markdown linter to check all markdowns before merging. The solution involves creating a new workflow that utilizes `markdownlint` to ensure well-formatted markdown.\"`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Loader] Fix the set number of instruction immediate in debug mode.` created by `q82419`, stating `Issue: Close #1714 Summary: I propose adding a new authentication method that supports OAuth 2.0 for our API endpoints. Currently, we only support basic authentication, which is not suitable for our future integrations. Implementing OAuth 2.0 will enhance security and provide a standardized authentication process for our users and third-party applications. It also aligns with industry best practices and ensures compatibility with modern authentication standards. Challenges: The main challenge lies in integrating OAuth 2.0 without disrupting existing functionality. We need to ensure a smooth transition for current users while implementing and testing the new authentication method extensively. Additionally, we must update our documentation to guide users and developers through the OAuth 2.0 integration process. Action Items: 1. Research OAuth 2.0 implementation for API endpoints. 2. Plan the migration strategy to minimize impact on existing users. 3. Update documentation for both end users and developers regarding the OAuth 2.0 setup and integration process. Once these actions are addressed, we can proceed with closing this issue.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Directories with more than ~150 files are truncated when mapped` created by `orangeC23`, stating `This issue is about a problem encountered when running wasm programs using \"wasmedge\" on both macOS and Ubuntu. After compiling a C program into wasm, running \"wasmedge ls.wasm\" with specific parameters results in an unexpected outcome. When using the command \"wasmedge ls.wasm --dir=./testfolder -- testfolder | wc -l\" or \"wasmedgec ls.wasm ls.so\" followed by \"wasmedge ls.so --dir=./testfolder -- testfolder | wc -l\", the expected count of 203 is not achieved; instead, the actual result is 0. The \"wasmedge\" version used is 0.9.1.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Compiler] The mask is missed on the shift operands` created by `orangeC23`, stating `Steps to reproduce: Run the `main` function in the wasm file [test.txt](https://github.com/WasmEdge/WasmEdge/files/9229121/test.txt) by using the command `wasmedge --reactor --enable-all test.wasm main` or `wasmedgec test.wasm test.so` followed by `wasmedge --reactor --enable-all test.so main`. Expected result: The output should be 65. The runtime should print 65, and \"wasmedge\" in the first scenario should also print 65. Actual result: In the second scenario, the output is 66.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[CLI tool] Should command mode takes the WASI exit code as the return value?` created by `orangeC23`, stating `The issue involves a problem with executing a WebAssembly file using `wasmedge 0.9.1`. After the file is converted to `main.wasm` using the command `wat2wasm main.wat`, executing it with `wasm3 main.wasm` doesn't print the expected output of 0. The actual result is that nothing is printed. ### Steps to reproduce 1. Create a WebAssembly file named `main.wat` using the provided content. 2. Convert the `main.wat` file to `main.wasm` using the command `wat2wasm main.wat`. 3. Execute the `main.wasm` file using `wasm3 main.wasm`. ### Expected result Execution should print 0, as it does when using wasmtime. ### Actual result Currently, nothing is being printed. ### Version - wasmedge 0.9.1 - Ubuntu 20.04 or macOS`?"}
{"completion":"The labels for this issue are `wontfix`.","prompt":"Can you assign labels to the GitHub issue titled `Fail to execute the wasm file ?` created by `orangeC23`, stating `When running `test.wasm` from the provided `test.zip`, WasmEdge returns an \"unknown import\" error with a code of 0x62. This occurs specifically when linking the \"wasi_unstable\" module to the \"args_get\" function at certain AST nodes. The issue is reproducible on both macOS and Ubuntu systems. The expected behavior is to execute the Go database in the wasm file and have it print \"TiDB [pingcap]>\". Environment: - Hardware Architecture: x86\\_64 - Operating system: Ubuntu 20.04 and macOS To Reproduce: Run `wasmedge test.wasm` to replicate the issue.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[CLI tool] `v128` return value is not handled` created by `orangeC23`, stating `When running `func1` in main.wasm, Wasmer prints nothing, but Wasmedge prints `79228162514264337593543950336`. Uploaded main.wasm file as main.txt due to upload restrictions. ### Current State Prints nothing ### Expected Should print `79228162514264337593543950336`. ## Environment - Hardware Architecture: x86_64 - Operating system: Ubuntu 20.04 and macOS 10 ## Steps to Reproduce Wasmer: `wasmer --enable-all main.wasm -i func1` Wasmedge: `wasmedge --reactor --enable-all main.wasm func1` or `wasmedgec main.wasm main-edge.wasm; wasmedge --reactor --enable-all main-edge.wasm func1``?"}
{"completion":"The labels for this issue are `priority:medium`.","prompt":"Can you assign labels to the GitHub issue titled `Performance evaluation questions` created by `wilsonwang371`, stating `Hi guys, I'm comparing the performance of wasmedge, wamr, and wasmtime using the benchmark from https://github.com/attractivechaos/matmul. Surprisingly, wamr shows better performance than wasmedge and wasmtime for the AOT performance comparison. I need help explaining this disparity. ```bash $ time wasmedge ./mutmul.wasmedge.so -a 0 -n 3000 CPU time: 422.781 Central cell: 744.603 real        7m3.840s user        7m2.583s sys        0m0.544s $ time wasmtime run ./mutmul.cwasm --allow-precompiled -- -a 0 -n 3000 CPU time: 0 Central cell: 744.603 real        7m0.237s user        6m58.557s sys        0m0.551s $ time ~/wasm-micro-runtime/product-mini/platforms/linux/build/iwasm ./mutmul.wamr -n 3000 -a 0 CPU time: 286.265 Central cell: 744.603 real        4m47.114s user        4m46.332s sys        0m0.173s ````?"}
{"completion":"The labels for this issue are `Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `Non-WasmEdge symbols leaked in the libwasmedge_c.so symbol table` created by `paravoid`, stating `Build with `-fvisibility=hidden -fvisibility-inlines-hidden` in `CMake`, yet symbols from `lld` and `std` are still exposed in the dynamic symbol table. Only `WasmEdge_*` should be exported. Environment: `x86_64 Debian sid`, `g++ 11.2.0`, `CMake 3.23.2`, `Boost 1.74.0`. Reproduction steps: Run the given commands in a clean Debian environment, and observe non-zero results for symbol table checks related to `lld`.`?"}
{"completion":"The labels for this issue are `bug platform-linux`.","prompt":"Can you assign labels to the GitHub issue titled `exec container process `/wasi_example_main.wasm`: Exec format error` created by `GreyBalloonYU`, stating `I'm trying to run a WebAssembly app using CRI-O and crun, but it exits with an \"Exec format error\" when checking the container's log. I can run ordinary containers and standalone WebAssembly apps, but CRI-O and crun don't work. My environment is a VMware virtual machine running Ubuntu 20.04.4 LTS. The versions are crun 1.5, cri-o 1.21.7, and wasmedge 0.10.0. My laptop OS is Windows 10 with WSL2 running Ubuntu 20.04. Followed the installation instructions but still facing the issue.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Increase the code coverage of environ-linux.cpp` created by `alabulei1`, stating `To address codecov report findings, we need to increase testing coverage for [environ-linux.cpp](https://github.com/WasmEdge/WasmEdge/blob/master/lib/host/wasi/environ-linux.cpp). Refer to the [Codecov report](https://app.codecov.io/gh/WasmEdge/WasmEdge/blob/master/lib/host/wasi/environ-linux.cpp) for details.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Increase the code coverage of linux.h` created by `alabulei1`, stating `We need to increase [linux.h](https://github.com/WasmEdge/WasmEdge/blob/master/lib/host/wasi/linux.h) based on the Codecov report for it. [Codecov report](https://app.codecov.io/gh/WasmEdge/WasmEdge/blob/master/lib/host/wasi/linux.h) is indicating this change.`?"}
{"completion":"The labels for this issue are `good first issue Hacktoberfest`.","prompt":"Can you assign labels to the GitHub issue titled `Increase the code coverage of inode-linux.cpp` created by `alabulei1`, stating `According to the codecov report, we should increase [inode-linux.cpp](https://github.com/WasmEdge/WasmEdge/blob/master/lib/host/wasi/inode-linux.cpp). See the [Codecov report for inode-linux.cpp](https://app.codecov.io/gh/WasmEdge/WasmEdge/blob/master/lib/host/wasi/inode-linux.cpp) for details.`?"}
{"completion":"The labels for this issue are `bug enhancement priority:high`.","prompt":"Can you assign labels to the GitHub issue titled `Fix the formatting for logs.` created by `q82419`, stating `The current logging in WasmEdge (using spdlog 1.9.0) is compatible with fmt 0.8.x. However, after the upgrade to Fedora 37, which includes fmt 0.9.0, WasmEdge fails to build. The expectation is to enable support for fmt 0.9.0 in WasmEdge logging. The environment details are as follows: - Hardware Architecture: x86_64 - Operating System: Fedora 37`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `Add support for __dirname in qjs` created by `juntao`, stating `When running JS programs in WasmEdge using QJS, it currently reads files from the working directory where the `wasmedge` command is invoked. To address confusion around this behavior, we need to support the built-in variable `__dirname` in WasmEdge qjs. This will allow specifying files in directories that are relative to the JS file itself.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `[Feature] To support user-defined error code used in host functions in WasmEdge` created by `apepkuss`, stating `The current WasmEdge version only supports pre-defined error codes for runtime, not user-defined error codes in host functions. This limits error handling for user-defined codes, causing difficulties in identifying the error source. I propose supporting distinction between runtime and user-defined error codes, exemplified by a prototype using an independent object called `MyError`. This solution has been verified to work correctly in Rust bindings. The prototype can be found [here](https://github.com/apepkuss/WasmEdge-1/tree/feat_types_hostfunc_error).`?"}
{"completion":"The labels for this issue are `enhancement good first issue`.","prompt":"Can you assign labels to the GitHub issue titled `Add unit tests for wasmedger.cpp` created by `alabulei1`, stating `Codecov analysis indicates that current unit tests for wasmedger.cpp cover only 37%. It's crucial to add more unit tests. You can find the unit tests [here](https://github.com/WasmEdge/WasmEdge/tree/master/test). Additionally, the Codecov report for wasmedger.cpp is available at: https://app.codecov.io/gh/WasmEdge/WasmEdge/blob/master/tools/wasmedge/wasmedger.cpp`?"}
{"completion":"The labels for this issue are `duplicate`.","prompt":"Can you assign labels to the GitHub issue titled `Thread panicked error in wasmedge_http_req` created by `2019zhou`, stating `I used wasmedge_http_req version 0.9.0 on Ubuntu 18.04. After a successful build, when I ran 'wasmedge get.wasm', I encountered this error:  ```jsx thread 'main' panicked at 'called Result::unwrap() on an Err value: IO(Error { kind: Unsupported, message: \"operation not supported on this platform\" })' ``` I found a potential cause for this error at https://radu-matei.com/blog/tensorflow-inferencing-wasi/, which suggested that wasmedge might not support threading. I need help resolving this issue because I am unsure of how to proceed.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Add option to disable executing (potentially malicious) AOT code` created by `richyliu`, stating `Currently, `wasmedge` runs AOT compiled code, which is a security risk. I propose a flag and separate API functions to prevent running AOT code. The README mentions executing user-defined or community-contributed code safely, but injecting arbitrary AOT section code bypasses webassembly sandboxing. If this behavior is intended, more prominent security alerts are necessary.`?"}
{"completion":"The labels for this issue are `enhancement`.","prompt":"Can you assign labels to the GitHub issue titled `Call host func in host func, `wasmtime Caller` similar feature.` created by `EmisonLu`, stating `In `wasmtime`, calling a host function within another host function is possible using `Caller<'_, T>`. This allows for calling one function from another within the host context. For example, calling `layer1` from `layer2` using `Caller`. However, this capability is not currently supported in `wasmedge`, leading to a deadlock when attempting similar functionality using the Rust SDK. The issue arises from passing `Vm` into a closure, which disrupts the runtime and may not be allowed. The author seeks a solution to enable calling a host function within a host function in `wasmedge`, akin to the functionality provided by `Caller<'_, T>` in `wasmtime`.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `[Compiler] lld on macho requires -arch and -platform_version to always be specified` created by `hydai`, stating `Reference: https://reviews.llvm.org/D97799 I want to propose a change in the behavior of the LLVM optimization passes. Currently, the `mem2reg` optimization pass misses an opportunity to eliminate redundant lifetime markers in some cases. This leads to redundant lifetime markers being emitted, which negatively impacts the optimization effectiveness.  To address this, I propose adding a new optimization to merge redundant lifetime intrinsics when running `mem2reg`. This optimization would improve the overall performance and maintain the correctness of the LLVM IR. I specifically request feedback on whether this change aligns with the LLVM optimization goals and would appreciate any insights on potential challenges or alternative approaches.`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Design a plugin installation option` created by `q82419`, stating `For WasmEdge versions 0.10.1-alpha.1 and later, the `WASI-NN` with OpenVINO plugin is supported. The installer should place the plugin shared library into the `.wasmedge/lib/wasmedge` folder. I'm requesting the design of a flag for the plugin installation, such as `--plugin=wasi_nn_openvino`. Currently, only one plugin is supported on linux, and more plugins may be added before the 0.11.0 version.`?"}
{"completion":"The labels for this issue are `Improvement platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge may fail to execute, due to the brewllvm is updated to 14.0.6` created by `hydai`, stating `If using llvm@13, our macos binary works; updating to llvm 14.0.6 may cause a dyld error due to WasmEdge linking to 13.0.1. To prevent this, we aim to statically link WasmEdge to llvm on macos. Environment: - Hardware: Intel and M1 model - OS: MacOS Steps to Reproduce: Download previous pre-built binaries and execute. Proposed Solution: Investigate and implement static linking for WasmEdge on macos to resolve llvm version compatibility issues.`?"}
{"completion":"The labels for this issue are `platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `[WIP] Make WasmEdge on macos statically link llvm` created by `hydai`, stating `Signed-off-by: hydai <hydai@secondstate.io> I have contributed code to the project and agree to the Contributor License Agreement. Please let me know if everything looks good.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `[Compiler] Replace mach_o with macho after LLVM 14 released` created by `hydai`, stating `The author shared a reference to 'https://reviews.llvm.org/D114842' and emphasized the need to optimize performance in the LLVM codebase. They proposed to address redundant code generation for zero or constant offset GEPs and highlighted the challenges and potential impact of their approach, seeking feedback on the implementation. The author outlined the technical specifics and key actionable items, including modifying the GlobalISel and DAG ISel to handle the proposed changes. They indicated the potential need for additional tests and requested a review of the provided patch to achieve performance improvements efficiently.`?"}
{"completion":"The labels for this issue are `documentation integration platform-linux`.","prompt":"Can you assign labels to the GitHub issue titled `Create a demo: k8s+crun+wasmedge+wasi-nn` created by `hydai`, stating `WasmEdge needs a complete example to demonstrate using k8s, crun, WasmEdge, and wasi-nn extension for managing AI inference service inside wasm-based images. The demo should be based on a previous k8s+crun+WasmEdge example, running a simple wasm+wasi application and an HTTP server.`?"}
{"completion":"The labels for this issue are `documentation`.","prompt":"Can you assign labels to the GitHub issue titled `[Docs] Update Dapr and QuickJS docs` created by `juntao`, stating `We've updated the Dapr demo and the WasmEdge QuickJS Rust API now supports reusing classes.`?"}
{"completion":"The labels for this issue are `wontfix`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Enable fossa provided builds` created by `hydai`, stating `Signed-off-by: hydai <z54981220@gmail.com> Summary: Adding a signed-off message with the author's name and email for verification purposes.`?"}
{"completion":"The labels for this issue are `Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[CI] Refactor workflows, reduce duplicate codes` created by `0yi0`, stating `This pull request addresses issue #1464 by:  - Updating the README for workflows - Restructuring `build.yml` and `linter.yml` to utilize reusable workflows - Implementing several build processes, including macOS, manylinux, Fedora, Windows, Android - Refactoring `build-extensions.yml` (work-in-progress)`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `No wasi env has been passed with wasmedge_sys` created by `DarumaDocker`, stating `My wasm(rust): ```rust use std::env; #[no_mangle] pub fn print_env() {   println!(\"The env vars are as follows.\");   for (key, value) in env::vars() {     println!(\"{}: {}\", key, value);   }   println!(\"The args are as follows.\");   for argument in env::args() {     println!(\"{}\", argument);   } } ``` When calling `print_env` with wasmedge binary: `wasmedge --env a=b --env c=d --reactor test.wasm print_env` The result is: ``` The env vars are as follows. a: b c: d The args are as follows. test.wasm print_env ``` Using wasmedge_sys, when calling `print_env`: ```rust use wasmedge_sys::{Config, Vm}; use std::path::Path; fn main() {     let mut config = Config::create().unwrap();     config.wasi(true);     let mut vm = Vm::create(Some(config), None).unwrap();     let mut wasi_module = vm.wasi_module_mut().unwrap();     wasi_module.init_wasi(         Some(vec![\"abc\", \"123\"]),         Some(vec![\"a=b\"]),         Some(vec![]),     );       let wasm_path = Path::new(\"/home/test.wasm\");     vm.load_wasm_from_file(wasm_path);     vm.validate();     vm.instantiate();     println!(\"{:?}\", vm.run_function(\"print_env\", vec![])); } ``` The output is: ``` The env vars are as follows. The args are as follows. Ok([]) ``` Envs were not passed in, and the empty output lines showed that the two args had been passed in without content.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `stdout of wasm doesn't print with wasmedge-sys` created by `DarumaDocker`, stating `My Rust WebAssembly function `say()` prints \"hello\" when called by `wasmedge-go`. To achieve this, the `say()` function is declared as an external C function. In the host code, `wasmedge-go` is used to load and execute the wasm file, resulting in the expected output. However, when calling `say()` using `wasmedge-sys`, only \"run say()\" is printed, not \"hello\". This occurs despite proper configuration and function calling. It's important to note the difference in behavior when using different WebAssembly runtimes (e.g., `wasmedge-go` and `wasmedge-sys`), despite employing similar configurations. Therefore, investigating the runtime differences between `wasmedge-go` and `wasmedge-sys` is necessary to understand and address this issue.`?"}
{"completion":"The labels for this issue are `enhancement help wanted priority:low platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `[Cmake] Enable WasmEdge C API static library on MacOS` created by `q82419`, stating `The WasmEdge C API static library build fails on MacOS due to an error when using the cmake command. The error message \"ar: --output=objs/spdlog::spdlog: not found in archive\" is displayed. The issue can be fixed by building with the flag `-DWASMEDGE_BUILD_STATIC_LIB` on MacOS.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Create a Tokio-like async runtime in WasmEdge` created by `MediosZ`, stating `The main motivation is to enhance WasmEdge's support for async networking by creating a single-threaded Tokio runtime compatible with WebAssembly. This is challenging as Tokio is multi-threaded and traditional Tokio cannot function correctly in single-threaded WebAssembly. Key milestones include creating an async runtime based on `wasmedge_wasi_socket`, adding missing functions to `wasmedge_wasi_socket`, making `mio` and `tokio` work in WasmEdge, and porting some libraries based on `tokio` to WasmEdge. The aim is to simplify the current WasmEdge API for async networking for better integration with Rust developers' preferences for an async / await API similar to Tokio. The goal is to achieve a WebAssembly-compatible Tokio scheduler.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `LFX Workspace: Support Durable Objects (DO) in WasmEdge` created by `stdrc`, stating `Durable Objects are crucial for stateful serverless functions, and the Anna KVS project from UC Berkeley is well-suited for edge nodes. The goal is to create Rust and JavaScript clients for Anna KVS using the WasmEdge socket API to support stateful serverless functions on the edge cloud. Milestones include adapting the anna-rs client code to connect to routing and KVS nodes through TCP and using Tokio instead of smol. Additionally, the adapted client needs to run on top of WasmEdge and improve the client SDK's API experience. Key Actions: - Adapt anna-rs client code for TCP connection and use Tokio. - Run the adapted client on WasmEdge (dependent on #1532). - Enhance the client SDK's API experience.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge CLI fail due to the plugins` created by `q82419`, stating `After installing WasmEdge 0.10.0, the CLI fails on MacOS with a symbol not found error related to plugins. Running the CLI without plugins works fine. The expected behavior is for the CLI to run successfully regardless of the presence of plugins. The issue occurs on MacOS 10.15 with x86_64 architecture. Steps to reproduce: 1. Install WasmEdge 0.10.0 using the installer. 2. Set the environment. 3. Run the WasmEdge CLI. The problem specifically involves the CLI failing due to a symbol not found error when plugins are present. The expected resolution is to ensure the CLI runs successfully with or without plugins.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `Lazy symbol binding failed on MacOS` created by `IhostVlad`, stating `Try launching `wasmedge` for command line executable, but encountering a symbol error when running the command `wasmedge --version`. The error indicates \"dyld: lazy symbol binding failed\" for symbol `__ZN8WasmEdge6Plugin14PluginRegisterC1EPKNS0_6Plugin16PluginDescriptorE`. This occurs on MacOS BigSur 11.6.1 with Wasmedge 0.10.0 installed as per the given instructions. The symbol causing the issue is defined in [`_WasmEdge::Plugin::PluginRegister::PluginRegister`](https://github.com/WasmEdge/WasmEdge/blob/master/lib/plugin/plugin.cpp#L185), which is expected to be included in the shared library `libwasmedgePluginWasmEdgeProcess.dylib`. However, despite the presence of the symbol in the library, dropping the file enables `wasmedge` to launch, though it still does not function as expected post installation, implying potential issues with the plugin functionality. The current challenge revolves around the failure to recognize the symbol `__ZN8WasmEdge6Plugin14PluginRegisterC1EPKNS0_6Plugin16PluginDescriptorE` while launching `wasmedge`. Although the symbol is present in the shared library, removing the file allows `wasmedge` to launch, indicating a potential issue with the default installation and plugin functionality. Potential proposals or requests for assistance are implied but not explicitly stated, such as seeking guidance on troubleshooting the symbol recognition issue and addressing the plugin functionality concerns post installation.`?"}
{"completion":"The labels for this issue are `help wanted Improvement priority:low`.","prompt":"Can you assign labels to the GitHub issue titled `Enable Nix static build for WasmEdge` created by `hydai`, stating `Just ensuring there's always a way to create static binaries and libraries for WasmEdge. This is a key requirement for our project's development and usage.`?"}
{"completion":"The labels for this issue are `good first issue help wanted Improvement platform-windows binding-rust`.","prompt":"Can you assign labels to the GitHub issue titled `Enable building and testing workflow for rust related crates on the Windows platform` created by `hydai`, stating `Currently, there is no workflow to build and test rust-related crates on the Windows platform. This means there is no guarantee of successful compilation and functionality testing.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `WasmEdge 0.9.1 states \"Image Extensions not supported\"` created by `chairwa`, stating `I use WasmEdge 0.9.1 and WasmEdge-go 0.9.2 to run https://github.com/yomorun/yomo-wasmedge-tensorflow.\r \r I installed WasmEdge 0.9.1 via the provided script but encountered issues with image and Tensorflow extensions on aarch64 Ubuntu 20.04.\r \r I expected successful installation of WasmEdge-image 0.9.1 for aarch-linux provided at https://github.com/second-state/WasmEdge-image/releases/tag/0.9.1.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[Installer] Cannot install the latest version` created by `q82419`, stating `WasmEdge 0.10.0 installation issues: - Current version installs 0.9.1 if `-v` option is not specified. - On MacOS, 0.10.0 doesn't install extensions with `-e all`, but 0.10.0-rc.1 works. Expected: - Automatically install the latest version, 0.10.0, if no version specified. - Ensure image and tensorflow extensions install for 0.10.0 on MacOS. Environment: - Hardware: x86_64 - OS: MacOS 10.15.7`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[WASI] Close socket, but fd is leak` created by `L-jasmine`, stating `I continuously accept and close new sockets, resulting in an increasing number of file descriptors when I execute `ls /proc/{wasmedge_pid}/fd`.`?"}
{"completion":"The labels for this issue are `bug platform-linux`.","prompt":"Can you assign labels to the GitHub issue titled `bug: support LLVM 14 on Fedora` created by `hydai`, stating `The Fedora package management system updated llvm from `13.x` to `14.x`, causing failures in our fedora OS workflows. We need to support llvm 14 to fix these issues. Currently, all workflows related to fedora OS are failing, but we expect them to pass. To reproduce, refer to: https://github.com/WasmEdge/WasmEdge/runs/6485509505?check_suite_focus=true`?"}
{"completion":"The labels for this issue are `documentation enhancement platform-windows platform-linux platform-macos platform-OHOS`.","prompt":"Can you assign labels to the GitHub issue titled `CI: Clean up the build environments` created by `hydai`, stating `List the supported environment information, including hardware architectures, operating systems, and their versions, by creating a table. Also, clean up the build.yml CI with this table.`?"}
{"completion":"The labels for this issue are `enhancement good first issue help wanted feature`.","prompt":"Can you assign labels to the GitHub issue titled `feat: Implement WASI-IO proposal in WasmEdge` created by `hydai`, stating `We aim to utilize `fd_write` and `fd_read` to handle the socket in issue #1459. To achieve this, implementing the WASI-IO proposal is necessary. Since WASI-IO is a phase 2 proposal, its spec may change, so it's crucial to stay updated with the latest master for the implementation. Please refer to the following resources: - WASI-IO: [WASI-IO on GitHub](https://github.com/WebAssembly/wasi-io) - WASI-IO related to `fd_write` and `fd_read`: [Pull Request](https://github.com/WebAssembly/wasi-io/pull/4)`?"}
{"completion":"The labels for this issue are `enhancement help wanted`.","prompt":"Can you assign labels to the GitHub issue titled `The installer should copy plugins into the installed folder` created by `hydai`, stating `The latest pre-release 0.10.0-alpha.1 has restructured the file system, moving the WasmEdge process host functions into an external shared library. The default installed path is now `~/.wasmedge/plugin`. The installer and uninstaller should be updated to support the copy and removal of these files accordingly.`?"}
{"completion":"The labels for this issue are `bug platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `Fix MacOS workflow to the latest OS version and AppleClang version` created by `hydai`, stating `WasmEdge cannot be built on the latest MacOS using the latest AppleClang, on x86_64 or aarch64 platforms. The expected outcome is to successfully compile WasmEdge. Related issues include #1434 and #1426.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Implement component-model proposal in WasmEdge` created by `hydai`, stating `The component-model proposal integrates and replaces the Module Linking and Interface Types proposals. With this feature, WasmEdge gains the ability to execute multiple wasm modules with Module Linking and use more flexible types with Interface Types.  Key tasks include studying and evaluating the component-model proposal, supporting new grammars and binary formats, creating a test suite for unit and integration tests, and developing various demonstration applications. Minimum qualifications for the LFX mentorship program include experience with the C++ programming language and WebAssembly/WasmEdge.`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Support Durable Objects (DO) in WasmEdge` created by `juntao`, stating `Durable Objects (DO) are vital for stateful serverless functions. The goal is to create Rust and JavaScript clients for Anna KVS using the WasmEdge socket API, allowing WasmEdge applications to connect to Anna KVS and perform CRUD operations. New Rust-based Anna KVS version will likely be used for this task, and the network socket API will remain largely unchanged. ## Specification 1. Understand and connect to Anna KVS. 2. Learn the WasmEdge socket API in Rust and JavaScript. 3. Develop an Anna KVS Rust client and publish it as a crate. 4. Create a JavaScript client for Anna KVS using the `wasmedge-quickjs` HTTP client. 5. Develop demo apps and documentation. ## Qualifications 1. Rust programming language experience. 2. JavaScript experience. 3. Database connectors and client libraries experience. ## Appendix - Anna KVS: [https://github.com/hydro-project/anna] - Rust -- WasmEdge socket API: [https://github.com/second-state/wasmedge_wasi_socket] - Rust -- WasmEdge HTTP examples: [https://wasmedge.org/book/en/dev/rust/networking-nonblocking.html] - JavaScript -- WasmEdge HTTP examples: [https://wasmedge.org/book/en/dev/js/networking.html]`?"}
{"completion":"The labels for this issue are `LFX Mentorship`.","prompt":"Can you assign labels to the GitHub issue titled `Create a Tokio-like async runtime in WasmEdge` created by `juntao`, stating `WasmEdge aims to improve its non-blocking networking by creating a single-threaded Tokio runtime compatible with WebAssembly. The specific tasks include evaluating Tokio runtime, building a single-thread scheduler, compiling it to WebAssembly, addressing WasmEdge support, and creating HTTP fetch and server demos. The qualifications for the LFX mentorship require expertise in Rust, Tokio, WebAssembly, and WasmEdge. Essential resources include the Tokio async runtime, the Tokio single-thread scheduler, the non-blocking I/O API for WasmEdge, and the Rust API for WasmEdge sockets extension. The primary objectives are to enhance async networking in WasmEdge, create a WebAssembly compatible Tokio scheduler, and produce demo apps using the new Tokio API. Qualifications entail proficiency in Rust, Tokio, WebAssembly, and WasmEdge. Key resources include the Tokio async runtime and the non-blocking I/O API for WasmEdge. The completion of this project requires expertise in these areas.`?"}
{"completion":"The labels for this issue are `OSPP`.","prompt":"Can you assign labels to the GitHub issue titled `[OSPP] Support async execution mode for WebAssembly in the WasmEdge Java SDK` created by `alabulei1`, stating `Asynchronously executing WebAssembly programs is crucial for modern application runtimes. To enable Java host applications to execute embedded WasmEdge programs asynchronously, we need to integrate Java’s standard asynchronous constructs into the WasmEdge Java SDK. The main tasks involve learning the C-based WasmEdge asynchronous execution API, designing and creating an asynchronous execution API for Java, and using JNI to connect the Java API with WasmEdge C API. Key tasks: - Learn the C-based WasmEdge asynchronous execution API. - Design and create an asynchronous execution API for Java. - Use JNI to connect the Java API with WasmEdge C API. Additional resources: - C API docs: [WasmEdge C API Documentation](https://wasmedge.org/book/en/embed/c/ref.html) - Apply here: [Project Application](https://summer-ospp.ac.cn/#/org/prodetail/228830221)`?"}
{"completion":"The labels for this issue are `OSPP`.","prompt":"Can you assign labels to the GitHub issue titled `[OSPP] A MySQL database driver for WebAssembly` created by `alabulei1`, stating `As WebAssembly gains traction as a server-side runtime, the need for relational database access in WebAssembly applications like serverless or embedded functions grows. However, the lack of support for POSIX socket API in WebAssembly hinders the proper functioning of standard Rust or JavaScript connectors for MySQL. To address this, WasmEdge offers its own networking socket extensions for WebAssembly. With the WasmEdge Rust and JavaScript SDKs, developers can create high-performance non-blocking I/O applications, including database connectors. The WasmEdge Rust SDK for networking socket resembles Tokio’s low-level API. In this project, using the WasmEdge Rust SDK, the task is to build a MySQL database connector similar to MySQL’s official Rust connector. For further details and application, visit: [WasmEdge](https://github.com/second-state/wasmedge_wasi_socket) Apply at: [Summer-OSPP](https://summer-ospp.ac.cn/#/org/prodetail/228830160)`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `[bug] sock_getaddrinfo has a bug in IPv6` created by `L-jasmine`, stating `The size of `sockaddr.sa_data` should be 28-2 instead of 14 when `sockaddr` represents an IPv6 address.`?"}
{"completion":"The labels for this issue are `feature`.","prompt":"Can you assign labels to the GitHub issue titled `Refactor the store and the module instance.` created by `q82419`, stating `Refactoring tasks: - Transfer ownership of instances from the store manager to the module instance. - Consolidate the import object into the module instance. - Update executor to invoke functions by the function instance instead of by function name. - Refactor the WasmEdge C API. - Update tests and C API document. - Provide guideline for upgrading to version 0.10.0.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `WASI test result value checking` created by `q82419`, stating `The WASI test results are not being checked, causing the tests to pass even when the results are wrong. The expected action is to check the WASI test results.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Value stack not 0 after invocation in interpreter mode` created by `q82419`, stating `The value stack size should be 0 after invoking, but in some cases, it remains at 1. This occurs in the WAT at \"func.wast\" line 337. The expected behavior is for the value stack to be 0 after the invocation.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Add the validation passing flag in AST module` created by `q82419`, stating `After refactoring, inserting non-validated meta data into the AST module causes wired errors when executing. The expected behavior is to return a fail when a non-validated AST module is used for instantiation into the executor.`?"}
{"completion":"The labels for this issue are `Improvement`.","prompt":"Can you assign labels to the GitHub issue titled `[Test] Interpreter functions, AOT compiled functions, and host functions mixing invocation` created by `q82419`, stating `To ensure the correctness of WasmEdge, we need to add tests for cases where instantiated modules import functions from host and other WASM modules, and when mixing interpreter and AOT modes may occur, potentially leading to errors during `stack` or `executor` refactoring.`?"}
{"completion":"The labels for this issue are `bug`.","prompt":"Can you assign labels to the GitHub issue titled `Enumeration mapping lost of the last index` created by `q82419`, stating `For error logging, the mapping of the last index in the enumeration string is failing. The first line should show \"execution failed,\" but the enumeration does not contain \"execution.\" ``` [2022-03-09 04:30:20.988] [error]  failed: undefined element, Code: 0x8b [2022-03-09 04:30:20.988] [error]     In instruction: call_indirect (0x11) , Bytecode offset: 0x0000004c , Args: [100] [2022-03-09 04:30:20.988] [error]     When executing function name: \"call\" [2022-03-09 04:30:21.005] [error] instantiation failed: unknown import, Code: 0x62 [2022-03-09 04:30:21.005] [error]     When linking module: \"test\" , table name: \"unknown\" [2022-03-09 04:30:21.005] [error]     At AST node: import description [2022-03-09 04:30:21.005] [error]     At AST node: import section [2022-03-09 04:30:21.005] [error]     At AST node: module ``` I need to fix all enumerations in `enum.inc`.`?"}
{"completion":"The labels for this issue are `question wontfix`.","prompt":"Can you assign labels to the GitHub issue titled `Import WASI doesn't import \"wasi_unstable\"` created by `spacewander`, stating `Some Wasm files are using `wasi_unstable`, but the Wasi module only contains `wasi_snapshot_preview1`. I got an error `When linking module: \"wasi_unstable\", function name: \"proc_exit\"` when trying to load a specific Wasm file.`?"}
{"completion":"The labels for this issue are `bug platform-windows`.","prompt":"Can you assign labels to the GitHub issue titled `bug: Windows 10 action failed` created by `hydai`, stating `The CI build has been failing for the past week, and I'm unsure about the specific environmental changes causing it. Encountered error:  ```bash ninja: error: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/DIA SDK/lib/amd64/diaguids.lib', needed by 'test/aot/wasmedgeAOTCoreTests.exe', missing and no known rule to make it ``` Expected outcome: The build process should proceed without issues.`?"}
{"completion":"The labels for this issue are `platform-macos`.","prompt":"Can you assign labels to the GitHub issue titled `Is mac os support Image Extensions  and Tensorflow extensions?` created by `sunnypandas`, stating `I ran 'curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install.sh | bash -s -- -e all' to install wasmedge but encountered issues: - Image Extensions not supported - Tensorflow extensions not supported Need assistance with this, thanks.`?"}
